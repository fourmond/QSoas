# Examples

This page gathers series of standalone examples. Run them step by
step, either by copying the commands to the command prompt or by
right-clicking and select "Run command", which runs the command
directly.

Some of the examples require the [example files][examples]. Just
download the [archive][examples-zip], unzip it, and make sure you are
inside the created directory (using [cmd: cd]).

## Data generation

### Several bessel functions {#bessel-functions}

The following command generates values of the Bessel function
(regular cylindrical of order 0) for $$x$$ between -15 and 15:

~~~
QSoas> generate-buffer -15 15 bessel_j0(x)
~~~

The [`bessel_jn(x)`](qsoas.html#special-functions) function gives the
values of the bessel function of an arbitrary order. Combined with the
`/number` option to [cmd: generate-buffer], one can generate the
values of the bessel functions from the first 5 orders (0 to 4):

~~~
QSoas> generate-buffer -15 15 bessel_jn(x,number) /number=5
~~~

The use of the `/number` option introduces a `number` parameter that
can be used in the formula.

### Solving equations

QSoas has functionalities to solve numerically for $$y$$
$$f(x,y) = 0$$ equations, using the [cmd: solve] command. For instance:

~~~
QSoas> generate-buffer -10 10
QSoas> solve y*cosh(y)-x
~~~

This looks for points for which $$y \times \cosh y = x$$. Two caveats:

 * the variable is $$y$$ and not $$x$$, so that you can obtain
   functions of $$x$$ in the end
 * the algorithm is iterative, starting with the values of $$y$$
   currently in the buffer. Try to start with a first approximation of
   the solution, or at least some value for which your equation is
   defined !

## Data processing

### Average

There are several ways to obtain the average of data. Let's look at
a simple cosine function:

~~~
QSoas> generate-buffer -10 10 cos(PI*x)
~~~

On can obtain the average of the y values by just running:

~~~
QSoas> stats
~~~

This prints a lot of statistics, one of which is `y_average
=	 0.001` (almost 0, as is expected from a sine wave over an integer
of periods). To print only the relevant one:

~~~
QSoas> stats /stats=y_average
~~~

Note that there is automatic completion on the `/stats=` part: don't
bother typing everything, just hit TAB.

Finally, you can also take advantage of the `$stats` special variable:

~~~
QSoas> eval $stats.y_average
~~~

### Normalization

QSoas offers different ways to normalize datasets. The simplest is
[cmd: norm], which simply divides by the largest number.

The best way to normalize controlling exactly what you do is the use
of [cmd: apply-formula], and take advantage of the `$stats` variable
making available the statistics of [cmd: stats]. Here are a few
examples. To do the same as [cmd: norm]:

~~~
QSoas> apply-formula y/=$stats.y_max
~~~

For almost the same thing, but dividing by the 90th percentile, which
does a better job when dealing with spiky data:

~~~
QSoas> apply-formula y/=$stats.y_q90
~~~

To divide by the integral of the signal, something common in
spectroscopy:

~~~
QSoas> apply-formula y/=$stats.y_int
~~~





[examples]:https://github.com/fourmond/QSoasExampleFiles/ "GitHub repository for the example files"
[examples-zip]:https://github.com/fourmond/QSoasExampleFiles/archive/data.zip "ZIP archive of the example files"
