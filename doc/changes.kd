# What's new in version 3.2 ?

Version 3.2 is mostly a bug-fix release, fixing a mistake in the EEC
reversible with relay fits, see
[the correction](https://pubs.acs.org/doi/10.1021/jacs.3c01652) of the
original article. All users of the [fit: eecr-relay-wave] fit are
strongly encouraged to rerun their fits with the new version.

In addition to this important fix, new possibilities have been added,
including a way to make fits with "partially global" parameters, to
pick the best parameters dataset-by-dataset within fit trajectories,
a parameter space explorer trying all possible permutations of a set
of parameters, and the possibility to save the results of a command to
a global ruby variable.

It also includes a series of improvements of already existing commands.

See the full list of changes [below](#v3p2)


# What's new in version 3.1 ?

Version 3.1 brings many improvements to the fit system, including more
flexibility in loading parameters, processing fit trajectories (after
parameter space exploration), and improvements in individual fits.

It brings in also a series of new commands, to look at files and
directories, to add noise and remove it, to run linear least squares
minimisations and facilitate the handling of column and row names.

It features also many other improvements, such as the possibility to
define "virtual files" inside script files, to define reusable
parameters, basic handling of complex numbers and many useability
fixes. 

See the full list of changes [below](#v3p1)

# What's new in version 3.0 ?

Version 3.0 brings an "expert" fit mode, with a fit command line that
makes it possible to automate fitting or do parameter space
exploration, running many fits with random initial starting positions
to greatly increase the likelihood of finding the best parameters
(along with many other new features for fits).

Another improvement in the fits is a new implicit fit, to fit an
implicit equation to data.

This release also brings in a command to permanently record information
about a file, such as the conditions in which the experiments were
made (the sample used, the temperature, etc...), in a format that
QSoas automatically reads when reading the file. This makes it
possible to quickly browse through data to find the experiments you
need.

Finally, this release brings in a whole new offline documentation
system, with and index and search facilities, startup tips,
cross-reference examples and the possibility to specify manually all
the command arguments and options in a dialog box when running a
command from the menus.

See the full list of changes [below](#v3p0)

# What's new in version 2.2 ?

Version 2.2 brings in a lot of new features and improvements, notably
greatly improved memory use for massive multifits, a fit for linear
(in)activation processes, a new way to transform "numbers" like peak
position or stats into new datasets and SVG output ! It also finally
brings back the peak area output in [cmd: find-peaks] and related
commands !

See the full list of changes [below](#v2p2)

# What's new in version 2.1 ?

Version 2.1 brings in a number of new functionalities, such as a
command to solve equations, and ways to reparametrize fits, along with
numerous improvements of already existing commands.

See the full list of changes [below](#v2p1)

# What's new in version 2.0 ?

Version 2.0 brings a whole new set of functionalities for fits, namely
a fit engine with enormous performance increases in massive
multibuffer fits (easy to reach a 1000 times speed increase !),
definition of fits with a distribution of parameters, and many new
functions.

See the full list of changes [below](#v2p0)

# Changes in version 3.3 (22.03.2024) {#v3p3}

## Fits

 * a [fit: laplace] fit to fit reverse Laplace transforms of a formula
 * a [cmd: define-reverse-laplace-fits] command to define reverse
   Laplace fits;
 * a [fit: pH] fit to fit pH titrations, just like the [fit: nernst]
   fit for redox titrations;
 * a [cmd: define-monotone-fit] command that defines a modified
   version of a fit that only yiels monotonic evolutions (useful to
   restrict the possibilities for some kinds of baselines).
 * [cmd: combine-fits] now offers the possibility to not rename
   parameters, or only those that are identical between the fits
 * the [fit-cmd: load] fit command has gained some facilities to load
   only a subset of parameters from a file
 * the fit parameters that are marked by the fit as "linear" are now
   displayed in blue (this has no effect as of now)
 * it is possible to add and remove flag in fit trajectories (see 
   [fit-cmd: browse-trajectories], and display a summary of
   trajectories by flag. 
 * other improvements in [fit-cmd: browse-trajectories], like the
   possibility to set a trajectory as reference to color the others
   based on the the distance from the reference

## New commands

 * a [cmd: pick] command to select one or a few rows from a dataset;
 * a [cmd: convolve] command to convolve a dataset by a function;
 * a [cmd: reverse-laplace] that computes the numerical reverse
   Laplace transform of a function;
 * a [cmd: average-duplicates] to average the Y values of rows in a
   dataset that share the same X (within a certain tolerance);
 * a [cmd: sv-decomp] command to perform singular value decomposition
   on data;
 * a [cmd: correlation-matrix] command that makes the correlation
   matrix of the columns

## Improvements of previous commands

 * a `??` shortcut for `? /synopsis=true`
 * a bandcut filter for [cmd: filter-fft], together with a linear power
   spectrum display and facilities to look at aliased frequencies;
 * a `/nup` option to the datasets browsers
 * a reworked [cmd: edit] that makes it possible to add/remove
   rows/columns, and directly edit perpendicular coordinates and
   row/column names
 * most of the commands working with column names now accept the `i`
   column to designate the index column
 * [cmd: run-for-each] can now also change other arguments than the
   first one
 * the [cmd: auto-filter-fft] command can now also do bandcut filters
 * the [cmd: run-for-values] can now work on more than one dataset
 * the commands [cmd: cat] and [cmd: hide-buffer] now accept the
   `/for-which` option

## Other improvements

 * interruption of scripts via the the button at the right of the
   prompt;
 * automatically switching to drawing oints in more situations,
   improving the drawing speed;
 * better loading of fit parameter files as datasets;
 * several bug fixes/small improvements.
 * handling of `mruby` versions 3.0 and 3.1
 * windows users can also use `/dev/null` to mean an empty file (it is
   already the case on POSIX platforms)
 * make sure the `C` locale is always used, in particular for `mruby`
   and for the parsing of numbers in general
 * a `tests/doc` directory containing more information about some of
   the compuations behind some of the tests

# Changes in version 3.2 (22.03.2023) {#v3p2}

## Fits

 * **important** the [fit: eecr-relay-wave] fits were using a false
   formula, leading to wrong fits. This version provides a corrected
   and validated formula (see [the correction](https://pubs.acs.org/doi/10.1021/jacs.3c01652));
 * the [cmd: define-indexed-fit] command makes it possible to define fits in
   which a parameter is indexed on a meta-data, to make fits with
   "partially global" parameters;
 * parameter space explorers now save the trajectories on each
   iteration;
 * a [fit-cmd: compute] command to recompute the fit;
 * a [fit-cmd: pick-from-trajectories] to pick the best parameters,
   dataset-by-dataset from a list of trajectories;
 * a [fit-cmd: permutation-explorer] explorer that allows one to try all the
   possible permutations of one or several sets of parameters;
 * enable the use of reporters in plain ODE fits;
 * improvements of the trajectory displays, with better ways to hide
   parameters and a new tab showing the parameters as a function of
   perpendicular coordinates.

## New command

 * a [cmd: run-for-values] command to run scripts passing as arguments
   the contents of a dataset, row by row.

## Improvements of previous commands

 * all the commands generating values (like [cmd: stats], etc...) can
   now also save their results into the global ruby variable `$values`
   using the `/set-global` option;
 * the [cmd: linear-least-squares] command can now optionally generate
   datasets with the fits or the residuals.

## Other improvements

 * better loading of fit parameter files as datasets;
 * several bug fixes/small improvements.
 * better handling of mruby 2.1, mruby 3 is currently not supported

# Changes in version 3.1 (28.09.2022) {#v3p1}

## Fits

 * now the main terminal is also accessible via a tab on from the fit
   window, which makes it much easier to follow the output of the
   various fit commands
 * more flexibility in [fit-cmd: load] for loading parameters,
   matching datasets, even renaming parameters on the fly
 * [fit: ode] and [fit: kinetic-system] now have a `/voltammogram`
   option to work better with the time and potential dependence of
   voltammograms
 * [fit: kinetic-system] now provide means to use various interfacial
   electron transfer models, including Marcus-Hush-Chidsey
 * definition of species names in [fit: nernst]
 * more flexibility to designate datasets for [fit-cmd: fix],
   [fit-cmd: unfix], [fit-cmd: set]
 * a [fit-cmd: sort-trajectories] command to sort the trajectories
 * the time-dependent parameters now allow to have several parameters
   controlled by the same time dependence (with different values)
 * it is now possible to use `j_elec` as a reporter in the
   [cmd: kinetic-system] fit to represent the electrical current at
   the electrode
 * the fit engines are now more robust to the appearance of NaN, and
   also the trajectory sorting now handles them better too
 * the sim commands can now push the parameters as a dataset with
   `/operation=push`
 * the fit interface now has menus instead of the previously used
   combo boxes
 * trajectory loading is more resistant to manually modified
   trajectory files
 * the use of [cmd: reparametrize-fit] now also creates a command that
   can regenerate the parameters of the original fit from a dataset
   containing parameters of the reparametrized one


## New commands

 * a [cmd: add-noise] command to add random, controlable, noise to
   datasets
 * a [cmd: files-browser] command to browse files on the local storage
   and display/modify their meta-data
 * a [cmd: contour] to compute contour lines at a certain level from a
   y = f(x,z) dataset
 * a [cmd: clear-segments] command to remove all the segments of a
   dataset
 * an [cmd: save-meta] command to save the meta defined on the
   current dataset back to the original data file
 * a [cmd: head] command to display the beginning of a file (as text),
   as QSoas is seeing it (helpful for when [cmd: load] doesn't do what
   you want)
 * a [cmd: ls] command to list the files in the current directory
 * a [cmd: linear-least-squares] command that performs the (exact)
   determination of the parameters in the case of linear least
   squares, very powerful for data extraction
 * a [cmd: pause] command to temporarily stop the execution of a
   script
 * a [cmd: rotate] command to move points of a dataset from the
   beginning to the end
 * the [cmd: set-column-names] and [cmd: set-row-names] commands to
   set the column and row names of a dataset
 * a [cmd: let] command to define named parameters to be used inside
   scripts
 * a [cmd: sort-datasets] command to sort a series of datasets
   directly from within the stack
 * a [cmd: kernel-filter] command offering several kernel-like filters

## Improvements of previous commands

 * use of `$c.`*column* to read the value of a column in
   [cmd: strip-if] and [cmd: apply-formula]
 * [cmd: apply-formula] got several new modes of action, one in which
   a new column is added, another in which the dataset is considered
   as a global function y = f(x,z) (z is the perpendicular
   coordinate)
 * [cmd: apply-formula] can also use column names for both
   reading and modifying
 * truncate the dataset using the Ruby function `break` in
   [cmd: apply-formula]
 * many commands got the possibility to work on several datasets at
   the same time, and others that already had this also were given the
   `/for-which` option to better fine-tune the datasets they work on
 * possibilty to specify min and max in [cmd: bin]
 * [cmd: browse] got all the backend-specific options of the
   [cmd: load] command
 * [cmd: eval] got greatly improved, with the possibility to evaluate
   several formulas on several datasets at the same time, making it
   the best command for data extraction on series of datasets
 * [cmd: eval] can now also modify the row and column names 
 * [cmd: film-loss] got a new mode for determining the film loss rate
   constant on a given segment
 * the [cmd: find-peaks] command now can save the peak data into
   parameter files to help with initial parameters in fits
 * [cmd: generate-dataset] can generate different columns with
   different formulas in one go, and can directly give a name to the
   generated datasets with the `/name` option
 * [cmd: generate-dataset] can also have the X values logarithmically
   spaced
 * loading of row names from text files with the `/text-columns` option
   of [cmd: load]
 * the possibility to get the status of the accumulator with
   [cmd: pop]
 * the possibility to toggle between datasets in [cmd: reglin]
 * more flexibility in controling the format used for saving by
   [cmd: save] and [cmd: save-datasets]
 * the commands that generate several datasets in one go can now push
   them in the reverse order of what they usually do by using
   `/reversed=true`
 * the [cmd: sort] command can now work on any column, not just the X
   one
 * [cmd: edit] shows the perpendicular coordinates
 * a `/select=` option to [cmd: tweak-columns] that selects only a
   given number of (possibly named) columns from a dataset
 * conditional execution of scripts in [cmd: run]
 * [cmd: load] plays better with QSoas's own files, including the
   saved parameters files (which can be loaded as normal data files)
 * [cmd: edit] shows the column and row names
 * all the commands now preserve column and row names whenever
   possible, or handle them as they should
 * [cmd: cursor] can now quit subtracting X values
 * greatly improved speed for [cmd: load]
 * [cmd: save] now saves the meta-data in the `.qsm` files
 * commands that produce many datasets from one, or one from many now
   offer the possibilty to expand or contract the meta-data to lists
 * [cmd: auto-reglin] can also now be used as a filter
 * [cmd: record-meta] can now also be used to remove meta-data
 
## Other improvements

 * inline files: it is now possible to define "inline files" inside
   files already, which makes subroutine construction/calling much
   much easier to write and maintain
 * better handling of files that QSoas should not try to load (PDF
   files, etc...)
 * better display of the segments delimitation
 * it is now possible to specify columns using their name, via the
   `name:`*column* or `$c`.*column* syntax (with completion)
 * handling of complex numbers from within Ruby formulas
 * a `--headless` command-line option to run non-interactively
 * a `--run-script` command-line option to run directly a script
 * a true Win64 build, allowing you to use much more ram should the
   need arise
 * the tooltip over a dataset point also shows the row name when
   applicable
 * the terminal now uses bold and color when useful
 * now understands the `QSOAS_DEBUG` environment variable
 * a `--write-deps` command-line option that writes the dependency of
   all the generated files on the files QSoas had to read to generate
   them, in `Makefile` format
 * quite a few bug fixes, in particular concerning the interaction
   with Ruby
 * implemented a dataset rendering cache to greatly improve the
   responsivity when using commands like [cmd: cursor] on very "jaggy"
   datasets
 * disable the ugly "black console" window on Win platforms
 * NaN in datasets are now shown as a "cross" next to the non NaN
   points they are next to


# Changes in version 3.0 (03.12.2020) {#v3p0}

## Fits

The fit system has been greatly improved, with an `/expert=true` mode
featuring: 

 * a command-line interface with over 50 commands in the fit dialog to run
   fits non-interactively
 * parameter space explorers, which run fits systematically with
   different starting parameters, to improve the chance of finding the
   best parameters 
 * possibility to run scripts, even as a `fit-` command-line option,
   which means one can now perform fully automatic fits
 * the display, handling, reuse of all the previous fit attempts in a fit
   session ("fit trajectories"), including ways to highlight changes
 * the possibility to set the fit dialog title bar
 * a Particle Swarm Optimizer fit engine
 * the GSL implementation of the simplex as fit engine
 * a mode in `sim-` that just writes the residuals
 * a mode in `sim-` to export subfunctions
 * improvements to the parameters spreadsheet
 * a new fit, [fit: implicit], that fits the results of equations to
   data, together with a [cmd: define-implicit-fit] to create named
   implicit fits
 * the [fit: arb] fit now has its corresponding [cmd: sim-arb] function

## New commands

 * a [cmd: mem] command to query for memory usage and set the size of
   the cache for loading datasets
 * a [cmd: record-meta] command to permanently set meta-data
   to a given file
 * a [cmd: verify] command that aborts the current script if a
   condition is not verified
 * a [cmd: define-distribution] command to define distribution of
   parameters in fits

## Improvements of previous commands

  * [cmd: apply-formula], [cmd: eval] and [cmd: stats] can now work on
    several buffers
  * [cmd: browse-stack], [cmd: browse-stack], [cmd: overlay-buffer]
    now accept the `/for-which=` option to further select the buffers
  * [cmd: apply-formula] now better handles mathematical errors (like
    `sqrt(-1)`)
  * [cmd: load] and related commands now take an `/expected=` option
    to abort with an error if the number of loaded datasets is not
    what one expects
  * [cmd: run], [cmd: run-for-each] and [cmd: run-for-datasets] now
    provide several ways to deal with errors in the execution of the
    script: ignore, abort or fail
  * [cmd: reglin] can now be used to define a baseline to characterize
    peaks, and it can also show the exponential equivalent to the line
  * [cmd: cursor] has new symmetry operations, and can work
    effectively with many curves
  * [cmd: set-perp] can now take the values of perpendicular
    coordinates from a dataset row
  * possibility to disable optimization in [cmd: auto-filter-bs]
  * [cmd: show-stack] can also list the meta-data now
  * Gauss-Kronrod integration for distribution of parameters and other
    multidimensional integrators
  * [cmd: help] can now be run without argument to start the new
    documentation system. With a command argument, it will still take
    to the documentation of the command.
  
## Other improvements

  * new syntax for statistics and meta: one can now use
    `$stats.y_max` (etc.) in addition to `$stats["y_max"]` to refer to
    the `y_max` stats (and for all stats and meta too), which means
    that there is no need anymore for cumbersome double quoting like
    in `eval '$stats["y_max"]'`
  * completion on the meta/stats names for the code
  * a `%{ruby code}` expansion in scripts or command-line
  * a set of functions (`k_mhc` and `k_mhc_double`) to Marcus-Hush-Chidsey
    rate constants (using the integral formula)
  * a `trumpet_bv` function to compute the position of peaks in
    so-called "trumpet plots" when using Butler-Volmer kinetics
  * several additional functions like `ln_erfc(x)`, `ln_gamma(x)`
  * a `--log` command-line option to choose the log file name
  * a `--version` command-line option 
  * Gauss-Kronrod integrators for parameter distributions
  * full support for Qt5 (support for Qt4 is dropped)
  * running a command from the menu now spawns a full dialog box with
    the possibility to set options
  * it is now possible to deduce rate constants from thermodynamic
    constraints in kinetic systems
  * new statistics: `y_a` and `y_b`, which correspond to parameters of
    the linear regression of $$y = f(x)$$. Available for `y2` and all
    the others, still as a function of `x`.
  * a `_sum` statistic that corresponds to the sum of all elements
    (available for each column)
  * a new comprehensive offline documentation system with index,
    search capacities, cross-referenced examples, and the possibility
    to execute commands directly from within it
  * a series of startup tips
  * now, using the menus to start a command will show a dialog box in
    which one can choose the arguments and options

# Changes in version 2.2 (2018.03.21) {#v2p2}

## New commands

 * a [cmd: load-as-parameters] load function to load saved fit
   parameters as normal datasets
 * [cmd: pop], which can be combined with the various `/accumulate=`
   options to create datasets on the fly, from the results of commands
   like [cmd: stats] or [cmd: 1]

## Fits

 * new fit: [fit: linear-kinetic-system], which is useful for fitting
   the time traces of potential step experiments with linear
   inactivation (like in [Fourmond _el al_, *Nat Chem* 2014](http://dx.doi.org/10.1038/nchem.1892))
 * new time-dependent parameter: `ramps`
 * interpolation of parameters in the "Parameters Spreadsheet"
 * chi-squared "goodness of fit"
 * `qsoas` and `multi` a much more memory-efficient for massive
   multi-buffer fits
 * [fit: arb] has more "automatic" parameters
 * all the `sim-` commands now also take the `/style=` and
   `/set-meta=` options

## Improvements of previous commands

 * new picking modes available for all commands that pick points: the
   local min (Ctrl+M) and max (Ctrl+Shift+M)
 * possibility to track the point selected for commands that pick
   points
 * an `/exclusive=yes` option to [cmd: flag] to remove all the other
   flags
 * most data-producing commands now have an `/accumulate` option to
   generate buffers step-by-step, to combine with [cmd: pop]
 * new [cmd: stats]: `stddev`, and quantiles: `q10`, `q25`, `q75` and
   `q90`
 * [cmd: save-datasets] can now avoid to overwrite files
 * threshold option for [cmd: strip-if] (to avoid creating near-empty
   buffers)
 * [cmd: load-as-csv] now correctly parses CSV files with quotes
 * [cmd: print] can now export SVG files
 * [cmd: bin] can now use a column for weights, and normalize the
   sum to 1.
 * Finally bring back the peak area for [cmd: find-peaks], [cmd: 1]
   and [cmd: 2] !
 * [cmd: expand] can now group the Y columns 2 by 2, (or 3 by 3, etc.)
 * Improvements of [cmd: unwrap], including the possibility to reverse
   its effects

## Other improvements

 * possibility to load a saved stack by just double-clicking on it
 * in kinetic systems, can now use either Butler-Volmer or
   Marcus-Hush-Chidsey kinetics for interfacial electron transfers
 * now fully compatible with Qt 5, still not the default build
 * switched to using embedded [mruby](https://mruby.org) rather than
   plain ruby, which finally fixes a hard crash on Windows
 * new special functions: incomplete gamma functions
 * many bug fixes and other minor improvements

# Changes in version 2.1 (2017.01.02) {#v2p1}

## New commands

 * [cmd: solve], to solve equations
 * [cmd: reparametrize-fit], to manipulate the parameters of a fit

## Fits

 * Reparametrization of the wave shape fits for 1- and 2-electron
   reversible catalysts [fit: ecr-wave] and [fit: eecr-wave]
 * Implementation of the corresponding fits for irreversible
   catalysts, [fit: eci-wave] and [fit: eeci-wave]
 * The commands that define fits, [cmd: reparametrize-fit],
   [cmd: combine-fits], [cmd: define-distribution-fit] and
   [cmd: define-derived-fit] can now redefine existing fits with
   the option `/redefine=true`.
 * The `qsoas` and `multi` fit engines can now use scaling, see the
   "Fit Options" dialog
 * Improvements of the parameters spreadsheet

## Improvements of previous commands

 * [cmd: echem-peaks] now offers all the options of the other
   peak-finding commands, with the same meaning
 * When several datasets are specified, commands that pick points
   [cmd: cursor], [cmd: baseline], etc. can switch between all
   displayed datasets (with the `n` and `N` keys)
 * Commands that write to the output file can now also save the data
   as meta-data through the use of the `/set-meta` option.
 * It is now possible to select the statistics one wants to
   display/save with the [cmd: stats] command
 * [cmd: diff] can now compute an arbitrary derivative to an arbitrary
   order
 * [cmd: print] can now overwrite output PDF file without asking via
   the `/overwrite=true` option
 * most of the commands that can produce several datasets now take a
   `/flag=` option and a `/style=`, the exception being the `sim-`
   commands which still only support the `/flag=` option at this
   stage.


## Other improvements

 * Now compiles and runs with Ruby 2.3 and the most recent GSL
   releases
 * The `--stdout` command-line option writes the content of the
   terminal to the standard output
 * Sketch of an Emacs major mode, `misc/qsoas-mode.el` in the tarball
 * A series of bug fixes


# Changes in version 2.0 (2016.07.19) {#v2p0}

## New commands

 * [cmd: auto-flag], to automatically add flags to all newly
   created datasets
 * [cmd: auto-reglin], another way to compute the derivative of a
   signal
 * [cmd: define-distribution-fit], to define fits with distribution of
   values for parameters
 * [cmd: hide-buffer], to hide buffers from view
 * [cmd: mintegrate-formula], to integrate functions depending on one
   parameter
 * [cmd: reverse], to reverse the order of data points
 * [cmd: split-on-values], to split datasets on the values of certain
   colunms
 * [cmd: system], to run external commands
 * [cmd: timer], that measures the time between two calls
 * [cmd: add] and [cmd: multiply] commands
 * a [cmd: debug] function to save debug information in a directory,
   helpful for debugging (reproducible) crashes

## Fits

 * Load parameters using interpolation on Z values
 * Shortcut to fix/unfix a parameter for all datasets (right-clicking)
 * Spreadsheet mode for editing parameters
 * A "Multi" fit engine that performs very well for large number of
   buffers
 * Can now cancel the current fit using the shell command
   `killall QSoas -SIGUSR1` on Linux and MacOS
 * better convergence for the QSoas and Multi fit engines
 * Generalize the use of "time-dependent parameters" (the
   `/with=co:2,exp` options to [cmd: fit-kinetic-system]) to
   [cmd: fit-ode] and [cmd: fit-arb]
 * New types of time dependent parameters: `rexp` (exponential
   relaxation)  and `steps` (discrete steps)
 * The `sim-` commands can now compute the jacobian and reexport
   parameters (to the output file)
 * Now, the fit dialog detects when there are NaNs in the data, which
   avoid hard-to-understand problems of convergence of fits
 * a new [fit: pseudo-voigt] fit
 * a new [fit: polynomial] fit
 * Now, the commands that define fits can redefine existing (custom)
   fits if given the `/redefine=true` option
 * One can now specify the fit engine from the command-line 

## Improvements of previous commands

 * [cmd: eval] can now use statistics and meta-data of the current buffer
 * Can now push the transform using uppercase T in [cmd: filter-fft], and
   using the `/transform` option in [cmd: auto-filter-fft]
 * [cmd: save-datasets] can now be used to name files (or buffers)
   based on meta-data; it can also simply rename without saving, and
   create directories if necessary (using `/mkpath=true`)
 * [cmd: run] can change to the directory of a script when it is
   running it, using `/cd-to-script=true`
 * [cmd: flag] can now clear all flags before adding new ones
   (with `/set=true`)
 * [cmd: generate-dataset] can now generate several buffers at once
   when using the `/number` option
 * More control in [cmd: split-monotonic]: can now keep only the first
   and/or last parts, and group several segments into datasets
 * In [cmd: apply-formula] and [cmd: strip-if], one can now use `i_0`
   and `x_0` to refer to the index and value of x of the first point
   of the segment
 * [cmd: strip-if] is now aware of the metadata and stats, like
   [cmd: apply-formula]
 

## Other improvements

 * `latest` and `latest:`_n_ specifications to refer to the datasets
   generated by the latest command (or the _n_th before)
 * Faster startup time
 * New special functions: Dawson integral, Debye functions, the
   clausen function, a couple of Fermi-Dirac integrals, multigamma
   functions, some hypergeometric functions, and an approximation of
   Marcus-Hush-Chidsey kinetics
 * One can now use the `--run` and `--exit-after-running` command-line
   options to QSoas to run scripts from the command-line
 * possibility to run "inline" Ruby code from within scripts and from
   QSoas itself
 * Can now run QSoas commands from within Ruby code, for instance
   `QSoas::load("file")`. This is still experimental.
 * Now supports GSL 2.0
 * Quite a few bug fixes
