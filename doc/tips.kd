This file contains the startup tips. They are all sorted according to
tags, which will be used to find "similar tips". The tags should at
least include one of:

* basic
* advanced
* expert
* guru ?

For the difficulty level.

The tags are given in the comment before the title.

Unlike the rest of the documentation, this can be written addressing
directly the user.

This file was written by Vincent Fourmond, and is copyright (c)
2020 by CNRS/AMU.


{::comment} tip: data generation;math;basic {:/}
## Plotting mathematical functions {#plot-function}

To plot a mathematical function, use [cmd: generate-buffer] to
generate a buffer with the correct range of X values you want:

~~~
QSoas> generate-buffer -10 10
~~~

(here for X for between -10 and 10). Then, just use
[cmd: apply-formula] with the $$y=f(x)$$ function you want, here for
instance $$y = \sin x$$: 

~~~
QSoas> apply-formula y=sin(x)
~~~

See more about mathematical formulas [here](qsoas.html#ruby).
You can use the optional argument of
[cmd: generate-buffer] to shorten that to:

~~~
QSoas> generate-buffer -10 10 sin(x)
~~~

{::comment} tip: basic;command-line{:/}
## Automatic completion {#automatic-completion}

Pressing the **TAB** key inside the command-line will automatically
complete whatever you are currently typing: the command name, the
file, the flag, the fit engine, etc... Just try !

When there are several possibilities, they are shown in the *status
bar* at the bottom of the QSoas window. To avoid missing it, make sure
QSoas is full screen.

{::comment} tip: basic;load;command-line;globs{:/}
## Jokers in file names {#globs}

It is possible to use the "joker" `*` for every command that uses file
names, such as [cmd: load]. `*` replaces "unknown parts" in file
names. For instance, to load all the files finishing by `.dat`, use

~~~
QSoas> load *.dat
~~~

To load all the files starting with `d` and finishing with `t`:

~~~
QSoas> load d*t
~~~

One can use more than one joker, so the following loads all files
starting with `d`, finishing with `t`, and that have `sample_a` in
the middle:

~~~
QSoas> load d*sample_a*t
~~~

All the jokers are called **globs**.

{::comment} tip: advanced;scripts{:/}
## Getting started on scripting {#scripts-first-steps}

One of the great strengths of QSoas is the capacity to run several
commands in one go via scripts. One often must repeat the same series
of commands to process similar data files; to avoid typing them over
and over again, one can make scripts.

The easiest way to make a script is to save the command you have used
so far to a [text file](qsoas.html#text-files), for instance
`commands.txt`, using [cmd: save-history]:

~~~
QSoas> save-history commands.txt
~~~

You can then edit it (or at least look at it !) with your favorite
editor to remove the bits not needed, and run it with [cmd: run] (`@`
for short):

~~~
QSoas> @ commands.txt
~~~

This will run in turn all the commands that were saved in the
`commands.txt`, one per line. Try it out !

{::comment} tip: basic;save{:/}
## Saving and restoring sessions {#save-stack}

You can save the whole contents of the [data stack](#data-stack),
which is more-or-less all the buffers that were loaded, manipulated
and so on so far, using the command [cmd: save-stack]. The stack files
can be reloaded later using [cmd: load-stack].

{::comment} tip: basic;browse;globs;load{:/}
## Using browse to look at many data files {#browse-files}

QSoas provides a simple way to quickly find a file whose name you
can't remember in a large directory. Just run: [cmd: browse], or even
just `W`, and QSoas displays a dialog box with all the data files
found (you can push them onto the stack).

To go further, you can even select the files using jokers (globs). To
show only the files finishing by `.dat`:

~~~
QSoas> W *.dat
~~~

To show all files in all subdirectories:

~~~
QSoas> W */*
~~~

{::comment} tip: data generation;fits;basic {:/}
## Generating fitted curves {#sim-fit-1}

When running a fit, you can save the "fitted" curves, that is the
theoretical curves predicted from the current parameters by clicking
on "Data..."/"Push current to stack" (for the currently displayed
buffer) or "Push all to stack" (for all the fitted buffers).

Then, you can save the buffers using [cmd: save] or
[cmd: save-buffers] for instance.

{::comment} tip: save;basic {:/}
## Saving the current buffer {#save-buffer}

You can save the current buffer into a simple text format by using the
[cmd: save] command, `s` for short. Give it the name of the target
file (or let QSoas ask you):

~~~
QSoas> s saved_file.dat
~~~

{::comment} tip: commands;command-line;arguments;basic {:/}
## Arguments {#arguments}

Commands in QSoas often take mandatory arguments to specify what to
work on: the file to load, the file name for saving, the range of X
values for [cmd: generate-buffer], etc... These arguments can be given
on the command-line, separated by spaces. For instance, the following
code launches the command [cmd: load] with a single argument,
`file.dat`.

~~~
QSoas> load file.dat
~~~

If you omit a mandatory argument, QSoas will ask for it, for instance
if you just run:

~~~
QSoas> load
~~~

{::comment} tip: commands;command-line;basic {:/}
## Commands: menus and command-line {#commands}

All your interactions with QSoas go through *commands*. You can run
command by choosing them using the traditional menu bars; each of the
menu item is a QSoas command.

You can also run commands by entering their name in the `QSoas>` prompt at
the bottom of the QSoas window, and pressing "Enter". You can figure
out the name of a command by looking at the help text of the menus, or
by running the command from the menu and looking at new line, starting
with `QSoas>`, added at the bottom of the terminal.

{::comment} tip: buffers;tracking changes;basic {:/}
## Buffer names {#buffer-names}

When QSoas loads buffers, it gives them the same name as the files
they were loaded from. After each operation, QSoas adds a suffix to
reflect the changes to the buffer. After running:

~~~
QSoas> l data.dat
QSoas> apply-formula y=y**2
QSoas> filter-fft
Current buffer now is: 'data_mod_filtered.dat'
~~~

The buffer name that was initially `data.dat` is now
`data_mod_filtered.dat`. When this becomes too troublesome, you can
change the name of the current buffer using the [cmd: rename] command
(`a` for short):

~~~
QSoas> rename process-data.dat
~~~

{::comment} tip: buffers;stack;basic {:/}
## Current buffer and stack {#stack-1}

QSoas functions using a stack for buffers: each operation that creates
data: loading a file, or modifying an existing buffer, creates a new
buffer that becomes the top of the stack. The *current buffer* is the
one at the top of the stack. It is the one to which most of the
operations are applied; it is also always visible.


{::comment} tip: math;basic;functions {:/}
## Using QSoas as a simple calculator {#eval}

QSoas can also perform simple calculations via the [cmd: eval]
command:

~~~
QSoas> eval 2+2
 => 4
~~~

The language for interpreting these formulas is described
[there](qsoas.html#ruby); it features many
[functions](qsoas.html#special-functions) such as `sin(x)`:

~~~
QSoas> eval sin(PI*3/4)
 => 0.70710678118655
~~~

{::comment} tip: raw data;basic {:/}
## Viewing raw data {#edit}

It is sometimes useful to look at the raw data of the current buffer,
that is how the numbers are organized; this can help for instance
spotting data that has not been loaded properly. You can do that using
the [cmd: edit] command, that opens up a spreadsheet-like view of the
current buffer.

As its name suggest, you can also use [cmd: edit] to edit some of the
values (don't forget to push the new data to the stack !), but don't
expect advanced facilities: QSoas is not a spreadsheet program. If you
want to modify data, use other functions, such as
[cmd: apply-formula].

{::comment} tip: math;buffers;buffer operations;basic {:/}
## Applying a formula to a buffer {#apply-formula}

If you want to modify the data of the current buffer according to a
mathematical formula, use the command [cmd: apply-formula]:

~~~
QSoas> apply-formula y=y**2
~~~

This command transforms the `y` column into its square `y**2`. The
`y=` part is very important, because it tells QSoas you want to modify
the `y` column. You can also modify other columns... Try out:

~~~
QSoas> apply-formula x=y**2
~~~

{::comment} tip: buffers;stack;basic {:/}
## Undo/redo {#undo-redo}

QSoas provides basic undo/redo functionalities via the
[stack](qsoas.html#data-stack). Running the [cmd: undo] command, or
`u` for short will remove the latest buffer from the stack, so that
the previous buffer becomes the current buffer.

The buffers removed this way are put on the "redo" stack, you can
recover them by running [cmd: redo], or just `r`.

{::comment} tip: math;fits;basic {:/}
## Fitting arbitrary mathematical formulas to data {#arbitrary-fits}

If you need to fit a simple formula to data, just use the
[cmd: fit-arb] command:

~~~
QSoas> fit-arb a*exp(-x/tau)+b
~~~

This launches the fit interface to fit the $$y = a\times \exp
-x/\tau$$ formula to the current buffer.

QSoas features also many [predefined fits](qsoas.html#fits)
with smart initial parameters
detection. In that case, it would have been better to use
[cmd: fit-exponential-decay]. 

{::comment} tip: commands;command-line;basic {:/}
## Recalling previous commands {#cmdline-history}

QSoas keeps track of all the commands you have run since its
startup. You can recall the previous commands by pressing the Up arrow
key (and back to more recent commands using the Down arrow).

In the command-line, a `!` at the beginning of the line replaces the
previous command. If you just run:

~~~
QSoas> !
~~~

it will in fact launch the previous command. You can be more specific:

~~~
QSoas> !appl
~~~

will run the last command you have run starting by `appl`. Pressing
the Tab key will expand the `!` to the full command

{::comment} tip: math;advanced;buffers;meta-data {:/}
## Formulas involving the current buffer {#eval-with-buffers}

You can use [cmd: eval] to obtain information about the current
buffer. The statistics are available using the `$stats` global
variable, and the [meta-data](qsoas.html#meta-data) through the
`$meta` global variable. For instance, to print the maximum `y`
values of the current buffer, just run:

~~~
QSoas> eval $stats.y_max
~~~

{::comment} tip: basic;display {:/}
## Zooming {#zooming}

An any moment, you can zoom around the displayed curves using the
mouse wheel:

* Mouse wheel for zooming/dezooming vertically
* Shift+Mouse wheel for zooming horizontally
* Ctrl+Mouse wheel for zomming both horizontally and vertically at the
same time
* Ctrl+Shift+Mouse wheel to reset the zoom

You can also use the [cmd: zoom] command. This command lets you draw a
frame around the part you want to zoom on.

{::comment} tip: basic;help {:/}
## Getting help {#help}

The simplest way to get help is to look at the inline help (which
doesn't require a network connection) using the [cmd: help] command,
or just `?` for short.

For help on a specific command, for instance on [cmd: apply-formula],
just run `?` followed by the command name (which can be automatically
completed using TAB):

~~~
QSoas> ? apply-formula
~~~

{::comment} tip: basic;fits {:/}
## Built-in fits {#builtin-fits}

One of QSoas's strengths is the advance possibilities for fitting
models to data. Here are the main built-in fits:

* [cmd: fit-exponential-decay] for mono- or multi-exponential decay
  models;
* [cmd: fit-gaussian], [cmd: fit-lorentzian] and
  [cmd: fit-pseudo-voigt] for single or multiple peaks;
* [cmd: fit-nernst] for fitting the concentration of redox species in
  equilibrium at different potentials;
* [cmd: fit-arb] for fitting arbitrary formulas;
* [cmd: fit-ode] for integrating ordinary differential equations and
  fitting them to data;
* [cmd: fit-kinetic-system] for integrating the equations for kinetic
  systems, that is systems of chemical reactions, and fitting the
  resulting concentrations to data.

There are also a number of more specialized fits.


{::comment} tip: basic;fits;options {:/}
## Fitting a bi-exponential to data {#fit-biexp}

You can use the command [cmd: fit-exponential-decay] to fit mono or
multi-exponential decays to the current buffer. Simply running

~~~
QSoas> fit-exponential-decay
~~~

will fit a mono-exponential decay to the current buffer. To fit
multi-exponential decay, you need to use the `/exponentials=` option
to [cmd: fit-exponential-decay]. To fit a bi-exponential decay to the
current buffer, you should run:

~~~
QSoas> fit-exponential-decay /exponentials=2
~~~


{::comment} tip: basic;fits;options;chemistry {:/}
## Fitting a kinetic system to data {#fit-kinetic-system}

QSoas can integrate the differential equations behind chemical
reactions for you, and fit a linear combination of the concentrations
to the data. Here's an example in which two molecules `A` combine to
form a molecule `B`, that evolves reversibly into `C`. Just make a
simple [text file](qsoas.html#text-files) containing the following
lines:

~~~
2 A ->[k1] B
B <=>[k2][k3] C
~~~

Then, you can fit the data by running

~~~
QSoas> fit-kinetic-system
~~~

and find the text file that you've just written. The parameters `k1`,
`k2` and `k3` are respectively the rate constant for the first
reaction, and the forward and backward rate constants for the
second. The `c0_A`, `c0_B` and `c0_C` are the initial
concentrations. The `y_A`, `y_B` and `y_C` parameters are the
coefficients for generating the modelled data from the concentrations.

{::comment} tip: advanced;math {:/}
## Easy normalization  {#advanced-apply-formula}

You can use statistics, as those given by the [cmd: stats] command,
inside [cmd: apply-formula], by adding `$stats.` before the statistics
name. For instance, to normalize by the maximum Y value (the `y_max`
statistics), you can use:

~~~
QSoas> apply-formula y=y/$stats.y_max
~~~

You can make use of more advanced statistics, such as `y_int`, the
integral of the Y data over the X values. To obtain data with an
integral of 1, just run:

~~~
QSoas> apply-formula y=y/$stats.y_int
~~~
{::comment} tip: basic;stack;buffers {:/}
## Show the contents of the stack {#show-stack}

As you work in QSoas, you slowly fill the stack: every operation
creates a new buffer in the stack. To get an idea of the contents of
the stack, use the [cmd: show-stack] command, or `k` for short. For
instance:

~~~
QSoas> generate-buffer 0 10
QSoas> show-stack
Normal stack:
	 F  C	Rows	Segs	Name	
#0	    2	1000	1	    'generated.dat'
Total size: 15 kB
~~~

Here, the stack contains a single buffer, number `#0`, which has 2
columns, 1000 rows, 1 segment and who is called `generated.dat`. When
the stack is too large, you can specify a number to [cmd: show-stack],
in which case it shows only the most recent. Here for the 5 most
recent buffers:

~~~
QSoas> k 5
~~~

{::comment} tip: basic;directory {:/}
## Current directory {#current-directory}

QSoas reads by default the files from the **current directory**: for
instance, when you run:

~~~
QSoas> load data.dat
~~~

QSoas will look for the the `data.dat` file for [cmd: load] in the
current directory. The current directory is shown in the title
bar. You can change it using the command [cmd: cd].


{::comment} tip: basic;load {:/}
## Automatic format detection {#automatic-format}

QSoas features several "backends" that handles several different file
formats. [cmd: load] detects them in principle automatically:

~~~
QSoas> load data.dat
Loading file: 'data.dat' using backend text
~~~

Here, [cmd: load] has found that the file `data.dat` is handled by the
backend `text`. To force the choice of a given backend for loading a
file, if you think QSoas's autodetection mechanism doesn't work, use
the corresponding `load-as-` command, such as [cmd: load-as-text] for
text files, or [cmd: load-as-csv] for CSV files.

{::comment} tip: basic;filter {:/}
## Filtering data {#filter}

You can use several commands to filter data:

* [cmd: filter-fft] to filter data using Fourier Transform, to remove
  high frequencies from the signal;
* [cmd: filter-bsplines] to filter using B-splines, to create a
  synthetic signal as close as possible to your data;
* [cmd: auto-filter-fft] and [cmd: auto-filter-bs] to do either FFT or
  B-splines filtering, but non-interactively;
* [cmd: remove-spikes], which removes spikes in the data;
* [cmd: deldp], with which you can remove manually points from the data;
* [cmd: baseline], which makes it possible to draw a "baseline" by
  interpolation. You can also use that possibility to draw a filtered
  signal from your data.

{::comment} tip: advanced;math {:/}
## Defining mathematical functions {#define-functions}

The language used for mathematical expressions is called
[Ruby](qsoas.html#ruby). It is a fully-blown programming language with
which you can define functions. To do so, write for instance in a
`function.txt` file the following:

~~~
def michaelis(x,km,vm)
  return vm/(1+km/x)
end
~~~

This file defines a function `michaelis(x,km,vm)` whose value is
$$f(x, K_m, vm_) = \frac{v_m}{1 + K_m/x}$$. To use the file, you must
first load it into QSoas using [cmd: ruby-run]:

~~~
QSoas> ruby-run function.txt
~~~

Then, you can use the function as you would any other function:

~~~
QSoas> eval michaelis(3,2,6)
 => 3.6
QSoas> fit-arb michaelis(x,km,vm)
~~~
 
{::comment} tip: basic;directory {:/}
## Accessing files in other directories {#relative-paths}

After using [cmd: cd], you can access the files in the current
directory by just using their names. To access file in subdirectories,
use `directory/file`, as in:

~~~
QSoas> load subdir/data.dat
~~~

`..` means "up one directory", so the following commands respectively
change the current directory to the parent directory of the current,
and loads the file `file.dat` from the parent:

~~~
QSoas> cd ..
QSoas> load ../file.dat
~~~

{::comment} tip: basic;browse;stack {:/}
## Browsing all the buffers in the stack {#browse-stack}

You can visually look at all the buffers in the stack using
[cmd: browse-stack], or `K` for short. It brings a window showing all
the buffers (16 by page). You can change the presentation changing the
`4 x 4` box at the bottom, you can also zoom on any of the curves with
the wheel.

{::comment} tip: basic;stack;buffers {:/}
## Erasing datasets from memory {#drop}

All operations in QSoas create a new buffer, which sometimes may take
up a lot of memory, or simply make it too difficult to find the
buffers you're interested in in the stack...

You can remove permanently a buffer from the stack by
using [cmd: drop]:

~~~
QSoas> drop 1
~~~

This command removes the buffer numbered 1 (i.e. the previous buffer,
the current buffer is 0). After that, the buffer that was 2 before
becomes the buffer 1, and so on for all higher numbers.

To start with a clean slate, run [cmd: clear-stack] to remove all the
buffers from the stack.

{::comment} tip: basic;commands {:/}
## QSoas log file {#log-file}

The contents of the terminal are systematically written to a log file,
whose location is given in the very first line of the terminal. It
will often be something like `C:\Users\me\soas.log` for windows,
`/Users/me/soas.log` for mac, or `/home/me/soas.log` in linux.

As this log file contains all the text in the terminal, it contains
all the commands you run, so you can figure out what it was that you
did, and it is very helpful to send along bug reports as well.

The 5 previous log files are saved as `soas.log.1`, `soas.log.2` etc.

{::comment} tip: advanced;commands;scripts;globs {:/}
## Running a script on many files {#run-for-each}

One you have made a script to process a file the way you like it, you
can run the same script on a large number of files using
[cmd: run-for-each]. Running:

~~~
QSoas> run-for-each script.cmds file1.dat file2.dat
~~~

is equivalent to running

~~~
QSoas> @ script.cmds file1.dat
QSoas> @ script.cmds file2.dat
~~~

You can also use jokers:

~~~
QSoas> run-for-each script.cmds file*.dat 
~~~

{::comment} tip: basic;peaks {:/}
## Find peaks {#find-peaks}
You can use the command [cmd: find-peak] to find the peaks in a
dataset. By default, [cmd: find-peak] lists and displays all the peaks
it finds, but you can limit that using `/peaks=3` for 3 peaks for
instance.

Using `/output=true` lets you write the information in the
[output file](qsoas.html#output-file). [cmd: 1] and [cmd: 2] are
shortcuts for respectively:

~~~
QSoas> find-peaks /peaks=1 /output=true
QSoas> find-peaks /peaks=2 /output=true
~~~

{::comment} tip: basic;echem;peaks {:/}
## Handling peaks in voltammograms {#echem-peaks}

While [cmd: find-peaks] is useful for finding individual peaks, the
command [cmd: echem-peaks] attempts to pair peaks in "forward" and
"backward" scans, in a cyclic voltammogram.

This way, you can quickly access important parameters such as the
peak-to-peak distance !

{::comment} tip: basic;echem {:/}
## Splitting/unwrapping voltammograms {#voltammograms}

Voltammograms are composed of several parts in which the direction in
which X grows changes (the forward and backward scans). QSoas provides
many functions to handle them:

  * [cmd: splita] gives the first part
  * [cmd: splitb] gives the rest (all the parts after the first one)
  * [cmd: split-monotonic] creates as many datasets as there are parts
  where the direction of changes of X is different from the previous
  * [cmd: unwrap] "unwraps" the voltammogram, by ensuring that the X
  values are constantly growing.

{::comment} tip: basic;commands;help {:/}
## Running commands from the help {#run-from-help}

In the help browser, use the right click to:

  * copy the selected text to the prompt or directly run it;
  * copy the whole command line to the prompt or directly run it.

Use that for instance in the [examples](examples.html) !


