If questions do not find answers in this document, nor in the
[tutorial][tuto] or the [documentation][doc], then please use the
[forums][forums] to ask your question.

# Help !

## Where can I get help ?

First, try looking at the [tutorial][tuto], peruse the [FAQ][faq] and
read the [documentation][doc]. If that doesn't solve your problems,
you can ask your question in the [forums][forums].

# Using QSoas

## Why can't I copy text from the terminal window ?

Keyboard shortcuts are disactivated in the terminal window (so that
they always work in the command-line prompt), but if you select text
in the terminal window and right-click on it, you'll have the
possibility to copy to the clipboard.

## How can I save the data I have modified ?

Using the command [cmd: save] you can export data you have modified
with QSoas. It saves the data as a TAB-separated text file. If you
need to save many buffers in one go, have a look at
[cmd: save-datasets].

## What is this output file thingy ?

Many commands of QSoas write information to a plain text file called
the output file; this is for instance the case of the peak-detection
commands ([cmd: 1] and others), [cmd: reg], [cmd: cu]... The output
file is created in the current directory the first time it is
needed. It's name is `output.dat`, but this can be changed using the
[cmd: output] command. Format is TAB-separated, so you can import that
into your favorite spreadsheet program, or even using QSoas itself
(but you will probably have to pass the option `/comment=#` to
[cmd: load], and select the columns you're interested in with
`/columns=...`).

## My output file looks all messed up, what happened ?

This is probably the result of you trying to modify the output file
while `QSoas` is using it. Just don't do that, or, if you absolutely
need to, run the following command after saving your modifications to
the output file:

~~~
QSoas> output /reopen=true
~~~

(this will only work with QSoas version 2.0 or later)

# Display

## Help, my display looks all messed up with only points !

By default, `QSoas` shows datasets by drawing lines between all the
successive points. On very noisy datasets, this sometimes leads to
extremely long drawing times. `QSoas` detects this situation and
replaces the drawing of lines by just dots. If you think `QSoas` got
the heuristics wrong with your file, send us the data file.

## I want to configure the color of the display !

As of now, `QSoas` does not support configuring fine details in the
display. You can toggle the display of points using the [cmd: points]
command, and you can use the `/style=` option to [commands generating
several buffers](qsoas.html#several-buffers) to use gradients to
display a set of buffers.




# File formats

## Can QSoas read any file ?

No. But, it can read essentially all text files, which all data
acquisition programs generate via their "export to ASCII" or
"export to CSV". QSoas should detect automatically the format of
those files, but if it does not, have a look at the command
[cmd: load-as-text] for specifying the details QSoas did not manage to
guess, such as the column separator, the decimal separator.

## I use GPES, can QSoas read the ixw (not oxw) file?

QSoas makes use of the information files generated by GPES (for
chronoamperometry and cyclic voltammetry only, i.e. the `.ixw` and
`.icw` files). See the data QSoas could find using the [cmd: show]
command.

## Can I use QSoas to read NOVA files?

NOVA produces large opaque binary files whose format is not
public. This is the reason why QSoas cannot read them (although that
may change if the format specs are published). If you want to process
the data with QSoas (or any other software than NOVA !), you have to
export the data to ASCII, either after the experiment, or even by
including an "Export to ASCII" command in the experiment setup.

## How can I load EC-Lab ASCII files

EC-Lab ASCII files are essentially semicolon-delimited CSV files. Look
for a line in the spirit of

~~~~
mode;error;time/s;Ewe/V
~~~~

This shows that it is a $$E = f(t)$$ data file, that $$t$$ is the
3rd column, and $$E$$ the 4th one, and that the separator is indeed
`;`. Try to load it using

~~~~
l ocp_C02.csv /separator=; /columns=3,4
~~~~

Don't forget the `/decimal=,` option if you are using French decimal
separator.


## Help, QSoas doesn't read my files !

What if load a file and you don't see anything at all, or data that
really don't look like yours ? QSoas tries to be smart and find under
which format are stored data files, but it does not always guess
right.

First, make sure the file data is a text file, i.e. open it with a
text editor. If you see numbers that look like your data, it is a text
file, if all you see is nonsensical symbols, what you have is a binary
file. Go back to the software that produced it, reload it, and look
for "Export as Text/ASCII" functions.

If you see the numbers, guess the structures: what is the decimal
separator ? What is the column separator ? What are the columns you're
actually interested in ? The decimal separator can be set using the
`/decimal=` option to [cmd: load], the column separator using the
`/separator=` option. You can specify the columns using the
`/columns=` option. By default, [cmd: load] ignores lines that look
like text -- that don't start with a number. You can turn that off by
setting `/comment=#` (to only ignore lines that start with a `#`).

You can get an idea of how `QSoas` read the file by launching the
[cmd: edit] command.

## Help, I only see points in my data files !

Sometimes, QSoas only draws data points, and does not draw lines
between them. This happens for very "jaggy" curves, for which drawing
the lines can be very computationally expensive and slow down
significantly the display. At the moment, this cannot be controlled,
and happens when QSoas thinks the curve is too jaggy.


# Fits

## Can QSoas be used to fit a model that is calculated with an external program? Like EasySpin or Matlab?

This is not possible at the moment, but we are currently designing a
generic interface for using external programs to compute
datasets. This would make it possible to fit using results of
computations done within Matlab for instance, such as Easyspin.

## How can I export "clean" version of the fit data ?

The simplest way is to use "Data..."/"Push current to stack" function
from the fit window, that will push the simulated curve to the
stack. You can save it later using the [cmd: save] command.

However, if you don't have so many data points, but you would like to
have a "smooth" curve nevertheless, save the fit parameters, generate
a buffer with the desired range of $$x$$ values using
[cmd: generate-dataset], respawn the fit window, load the parameters
and then export as before ("Data..."/"Push current to stack").

## My multi-fit is way too slow...

Fitting many datasets with parameters in common is quite an expensive
task. At the beginning of the fit, QSoas says the number of free
parameters for the fit. The time taken by the Levenberg-Marquardt
algorithm used by most of the fit engines scales as the cube of the
number of parameters, which in turns scales as the number of buffers
in large multi-fits in which some parameters are
buffer-specific. While this limitation cannot be overcome easily, we
have written a fit engine (called "Multi") optimized for that kind of
payload.

If you are fitting kinetics or redox titrations at many wavelengths,
try reducing the number of wavelengths by applying [cmd: downsample]
before running [cmd: transpose].

# Data analysis

## How can I cut out data points from a buffer ?

Depends what you want to do. If you want to manually remove a few
points, try [cmd: deldp]. If you want to cut out a whole segment, try
rather [cmd: cut], hitting the `u` key to keep what's outside of the
region instead of what's inside. You can remove repeatedly segments
with the `r` key in cut.

Another completely different approach is the use of [cmd: strip-if],
that removes data point that satisfy a condition. For instance, to
remove all data points with negative values of `y` from a dataset,
try:

~~~
QSoas> strip-if y<0
~~~




# Copyright

## I have just bought QSoas, can I give it to my friends? How do you expect to make money if the program is not protected? 

QSoas is distributed under the [GNU General Public license version
2.0][gpl], which means among other things that you can redistribute
the binaries so long as you can provide the source code for them.

While you can get the binaries legally for free from a friend, think
about it. Buying the fairly inexpensive binaries help the development
of QSoas, and hence is a gift from you to the whole community of users
of QSoas.


## Why on earth do I have to pay for a free program ? {#why-pay}

Well, you don't have to pay. You can grab the source code from the
[download page][downloads] and compile it from the source; actually
this is the only supported way to get the program under
Linux. However, if you want to be spared the hassle to compile the
application yourself, you can buy the pre-built binaries, and feel
good because you are contributing to the further development of QSoas !

# Bugs, updates

## I believe I found a bug, can I report it? Can I get my money back?

The best way to report a bug is to signal it on the
[sourceforge bug page][bugs]. Before reporting, first check the
[documentation][doc] and the [FAQ][faq] if the behaviour really is a
problem, and then check if it has not been reported before in the
[bugs page][bugs].

Please include all information necessary to reproduce the bug, such as
what you exactly did, what you got, what you expected to get, the
exact version of QSoas and the output on the terminal when
applicable. If data confidentiality is not a problem, consider sending
a binary stack saved using [cmd: save-stack].

We don't offer refunds -- the license explicitly states that:

> This program is distributed in the hope that it will be useful, but
> WITHOUT ANY WARRANTY; without even the implied warranty of
> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE

However, if the information you provide us helps us identify and fix
the bug, we'll try to provide you with an updated version.

## I have bought QSoas 1.0, will I need to pay again each time a new version is released? {#upgrades}

You purchased a single binary. Later versions are not included in the
price. Consider the price of QSoas: most of the softwares that are
orders of magnitudes more expensive than QSoas do not include updates
either in the purchasing cost. If that isn't acceptable for you, you
may consider [compiling QSoas from source](#why-pay).

## Why isn't there a win64 binary version ? Will there ever be one ?

At the moment, we cannot provide binaries for Win64, as one of the
main dependences of QSoas, [Qt4](http://qt-project.org) is rather
delicate to compile under Win64 (and it is not officially supported
there either).

QSoas, like all other 32 bit applications, works seamlessly in 64 bit
versions of Windows, thanks to the so-called [WOW64 windows
layer](https://msdn.microsoft.com/en-us/library/windows/desktop/aa384249.aspx).
The only drawback is that you cannot use more than 3GB or so of memory
from QSoas, which really should not be a limitation.


This file was written by Vincent Fourmond, and is copyright (c)
2014-2020 by CNRS/AMU.

[gpl]:https://www.gnu.org/licenses/gpl-2.0.html
[bugs]:https://sourceforge.net/p/qsoas/tickets/
[forums]:https://sourceforge.net/p/qsoas/discussion/
[doc]:http://www.qsoas.org/manual.html
[tuto]:http://www.qsoas.org/tutorial.html
[faq]:http://www.qsoas.org/faq.html
[downloads]:http://www.qsoas.org/downloads.html
