# Examples

This page gathers series of standalone examples. Run them step by
step, either by copying the commands to the command prompt or by
right-clicking and select "Run command", which runs the command
directly.

Some of the examples require the [example files][examples]. Just
download the [archive][examples-zip], unzip it, and make sure you are
inside the created directory (using [cmd: cd]).

## Data generation

### Several bessel functions {#bessel-functions}

The following command generates values of the Bessel function
(regular cylindrical of order 0) for $$x$$ between -15 and 15:

~~~
QSoas> generate-dataset -15 15 bessel_j0(x)
~~~

The [`bessel_jn(x)`](qsoas.html#special-functions) function gives the
values of the bessel function of an arbitrary order. Combined with the
`/number` option to [cmd: generate-dataset], one can generate the
values of the bessel functions from the first 5 orders (0 to 4):

~~~
QSoas> generate-dataset -15 15 bessel_jn(x,number) /number=5
~~~

The use of the `/number` option introduces a `number` parameter that
can be used in the formula.

### Solving equations

QSoas has functionalities to solve numerically for $$y$$
$$f(x,y) = 0$$ equations, using the [cmd: solve] command. For instance:

~~~
QSoas> generate-dataset -10 10
QSoas> solve y*cosh(y)-x
~~~

This looks for points for which $$y \times \cosh y = x$$. Two caveats:

 * the variable you're solving for is $$y$$ and not $$x$$,
   so that you can obtain functions of $$x$$ in the end
 * the algorithm is iterative, starting with the values of $$y$$
   currently in the buffer. Try to start with a first approximation of
   the solution, or at least some value for which your equation is
   defined !


## Data processing

### Average

There are several ways to obtain the average of data. Let's look at
a simple cosine function:

~~~
QSoas> generate-dataset -10 10 cos(PI*x)
~~~

On can obtain the average of the y values by just running:

~~~
QSoas> stats
~~~

This prints a lot of statistics, one of which is `y_average
=	 0.001` (almost 0, as is expected from a sine wave over an integer
of periods). To print only the relevant one:

~~~
QSoas> stats /stats=y_average
~~~

Note that there is automatic completion on the `/stats=` part: don't
bother typing everything, just hit TAB.

Finally, you can also take advantage of the `$stats` special variable:

~~~
QSoas> eval $stats.y_average
~~~

### Normalization

QSoas offers different ways to normalize datasets. The simplest is
[cmd: norm], which simply divides by the largest number.

The best way to normalize controlling exactly what you do is the use
of [cmd: apply-formula], and take advantage of the `$stats` variable
making available the statistics of [cmd: stats]. Here are a few
examples. To do the same as [cmd: norm]:

~~~
QSoas> apply-formula y/=$stats.y_max
~~~

For almost the same thing, but dividing by the 90th percentile, which
does a better job when dealing with spiky data:

~~~
QSoas> apply-formula y/=$stats.y_q90
~~~

To divide by the integral of the signal, something common in
spectroscopy:

~~~
QSoas> apply-formula y/=$stats.y_int
~~~

### Separating voltammograms in several scans

QSoas has several possibilities to split voltammograms. For instance,
using the [example file][examples] `file1.dat`.

Working on the first scan:

~~~
QSoas> load file1.dat
QSoas> splita
~~~

Working on the second scan:

~~~
QSoas> load file1.dat
QSoas> splitb
~~~

Separating all the scans in one go:

~~~
QSoas> load file1.dat
QSoas> split-monotonic
~~~

In the last case, several datasets are generated, one for each
scan. Use [cmd: fetch] or [cmd: undo] to get a specific one.

It is also possible to use [cmd: cut] for selecting the scan one wants
also.

### Interpolating data points

The [cmd: interpolate] command works with the points saved from
[cmd: baseline] to a dataset, using the `p` key. But it can also take
values from any dataset in fact, which can be used as a
general-purpose interpolation method. For instance, if you have a
dataset with a small number of points ranging from 2 to 5, to generate
a linear interpolation, you can use:

~~~
QSoas> generate-dataset 2 5
QSoas> interpolate /type=linear 0 1
~~~

`0` is the generated dataset, serving as a model for the X values, and
`1` is the dataset you want to create an interpolation for. You can
also play with the interpolation type, `akima` and `splines` being
probably the best choices.

If you don't know in advance the boundaries of the dataset, you can
take advantage of [cmd: eval] to store the min and max X values as
[global variables](qsoas.html#global-variables), `$min` and `$max` for
instance, and use their values:

~~~
QSoas> eval $min=$stats.x_min;$max=$stats.x_max;
QSoas> generate-dataset %{$min} %{$max}
QSoas> interpolate /type=linear 0 1
~~~

The `%{ ... }` is executed as a piece of [Ruby code](qsoas.html#ruby);
the resulting value is used as replacement text when running the
command.

## Perpendicular coordinates, row and column names, y=f(x,z) datasets

### Full generation of a y=f(x,z) example

In this example, we generate a $$y = f(x,z)$$ dataset containing the
values of $$\sin r/r$$ for $$r = \sqrt{x^2+z^2}$$, for $$x$$ and $$z$$
both ranging between -10 and 10.

The following command generates a dataset containing 400 rows and 401
columns including the X column.

~~~
QSoas> generate-dataset -10 10 /columns=400
~~~

The $$x$$ colunm ranges between -10 and 10, but the $$z$$ values
(perpendicular coordinates) are unspecified. A simple way to change
this is just to [cmd: transpose] the dataset, and change the new x
values (which were the old z values, here QSoas is making them up on
the spot):

~~~
QSoas> transpose
QSoas> apply-formula x=i*20/($stats.rows-1)-10
~~~

The second command makes sure that the new x values are spread evenly
between -10 and 10. Don't forget that `i` represents the index of the
current row [cmd: apply-formula] is working on. Then, for setting the
values of all the columns, the simplest is to use the `/mode=xyz`
option to [cld: apply-formula], which makes the y values of every y
column a function of $$x$$ and of the perpendicular coordinate $$z$$:

~~~
QSoas> apply-formula /mode=xyz r=(x**2+z**2)**0.5;sin(r)/r
~~~



## Fits

### Generating smooth curves from fits {#sim-commands}

When fitting a small number of data points, pushing the computed
values from the fit window is not satisfactory, since they have the
same number of points as the data, and will look "jaggy" and not
suitable for publication. Let's imagine you have fitted data with:

~~~
QSoas> fit-arb vm/(1+km/x)
~~~

and you have saved the best parameters in a file called
`parameters.params`. Then, close the fit window, and run the following
commands:

~~~
QSoas> generate-dataset 0 100
~~~

in which the range of X values you want is between 0 and 100. This
generates a dataset with 1000 equally-spaced points between 0
and 100. Then, to obtain the smooth curve:

~~~
QSoas> sim-arb vm/(1+km/x) parameters.params 0
~~~

In this command, `0` is the current dataset, that is the 1000-points
one. Then, you get your smooth curve, and you can save it using
[cmd: save] if you want.

## Taking advantage of Ruby {#ruby}

### Saving a value for reusing later {#ruby-reuse-value}

Lets say we want to generate a sinus cardinal whose magnitude is the
same as the maximum value of a given dataset. Of course, it is
possible to use [cmd: stats] to figure out what is the maximum, and
then reuse it when using [cmd: generate-dataset]. However, this is not
so comfortable, and it will not allow its use in scripts.

Rather, the best way is to use [cmd: eval] to set a global variable
(let's say `$max`) to the value of the maximum, and then reuse this
value in [cmd: generate-dataset]:

~~~
QSoas> eval $max=$stats.y_max
QSoas> generate-dataset -10 10 $max*sin(x)/x
~~~





[examples]:https://github.com/fourmond/QSoasExampleFiles/ "GitHub repository for the example files"
[examples-zip]:https://github.com/fourmond/QSoasExampleFiles/archive/data.zip "ZIP archive of the example files"
