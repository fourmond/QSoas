This file contains the startup tips. They are all sorted according to
tags, which will be used to find "similar tips". The tags should at
least include one of:

* basic
* advanced
* expert
* guru ?

For the difficulty level.

The tags are given in the comment before the title.

{::comment} tip: data generation;math;basic {:/}
## Plotting mathematical functions {#plot-function}

To plot a mathematical function, use [cmd: generate-buffer] to
generate a buffer with the correct range of X values you want:

~~~
QSoas> generate-buffer -10 10
~~~

(here for X for between -10 and 10). Then, just use
[cmd: apply-formula] with the $$y=f(x)$$ function you want, here for
instance $$y = \sin x$$: 

~~~
QSoas> apply-formula y=sin(x)
~~~

See more about mathematical formulas [here](qsoas.html#ruby).
You can use the optional argument of
[cmd: generate-buffer] to shorten that to:

~~~
QSoas> generate-buffer -10 10 sin(x)
~~~

{::comment} tip: basic;command-line{:/}
## Automatic completion {#automatic-completion}

Pressing the *TAB* key inside the command-line will automatically
complete whatever you are currently typing: the command name, the
file, the flag, the fit engine, etc... Just try !

{::comment} tip: basic;load;command-line{:/}
## Jokers in file names {#globs}

It is possible to use the "joker" `*` for every command that uses file
names, such as [cmd: load]. `*` replaces "unknown parts" in file
names. For instance, to load all the files finishing by `.dat`, use

~~~
QSoas> load *.dat
~~~

To load all the files starting with `d` and finishing with `t`:

~~~
QSoas> load d*t
~~~

One can use more than one joker, so the following loads all files
starting with `d`, finishing with `t`, and that have `sample_a` in
the middle:

~~~
QSoas> load d*sample_a*t
~~~

{::comment} tip: advanced;scripts{:/}
## Getting started on scripting {#scripts-first-steps}

One of the great strengths of QSoas is the capacity to run several
commands in one go via scripts. One often must repeat the same series
of commands to process similar data files; to avoid typing them over
and over again, one can make scripts.

The easiest way to make a script is to save the command you have used
so far to a [text file](qsoas.html#text-files), for instance
`commands.txt`, using [cmd: save-history]:

~~~
QSoas> save-history commands.txt
~~~

You can then edit it (or at least look at it !) with your favorite
editor to remove the bits not needed, and run it with [cmd: run] (`@`
for short):

~~~
QSoas> @ commands.txt
~~~

This will run in turn all the commands that were saved in the
`commands.txt`, one per line. Try it out !

{::comment} tip: basic;save{:/}
## Saving and restoring sessions {#save-stack}

You can save the whole contents of the [data stack](#data-stack),
which is more-or-less all the buffers that were loaded, manipulated
and so on so far, using the command [cmd: save-stack]. The stack files
can be reloaded later using [cmd: load-stack].
