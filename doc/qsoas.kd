# QSoas command reference

Here is the command reference of QSoas, which list all the commands,
what they do, and how to use them.

To get a quick introduction at QSoas, you may look at the
[tutorial](tutorial.html), or look at the list of
[Frequently Asked Questions](faq.html).


# Commands, arguments and options (how to read this document)

QSoas works by entering commands inside the command prompt, or
alternatively using the menus.

Most commands have arguments and options. Arguments and options are
separated by spaces:

~~~ 
QSoas> command argument1 argument2 "argument 3" /option=option /option2="with spaces"
~~~

If you need to pass arguments or option values that have spaces, make
sure you quote them using `"` or `'`, like in the above example. The
`=` sign for the options can be replaced by a space, so that the
command above could also have been run thus:

~~~ 
QSoas> command argument1 argument2 "argument 3" /option option /option2 "with spaces"
~~~

Arguments are  _italicized_ in the documentation below. You
need to provide all the arguments for a command to work, and if you
don't, QSoas will prompt for them. Some
arguments are followed by _..._, which means that you can pass several
space-separated arguments. This is the case for [cmd: load],
for instance:

~~~
QSoas> load file1 file2 file3
~~~

Some options are marked as "(default option)", which means that, if all
arguments of the command are already specified, you can omit the
`/option=` part of the option. For instance, to set the
[cmd: temperature] to 300 K, you should be doing that:

~~~
QSoas> temperature /set=300
~~~

But, as `/set` is the default option, you can omit the `/set=` and
write:

~~~
QSoas> temperature 300
~~~

In this documentation, all options and arguments have mouseover texts
that give a short explanation of what kind of values are expected.

Some commands can be used through a short name (like `q` for
[cmd: quit]), indicated as such in the present documentation.

Some commands are marked as *(interactive)*. This means that their use
requires user input. If they are used in a [script](#scripting), the
script pauses for user interaction.

## Using the menus to discover a command {#menu-dialog}

All the commands that can be run from the command line are also
available from within the menus. Running the command through the menu
gives a dialog box in which one must choose the arguments of the
command, and one can also select the options.

This can be a good way to discover what commands are available, and
what they do.

## Note about text files {#text-files}

Many commands of QSoas make use of "plain text files", i.e. files that
simply contain unformatted text. These are for instance:

 * files for defining fits with [cmd: load-fits]
 * scripts to be run with [cmd: run]
 * definitions of kinetic systems for
   [cmd: fit-kinetic-system]
 * saved fit parameters

On windows, use Notepad to edit them. On Linux, `pico`, `nano`, `vi`
or `emacs` are pretty good choices. On MacOS, use TextEdit, but make sure
you hit Cmd+Shift+T to switch to "plain text" format; the default is
rich text (i.e. text with formatting informations) in the RTF format,
and `QSoas` does not understand RTF.


## Buffer list (or dataset lists) arguments {#buffer-lists}

Many commands, such as [cmd: flag], [cmd: contract] and others take
lists of buffers (or datasets) as arguments. This list can take
several forms:

 * A comma-separated list of buffer numbers (the ones given by 
   [cmd: show-stack]), such as: `1,4,7` (0 is the current buffer, 1,
   the one just before, which you can reach using [cmd: undo], etc.).
 * Negative numbers refer to the "redo" stack: `-1` is the buffer you
   would get by running [cmd: redo]
 * A number range, such as `1..7`, meaning all buffers from 1 to 7
   included.
 * A number range with a step, such as `1..7:3`, meaning `1,4,7`.
 * `all` for all buffers on the stack.
 * `displayed` for the currently displayed buffers.
 * `latest` for the datasets produced by the last command (running a
   script counts as many commands); this can be different from `0` if
   the last command produced more than one dataset, or none.
 * `latest:1` is the same as `latest`, `latest:2` represents the
   datasets produced by the command before the last one, etc... 

It is also possible to make use of buffer flags set by [cmd: flag]:

 * `flagged` stands for all flagged buffers (regardless of the name of
   the flag);
 * `unflagged` for all buffers that don't have any flag;
 * `flagged-` and `unflagged-` do the same, but with the buffers in
   the reverse order;
 * `flagged:`_flagname_ for all buffers that have the flag _flagname_;
 * `unflagged:`_flagname_ for all buffers that don't have the flag
   _flagname_;
 * and the variants `flagged-:`_flagname_ and `unflagged-:`_flagname_
   for the reversed order.

**Note** in this documentation, the terms "buffer" and
"dataset" are synonyms.

## Buffer columns {#column-names}

Some commands such as [cmd: bin] or [cmd: dataset-options] take buffer
column names (or numbers) as arguments or options. There are three way
to designate those:

 * using a number: `1` is the $$x$$ column, `2` is the $$y$$ column,
   and so on
 * using a number prefixed by `#`: this is a 0-based index, `#0` is
   then the $$x$$ column
 * by its name: `x`, `y`, `z`, `y2`, `y3` and so on. `y2` is
   equivalent to `z`
 * `no` or `none` when you don't want to specify a number at all, such
   as for disabling the display of error bars with
   [cmd: dataset-options].

Some commands (like [cmd: contract]) take column lists, which are
comma-separated lists of columns (just like above), with the addition
of range: `2..6` are columns 2 to 6 inclusive.

## Regular expressions {#regexps}

Some commands, notably [cmd: load] and the related commands, make use
of "regular expressions". Regular expressions are a way to describe
how a text looks like, such as "numbers", "white spaces", "anything
that looks like a date", etc. Here is how it works:

 * A simple text just matches itself. For instance, using
   `/separator=,`  for [cmd: load-as-text] means that the columns are
   separated by commas.
 * `{blank-line}` matches a fully blank line.
 * `{blank}` matches a series of blanks. This is the default
   separator for [cmd: load-as-text].
 * `{text-line}` matches a line that does not start by numbers
   (ignoring spaces).
 * `/`_regex_`/`, which is taken as a [Qt regular
   expression][qt-regexps]. For instance, `/[;,]/` means "either `;`
   or `,`".  Please see [the Qt documentation][qt-regexps] for more
   information.

## Commands producing several buffers {#several-buffers}

Many commands in QSoas will produce several buffers, for instance
[cmd: load], that loads several files at the same time, or
[cmd: split-monotonic], that splits a buffer into its monotonic
parts. All these commands share a set of options:

 * `/style` that can be used to display all the curves with gradual
   changes in color;
 * `/flags`, that can be used to set flags to the newly generated
   buffers, see the [cmd: flag] command for more information.
 * `/set-meta`, that can be used to set meta-data to the newly
   generated buffers, using a **key**`=`**value` syntax (so you have
   two `=` signs in row). This option can be used several times to add
   several meta-data.

For instance, try out:

~~~~
QSoas> generate-buffer -1 1 /style=brown-green sin((10+number)*x) /number=11
QSoas> generate-buffer -1 1 /set-meta=a=2 /set-meta=b=3 
~~~~

# General purpose commands


{::comment} synopsis-start: quit {:/}

### `quit` - Quit {#cmd-quit}

`quit` 

Short name: `q`


{::comment} synopsis-end: quit {:/}
{::comment} description-start: quit {:/}
Exits QSoas, losing the current session. The full log of the session
is always available in the `soas.log` file created in the initial
directory. This is indicated at startup in the terminal.

To avoid accumulating very large log files, the log file gets renamed
as `soas.log.1` when you start QSoas (and the older one as
`soas.log.2`, and so on until `soas.log.5`).

If you want to save the entire state of QSoas before quitting so you
can restart exactly from where you left, use [cmd: save-stack].
{::comment} description-end: quit {:/}


{::comment} synopsis-start: credits {:/}

### `credits` - Credits {#cmd-credits}

`credits` `/full=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * `/full=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Full text of the licenses -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: credits {:/}
{::comment} description-start: credits {:/}

This command displays credits, copyright and license information of 
QSoas and all the dependencies linked to or built in your
version. You'll get the full license text with `/full=true`.

It also lists publications whose findings/equations/algorithms were
directly used in QSoas.
{::comment} description-end: credits {:/}

{::comment} synopsis-start: version {:/}

### `version` - Version {#cmd-version}

`version` `/show-features=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * `/show-features=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If true, show detailed informations about the capacities of QSoas (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: version {:/}
{::comment} description-start: version {:/}
Prints the version number of QSoas, including various build
information.

If the option `/show-features=true`, then the output is much longer,
and contains a list of all the features built in `QSoas`, including
the fit engines, the available statistics, the
[time-dependent parameters](#time-dependent-parameters) and so on.
{::comment} description-end: version {:/}


{::comment} synopsis-start: save-history {:/}

### `save-history` - Save history {#cmd-save-history}

`save-history` _file_{:title="name of a file"}

  * _file_{:title="name of a file"}: Output file -- values: name of a file

{::comment} synopsis-end: save-history {:/}
{::comment} description-start: save-history {:/}
Saves all the commands that were launched since the beginning of the
session, to the given (text) file.

This can be used for saving a series of command that should be applied
repetitively as a [script](#scripting).
{::comment} description-end: save-history {:/}

{::comment} synopsis-start: cd {:/}

### `cd` - Change directory {#cmd-cd}

`cd` _directory_{:title="name of a directory"} `/from-home=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/from-script=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

Short name: `G`

  * _directory_{:title="name of a directory"}: New directory -- values: name of a directory
  * `/from-home=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, relative from the home directory -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/from-script=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, cd relative from the current script directory -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: cd {:/}
{::comment} description-start: cd {:/}
Changes the current working directory. If `/from-home` is specified,
the directory is assumed to be relative to the user's home directory. 
If `/from-script` is specified, the directory is assumed to be
relative to that of the command file currently being executed by a 
[cmd: run] command (or in a [startup script](#cmd-startup-files)).
{::comment} description-end: cd {:/}
{::comment} synopsis-start: pwd {:/}

### `pwd` - Working directory {#cmd-pwd}

`pwd` 


{::comment} synopsis-end: pwd {:/}
{::comment} description-start: pwd {:/}
Prints the full path of the current directory.

It is also indicated in the title of the QSoas window.
{::comment} description-end: pwd {:/}

{::comment} synopsis-start: temperature {:/}

### `temperature` - Temperature {#cmd-temperature}

`temperature` `/set=`_number_{:title="a floating-point number"}

Short name: `T`

  * `/set=`_number_{:title="a floating-point number"} (default option): Sets the temperature -- values: a floating-point number

{::comment} synopsis-end: temperature {:/}
{::comment} description-start: temperature {:/}
Shows or sets the current temperature, in Kelvins. The temperature is
used in many places, mostly in fits to serve as the initial value for
the temperature parameter. To set the temperature, pass its new value
using the `/set` option (the `/set=` part is optional):

~~~
QSoas> temperature 310
~~~

{::comment} description-end: temperature {:/}

{::comment} synopsis-start: commands {:/}

### `commands` - Commands {#cmd-commands}

`commands` 


{::comment} synopsis-end: commands {:/}
{::comment} description-start: commands {:/}
List all available commands, with a short help text. This also
includes used-defined commands, such as custom fits loaded from a fit
file and aliases.
{::comment} description-end: commands {:/}
{::comment} synopsis-start: help {:/}

### `help` - Help on... {#cmd-help}

`help` _command_{:title="the name of one of QSoas's commands"} `/online=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

Short name: `?`

  * _command_{:title="the name of one of QSoas's commands"}: The command on which to give help -- values: the name of one of QSoas's commands
  * `/online=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Show the online documentation in a browser -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: help {:/}
{::comment} description-start: help {:/}
Gives all help available on the given command. By default, it spawns
a browser to show the online help, unless you use `/online=false`.
{::comment} description-end: help {:/}

{::comment} synopsis-start: save-output {:/}

### `save-output` - Save output {#cmd-save-output}

`save-output` _file_{:title="name of a file"}

  * _file_{:title="name of a file"}: Output file -- values: name of a file

{::comment} synopsis-end: save-output {:/}
{::comment} description-start: save-output {:/}
Save all text in the terminal to a plain text file. Equivalent to
copy-pasting the contents of the terminal to a plain text file using a
text editor.
{::comment} description-end: save-output {:/}


{::comment} synopsis-start: print {:/}

### `print` - Print {#cmd-print}

`print` `/file=`_file_{:title="name of a file"} `/nominal-height=`_integer_{:title="an integer"} `/overwrite=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/page-size=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}

Short name: `p`

  * `/file=`_file_{:title="name of a file"} (default option): Save as file -- values: name of a file
  * `/nominal-height=`_integer_{:title="an integer"}: Correspondance of the height of the page in terms of points -- values: an integer
  * `/overwrite=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Overwrite the output file -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/page-size=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: Sets the page size, like 9x6 for 9cm by 6cm -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: Sets the title of the page as printed -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: print {:/}
{::comment} description-start: print {:/}
Prints the current view, providing a usual print dialog. If you just
want a PDF or PostScript file, just provide the file name as the
`/file` option.

An optional title can be added using the `/title` option.

You can also use a `.svg` extension if you want to produce a SVG file
that can later be modified, by, e.g. [Inkscape](https://inkscape.org/).

**Important note:** QSoas is not a data plotting system, it is a data
analysis program. Don't expect miraculous plots !

{::comment} description-end: print {:/}


{::comment} synopsis-start: define-alias {:/}

### `define-alias` - Define alias {#cmd-define-alias}

`define-alias` _alias_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} _command_{:title="the name of one of QSoas's commands"} `/*=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}

  * _alias_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: The name to give to the new alias -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * _command_{:title="the name of one of QSoas's commands"}: The command to give an alias for -- values: the name of one of QSoas's commands
  * `/*=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: All options -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: define-alias {:/}
{::comment} description-start: define-alias {:/}
The `define-alias` commands allows one to defined a shortcut for a
command one uses often with the same options. For instance, running:

~~~~
QSoas> define-alias fit-2exp fit-exponential-decay /exponentials=2 /loss=true
~~~~

creates a `fit-2exp` command that is equivalent to starting 
[cmd: fit-exponential-decay] with two exponentials by default
and film loss on. 

Alias can only be used to provide default values for options. It
cannot provide default values for arguments.
{::comment} description-end: define-alias {:/}

{::comment} synopsis-start: display-aliases {:/}

### `display-aliases` - Display aliases {#cmd-display-aliases}

`display-aliases` 


{::comment} synopsis-end: display-aliases {:/}
{::comment} description-start: display-aliases {:/}
Shows a list of all the currently defined aliases.
{::comment} description-end: display-aliases {:/}

{::comment} synopsis-start: graphics-settings {:/}

### `graphics-settings` - Graphics settings {#cmd-graphics-settings}

`graphics-settings` `/antialias=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/line-width=`_number_{:title="a floating-point number"} `/opengl=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * `/antialias=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Turns on/off the use of antialised graphics -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/line-width=`_number_{:title="a floating-point number"}: Sets the base line width for all lines/curves -- values: a floating-point number
  * `/opengl=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Turns on/off the use of OpenGL acceleration -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: graphics-settings {:/}
{::comment} description-start: graphics-settings {:/}
Gives the possibility to tweak a few settings concerning display. The
settings are kept from one QSoas session to the next.

Turning on antialias (with `/antialias=true`) will make QSoas use
antialiased drawings, which looks admittedly nicer, but requires much
more computation time, to the point that drawing jagged curves may
become particularly slow. Printing or exporting to PDF files through
[cmd: print] always produces antialiased graphics, regardless of this
option.

If you experience performance problems for displaying curves, use
`/opengl=true`, as this will instruct QSoas to use hardware
acceleration to display curves. It is off by default as some setups do
not really benefit from that, and the OpenGL support is sometimes
buggy and may result in crashes.
{::comment} description-end: graphics-settings {:/}


{::comment} synopsis-start: ruby-run {:/}

### `ruby-run` - Ruby load {#cmd-ruby-run}

`ruby-run` _file_{:title="name of a file"}

  * _file_{:title="name of a file"}: Ruby file to load -- values: name of a file

{::comment} synopsis-end: ruby-run {:/}
{::comment} description-start: ruby-run {:/}
This command loads and executes a [Ruby](#ruby) file. For the time being, the
main interest of this command is to define complex functions in a
separate file. 

Imagine you have a file `function.rb` containing the text:

~~~~
def mm(x,vmax,km)
  return vmax/(1 + km/x)
end
~~~~

After running 

~~~~
QSoas> ruby-run function.rb
~~~~

You can use `mm` like any normal function for fitting:

~~~~
QSoas> fit-arb mm(x,vmax,km)
~~~~

or use it in [cmd: eval]:

~~~~
QSoas> eval mm(1.0,2.0,3.0)
 => 0.5
~~~~

You can find out more about ruby code [below](#ruby), but here is how
one can define a function `my_exp` that is 0 before `t0` and follows
an exponential relaxation starting at `val` with a time constant `tau`
afterwards:

~~~~
def my_exp(t,t0,tau,val)
  if t < t0
    return 0
  else
    return val*exp(-(t-t0)/tau)
  end
end
~~~~

{::comment} description-end: ruby-run {:/}

{::comment} synopsis-start: break {:/}

### `break` - Break {#cmd-break}

`break` 


{::comment} synopsis-end: break {:/}
{::comment} description-start: break {:/}
Exits from the current script. Has no effect if not inside a script.
{::comment} description-end: break {:/}
{::comment} synopsis-start: debug {:/}

### `debug` - Debug {#cmd-debug}

`debug` `/directory=`_directory_{:title="name of a directory"} `/level=`_integer_{:title="an integer"}

  * `/directory=`_directory_{:title="name of a directory"} (default option): Directory in which the debug output is saved -- values: name of a directory
  * `/level=`_integer_{:title="an integer"}: Sets the debug level -- values: an integer

{::comment} synopsis-end: debug {:/}
{::comment} description-start: debug {:/}
With this command, it is possible to collect a large amount of
debugging information. You will essentially only need this to send
information to the QSoas developers to help them track down problems.

The command:

~~~
QSoas> debug directory
~~~

sets up the automatic debug output in the directory `directory`.

The `/level` option correspond to the debug level. It defaults to `1`,
the higher this number the more detailed the output will be.

{::comment} description-end: debug {:/}

{::comment} synopsis-start: system {:/}

### `system` - System {#cmd-system}

`system` _command..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."} `/shell=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/timeout=`_integer_{:title="an integer"}

  * _command..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."}: Arguments of the command  -- values: one or more files. Can include wildcards such as *, `[0-4]`, etc...
  * `/shell=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: use shell (on by default on Linux/Mac, off in windows) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/timeout=`_integer_{:title="an integer"}: timeout (in milliseconds) -- values: an integer

{::comment} synopsis-end: system {:/}
{::comment} description-start: system {:/}
The `system` command can be used to run external commands from
QSoas. The output of the commands will be displayed in the terminal.

For the duration of the external command, QSoas will not respond to
keyboard and mouse.

If `/use-shell` is on (the default on Linux and Mac, but off in
Windows), the command will be processed by the shell before being run.

If a strictly positive `/timeout` is specified, the command will be
killed if it takes longer than the timeout to execute.
{::comment} description-end: system {:/}

{::comment} synopsis-start: timer {:/}

### `timer` - Timer {#cmd-timer}

`timer` 


{::comment} synopsis-end: timer {:/}
{::comment} description-start: timer {:/}
The first call starts a timer, and the second one stops it, showing
the amount of time that has elapsed since the previous call to
[cmd: timer]. This can be used to benchmark costly computations, for
instance.
{::comment} description-end: timer {:/}
{::comment} synopsis-start: mem {:/}

### `mem` - Memory {#cmd-mem}

`mem` `/cached-files=`_integer_{:title="an integer"}

  * `/cached-files=`_integer_{:title="an integer"}:  -- values: an integer

{::comment} synopsis-end: mem {:/}
{::comment} description-start: mem {:/}
Displays information about the resource use of QSoas, including memory
use, the number of cached files and the total CPU time used so
far. The size of the file cache can be changed using the
`/cached-files` option.
{::comment} description-end: mem {:/}


## Output file manipulation {#output-file}

Several commands (e.g.  various data analysis commands and the fit
commands) write data to the output file.

By default, the first time the output file is used, a `output.dat`
file is created in the current directory. Another file can be used by
providing its name to the [cmd: output] command.

{::comment} synopsis-start: output {:/}

### `output` - Change output file {#cmd-output}

`output` `/file=`_file_{:title="name of a file"} `/meta=`_words_{:title="several words, separated by ','"} `/overwrite=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/reopen=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * `/file=`_file_{:title="name of a file"} (default option): name of the new output file -- values: name of a file
  * `/meta=`_words_{:title="several words, separated by ','"}: when writing to output file, also prints the listed meta-data -- values: several words, separated by ','
  * `/overwrite=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, overwrites the file instead of appending (default: false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/reopen=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, forces reopening the file (default: false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: output {:/}
{::comment} description-start: output {:/}
This command has several modes of operations. If _file_ is provided
(it is the default option, so you can omit `/file=`), then it opens
_file_ as the new output file. By default, if the file exists, new
data are appended, and the old data are left untouched. You can force
overwriting by specifiying `/overwrite=true`.

In the other mode, when only the `/meta` option is provided, it sets
the list of meta-data that will automatically be added to the output
file when outputting any data there. It is a comma-separated list of
meta names. See more about meta-data [there](#meta-data).

It is a bad idea to modify the output file while QSoas is still using
it, as it messes up what QSoas think is in the output file. If you
forgot you were using the output file and modified it, you can avoid
problems by running:

~~~~
QSoas> output /reopen=true
~~~~

{::comment} description-end: output {:/}

{::comment} synopsis-start: comment {:/}

### `comment` - Write line to output {#cmd-comment}

`comment` _comment_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}

  * _comment_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: Comment line added to output file -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: comment {:/}
{::comment} description-start: comment {:/}
Writes the given line _comment_ to the output file. Don't forget to
quote if you need to include spaces:

~~~~
QSoas> comment 'Switching to sample 2'
~~~~
{::comment} description-end: comment {:/}


# Data loading/saving

The main command for loading data is [cmd: load]. 

{::comment} synopsis-start: load {:/}

### `load` - Load {#cmd-load}

`load` _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."} `/auto-split=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/columns=`_integers_{:title="a comma-separated list of integers"} `/comments=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"} `/decimal=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/expected=`_integer_{:title="an integer"} `/flags=`_words_{:title="several words, separated by ','"} `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"} `/histogram=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/ignore-cache=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/ignore-empty=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/separator=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/skip=`_integer_{:title="an integer"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/yerrors=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}

Short name: `l`

  * _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."}: the files to load -- values: one or more files. Can include wildcards such as *, `[0-4]`, etc...
  * `/auto-split=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, create a new dataset at every fully blank line (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/columns=`_integers_{:title="a comma-separated list of integers"}: columns loaded from the file -- values: a comma-separated list of integers
  * `/comments=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"}: pattern for comment lines -- values: plain text, or [regular expressions](#regexps) enclosed within / / delimiters
  * `/decimal=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: decimal separator -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/expected=`_integer_{:title="an integer"}: Expected number of loaded datasets -- values: an integer
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"}: Select on formula -- values: a piece of [Ruby code](#ruby)
  * `/histogram=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to show as a histogram (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/ignore-cache=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, ignores cache (default off) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/ignore-empty=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, skips empty files (default on) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/separator=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"}: separator between columns -- values: plain text, or [regular expressions](#regexps) enclosed within / / delimiters
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/skip=`_integer_{:title="an integer"}: skip that many lines at beginning -- values: an integer
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/yerrors=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}: name of the column containing y errors -- values: the [number/name of a column](#column-names) in a buffer

{::comment} synopsis-end: load {:/}
{::comment} description-start: load {:/}

Loads the given files and pushes them onto the data stack. QSoas
features several backends for loading files ("backends" are roughly
equivalent to "file formats"). In principle, QSoas is smart enough to
figure out which one is correct, but you can force the use of a given
backend by using the appropriate `load-as-` command. Using a backend
directly also provides more control on the way files are loaded (this
can also be done via the numerous options to `load`, which are
forwarded to the appropriate backend). Currently available backends:

 * [`text`](#cmd-load-as-text) for plain space-separated text
 * [`csv`](#cmd-load-as-csv) for CSV data
 * [`chi-txt`](#cmd-load-as-chi-txt) for file from CH Instruments potentiostats
 * [`eclab-ascii`](#cmd-load-as-eclab-ascii) for ASCII files exported
   from Biologic potentiostats
 * [`parameters`](#cmd-load-as-parameters) for fit parameters ("saved
   for reusing later")

Look in their documentation for more information. In particular, the
options `/separator=`, `/decimal=`, `/skip=`, `/comments=`,
`/columns=` and `/auto-split` are documented in the
[cmd: load-as-text] command.


QSoas tells you which backend it used for loading a given file:

~~~~
QSoas> load 03.dat
Loading file: './03.dat' using backend text
~~~~

The command `load` caches the loaded file. If for some reason, the
cache gets in the way, use the direct `load-as-` commands, or
alternatively use `/ignore-cache=true`.

`load`, like all the other commands that take several files as
arguments, understand unix-like wildcards:

~~~~
QSoas> load *.dat
~~~~

This command loads all the files ending by `.dat` files from the
current directory.

~~~~
QSoas> load [0-4]*.dat
~~~~

This loads only those that start with a digit from 0 to 4, etc.


One can also set various dataset options while loading with `load`
(and the `load-as-` commands), using the options `/yerrors=` and
`/histogram=`. See the [cmd: dataset-options], command for more
information

The `/style=` option sets the color style when loading several curves:

~~~~
QSoas> load *.dat /style=red-blue
~~~~

This loads all the `.dat` files in the current directory, and displays
them with a color gradient from red (for the first loaded file) to
blue (for the last loaded file).

With the `/flags=` option, on can flag buffers as they get
loaded. Using it has the same effect as running [cmd: flag] with the
same option on loaded datasets.

The `load` command also provides dataset selection rules through the
`/for-which`, option, more about that in the
[dedicated section](#for-which).

By default, the `load` and related commands will not create a buffer
if it were empty (i.e. a valid data file containing no data), you can
force the creation of empty files using `/ignore-empty=false`.

Finally, it is possible to provide a number of datasets that should be
loaded with the `/expected=` option. The command fails if the number
of loaded datasets does not match the number given. This can be useful
for scripts, to abort the script when a file is missing, see
[cmd: run] to make use of this.


{::comment} description-end: load {:/}


{::comment} synopsis-start: load-as-text {:/}

### `load-as-text` - Load files with backend 'text' {#cmd-load-as-text}

`load-as-text` _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."} `/auto-split=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/columns=`_integers_{:title="a comma-separated list of integers"} `/comments=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"} `/decimal=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/expected=`_integer_{:title="an integer"} `/flags=`_words_{:title="several words, separated by ','"} `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"} `/histogram=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/ignore-empty=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/separator=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/skip=`_integer_{:title="an integer"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/yerrors=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}

  * _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."}: the files to load -- values: one or more files. Can include wildcards such as *, `[0-4]`, etc...
  * `/auto-split=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, create a new dataset at every fully blank line (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/columns=`_integers_{:title="a comma-separated list of integers"}: columns loaded from the file -- values: a comma-separated list of integers
  * `/comments=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"}: pattern for comment lines -- values: plain text, or [regular expressions](#regexps) enclosed within / / delimiters
  * `/decimal=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: decimal separator -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/expected=`_integer_{:title="an integer"}: Expected number of loaded datasets -- values: an integer
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"}: Select on formula -- values: a piece of [Ruby code](#ruby)
  * `/histogram=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to show as a histogram (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/ignore-empty=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, skips empty files (default on) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/separator=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"}: separator between columns -- values: plain text, or [regular expressions](#regexps) enclosed within / / delimiters
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/skip=`_integer_{:title="an integer"}: skip that many lines at beginning -- values: an integer
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/yerrors=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}: name of the column containing y errors -- values: the [number/name of a column](#column-names) in a buffer

{::comment} synopsis-end: load-as-text {:/}
{::comment} description-start: load-as-text {:/}

Loads files using the backend `text`, bypassing cache and automatic
backend detection. `text` recognizes space-separated data (which
includes tab-separated data). Most "plain text" files will be read
correctly by this backend. By default, it loads all the columns of the
file, but only displays the second as a function of the first. If you
want to work on other columns, have a look at [cmd: expand].
Alternatively, you can specify the columns to load using the
`/columns` option, see below.

Apart from the options of [cmd: dataset-options] and the `/style` and
`/flags` options documented in the [cmd: load] command, the `text`
backend accepts several options controlling the way the text files are
interpreted:

  * `/separator` specifies the text that separates the columns (blank spaces by
    default). You can use [regular expressions](#regexps).
  * `/decimal` specifies the decimal separator for loading
    (default is the dot). This is for loading only.
  * `/comments` specifies a regular expression describing comment lines (ie
    lines that get ignored). By default, line that don't start
    by a number are ignored.
  * Give to `/skip` a number of text lines that should be ignored at
    the beginning of the text file.
  * If `/auto-split` is `true`, then `QSoas` will create a new dataset
    everytime it hits a series of blank lines in the file.
  * `/columns` is a series of numbers saying in which order the file
    columns will be used to make a dataset. For instance,
    `/columns=2,1` will swap X and Y at load time.


{::comment} description-end: load-as-text {:/}


{::comment} synopsis-start: load-as-csv {:/}

### `load-as-csv` - Load files with backend 'csv' {#cmd-load-as-csv}

`load-as-csv` _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."} `/auto-split=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/columns=`_integers_{:title="a comma-separated list of integers"} `/comments=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"} `/decimal=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/expected=`_integer_{:title="an integer"} `/flags=`_words_{:title="several words, separated by ','"} `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"} `/histogram=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/ignore-empty=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/separator=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/skip=`_integer_{:title="an integer"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/yerrors=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}

  * _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."}: the files to load -- values: one or more files. Can include wildcards such as *, `[0-4]`, etc...
  * `/auto-split=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, create a new dataset at every fully blank line (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/columns=`_integers_{:title="a comma-separated list of integers"}: columns loaded from the file -- values: a comma-separated list of integers
  * `/comments=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"}: pattern for comment lines -- values: plain text, or [regular expressions](#regexps) enclosed within / / delimiters
  * `/decimal=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: decimal separator -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/expected=`_integer_{:title="an integer"}: Expected number of loaded datasets -- values: an integer
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"}: Select on formula -- values: a piece of [Ruby code](#ruby)
  * `/histogram=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to show as a histogram (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/ignore-empty=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, skips empty files (default on) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/separator=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"}: separator between columns -- values: plain text, or [regular expressions](#regexps) enclosed within / / delimiters
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/skip=`_integer_{:title="an integer"}: skip that many lines at beginning -- values: an integer
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/yerrors=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}: name of the column containing y errors -- values: the [number/name of a column](#column-names) in a buffer

{::comment} synopsis-end: load-as-csv {:/}
{::comment} description-start: load-as-csv {:/}
The `csv` backend is essentially the same backend as the
[`text`](#cmd-load-as-text) one, but with the separators set by
default to commas and semicolons, to parse CSV files. 
Hence, the options have the same meaning as for [cmd: load-as-text].
{::comment} description-end: load-as-csv {:/}
{::comment} synopsis-start: load-as-chi-txt {:/}

### `load-as-chi-txt` - Load files with backend 'chi-txt' {#cmd-load-as-chi-txt}

`load-as-chi-txt` _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."} `/auto-split=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/columns=`_integers_{:title="a comma-separated list of integers"} `/comments=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"} `/decimal=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/expected=`_integer_{:title="an integer"} `/flags=`_words_{:title="several words, separated by ','"} `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"} `/histogram=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/ignore-empty=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/separator=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/skip=`_integer_{:title="an integer"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/yerrors=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}

  * _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."}: the files to load -- values: one or more files. Can include wildcards such as *, `[0-4]`, etc...
  * `/auto-split=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, create a new dataset at every fully blank line (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/columns=`_integers_{:title="a comma-separated list of integers"}: columns loaded from the file -- values: a comma-separated list of integers
  * `/comments=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"}: pattern for comment lines -- values: plain text, or [regular expressions](#regexps) enclosed within / / delimiters
  * `/decimal=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: decimal separator -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/expected=`_integer_{:title="an integer"}: Expected number of loaded datasets -- values: an integer
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"}: Select on formula -- values: a piece of [Ruby code](#ruby)
  * `/histogram=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to show as a histogram (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/ignore-empty=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, skips empty files (default on) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/separator=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"}: separator between columns -- values: plain text, or [regular expressions](#regexps) enclosed within / / delimiters
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/skip=`_integer_{:title="an integer"}: skip that many lines at beginning -- values: an integer
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/yerrors=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}: name of the column containing y errors -- values: the [number/name of a column](#column-names) in a buffer

{::comment} synopsis-end: load-as-chi-txt {:/}
{::comment} description-start: load-as-chi-txt {:/}
This is a slightly modified version of [cmd: load-as-text] that
handles better text files from CH Instruments (and is in particular
able to detect at least some of their meta-data).
{::comment} description-end: load-as-chi-txt {:/}

{::comment} synopsis-start: load-as-eclab-ascii {:/}

### `load-as-eclab-ascii` - Load files with backend 'eclab-ascii' {#cmd-load-as-eclab-ascii}

`load-as-eclab-ascii` _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."} `/auto-split=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/columns=`_integers_{:title="a comma-separated list of integers"} `/comments=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"} `/decimal=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/expected=`_integer_{:title="an integer"} `/flags=`_words_{:title="several words, separated by ','"} `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"} `/histogram=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/ignore-empty=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/separator=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/skip=`_integer_{:title="an integer"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/yerrors=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}

  * _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."}: the files to load -- values: one or more files. Can include wildcards such as *, `[0-4]`, etc...
  * `/auto-split=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, create a new dataset at every fully blank line (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/columns=`_integers_{:title="a comma-separated list of integers"}: columns loaded from the file -- values: a comma-separated list of integers
  * `/comments=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"}: pattern for comment lines -- values: plain text, or [regular expressions](#regexps) enclosed within / / delimiters
  * `/decimal=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: decimal separator -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/expected=`_integer_{:title="an integer"}: Expected number of loaded datasets -- values: an integer
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"}: Select on formula -- values: a piece of [Ruby code](#ruby)
  * `/histogram=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to show as a histogram (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/ignore-empty=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, skips empty files (default on) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/separator=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"}: separator between columns -- values: plain text, or [regular expressions](#regexps) enclosed within / / delimiters
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/skip=`_integer_{:title="an integer"}: skip that many lines at beginning -- values: an integer
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/yerrors=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}: name of the column containing y errors -- values: the [number/name of a column](#column-names) in a buffer

{::comment} synopsis-end: load-as-eclab-ascii {:/}
{::comment} description-start: load-as-eclab-ascii {:/}
This is a slightly modified version of [cmd: load-as-text] that
handles better ASCII files exported from Biologic potentiostats.
{::comment} description-end: load-as-eclab-ascii {:/}

{::comment} synopsis-start: load-as-parameters {:/}

### `load-as-parameters` - Load files with backend 'parameters' {#cmd-load-as-parameters}

`load-as-parameters` _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."} `/expected=`_integer_{:title="an integer"} `/flags=`_words_{:title="several words, separated by ','"} `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"} `/histogram=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/ignore-empty=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/yerrors=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}

  * _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."}: the files to load -- values: one or more files. Can include wildcards such as *, `[0-4]`, etc...
  * `/expected=`_integer_{:title="an integer"}: Expected number of loaded datasets -- values: an integer
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"}: Select on formula -- values: a piece of [Ruby code](#ruby)
  * `/histogram=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to show as a histogram (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/ignore-empty=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, skips empty files (default on) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/yerrors=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}: name of the column containing y errors -- values: the [number/name of a column](#column-names) in a buffer

{::comment} synopsis-end: load-as-parameters {:/}
{::comment} description-start: load-as-parameters {:/}
QSoas can also load the parameters from a "Save Parameters" file. The
parameterse end up one per column, as a function of the perpendicular
coordinate used during the fit (or just an index if there was no
perpendicular coordinates). This works on the parameters "saved for
reusing later", the ones "exported" can be read using the standard
[cmd: load-as-text] command, possibly by specifying the option
`/comments=#` to avoid ignoring lines that start with text (buffer names).
{::comment} description-end: load-as-parameters {:/}


{::comment} synopsis-start: expand {:/}

### `expand` - Expand {#cmd-expand}

`expand` `/flags=`_words_{:title="several words, separated by ','"} `/group-columns=`_integer_{:title="an integer"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/x-every-nth=`_integer_{:title="an integer"}

  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/group-columns=`_integer_{:title="an integer"}: specifies the number of Y columns in the created buffers -- values: an integer
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines meta-data from perpendicular coordinate -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/x-every-nth=`_integer_{:title="an integer"}: specifies the number of columns between successive X values -- values: an integer

{::comment} synopsis-end: expand {:/}
{::comment} description-start: expand {:/}
If a buffer contains several columns, QSoas only displays the second as a
function of the first. [cmd: expand] splits the current buffer into as
many buffers as there are Y columns, ie a X, Y1, Y2, Y3 buffer will be
split into three buffers: X, Y1;   X, Y2 and  X, Y3.

If `/perp-meta` is specified, then the given [meta-data](#meta-data)
will be defined for each buffer, based on the value of the
[perpendicular coordinates](#meta-data).

By default, `expand` assumes that the first column is the only X
column. However, if you give a number to the `/x-every-nth=` option,
then `expand` assumes that a X column is every that many columns. For
instance, `/x-every-nth=2` means that the layout of the buffer is X1
Y1 X2 Y2 X3 Y3...

By default, `expand` splits every Y column into its own
buffer. However, it is possible to group them using the
`/group-columns` option. For instance, splitting a X Y1 Y2 Y3 Y4
buffer with:

~~~
QSoas> expand /group-columns=2
~~~

will result in two buffers: X Y1 Y2 and X Y3 Y4.

{::comment} description-end: expand {:/}

{::comment} synopsis-start: rename {:/}

### `rename` - Rename {#cmd-rename}

`rename` _new-name_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}

Short name: `a`

  * _new-name_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: New name  -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: rename {:/}
{::comment} description-start: rename {:/}
Changes the name of the current buffer. To help track the operations
applied to a buffer, its name is modified and gets longer after each
modification. Use `rename` to give it a more meaningful (and shorter)
name.

If you need to rename a large number of buffers, you probably want to
try [cmd: save-buffers] with `/mode=rename`.
{::comment} description-end: rename {:/}

{::comment} synopsis-start: save {:/}

### `save` - Save {#cmd-save}

`save` _file_{:title="name of a file"} `/mkpath=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/overwrite=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

Short name: `s`

  * _file_{:title="name of a file"}: File name for saving -- values: name of a file
  * `/mkpath=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If true, creates all necessary directories -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/overwrite=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If true, overwrite without prompting -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: save {:/}
{::comment} description-start: save {:/}
Saves the current buffer to a file. This command will ask you before
overwriting an existing file, unless `/overwrite=true` was specified.

It will also change the name of the file.
{::comment} description-end: save {:/}

{::comment} synopsis-start: save-buffers {:/}

### `save-buffers` - Save {#cmd-save-buffers}

`save-buffers` _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/expression=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/format=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/mkpath=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/mode=`_choice_{:title="one of: `both`, `rename`, `save`"} `/overwrite=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: buffers to save -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/expression=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: a Ruby expression to make file names -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/format=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: overrides buffer names if present -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/mkpath=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if true, creates all necessary directories (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/mode=`_choice_{:title="one of: `both`, `rename`, `save`"}: if using `/format` or `/expression`, whether to just `save`, to just `rename` or `both` (defaults to 'both') -- values: one of: `both`, `rename`, `save`
  * `/overwrite=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if false, will not overwrite existing files (default is true) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: save-buffers {:/}
{::comment} description-start: save-buffers {:/}
Saves the designated buffers to files.

Unlike the [cmd: save] command, this saves the buffers using
their current names, and does not prompt for a file name. It is
probably a good idea to use [cmd: rename] first, or use the
possibilities below.

This command can rename the buffers before saving them,
by using a
`[printf](http://www.cplusplus.com/reference/cstdio/printf/)`-like
format, as in the following case,
which renames the first 101 buffers to `Buffer-000.dat`,
`Buffer-001.dat`, and so on:

~~~
QSoas> save-buffers /format=Buffer-%03d.dat 0..100
~~~

It is also possible to use a full-blown [Ruby](#ruby) expression that
will be aware of the buffer's meta-data:

~~~
QSoas> save-buffers '/expression="File-#{$meta.sr}.dat"'
~~~

This requires careful quoting: outer single quotes (`'`) for QSoas and
inner double quotes for [Ruby](#ruby). See more information about the
informations available from within the ruby code [there](#for-which).

If you only need to rename the buffers without saving them, use
`/mode=rename`.

By default, `save-buffers` overwrites the files without asking, but
using `/overwrite=false` keeps the original files in place.

`save-buffers` does not by default create directories. However, using
`/mkpath=true` makes it possible to save buffers in non-existing
directories, that as created when needed. Try out:

~~~
QSoas> save-buffers /format=non-existing-directory/buffer-%03d.dat 0..100 /mkpath=true
~~~

{::comment} description-end: save-buffers {:/}

{::comment} synopsis-start: browse {:/}

### `browse` - Browse files {#cmd-browse}

`browse` `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"} `/pattern=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}

Short name: `W`

  * `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"}: Select on formula -- values: a piece of [Ruby code](#ruby)
  * `/pattern=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} (default option): Files to browse -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: browse {:/}
{::comment} description-start: browse {:/}
Browse all datafiles in the current directory (or those matching the
wildcard pattern given to `/pattern`, see [cmd: load] for more
information about wildcards). Very useful to find quickly the file
you're looking for.

Using the  `/for-which` option, one can display only a certain set of
files based on their meta-data and/or statistics. See the
[dedicated section](#for-which) for more details.
{::comment} description-end: browse {:/}


# Data display

{::comment} synopsis-start: overlay-buffer {:/}

### `overlay-buffer` - Overlay buffers {#cmd-overlay-buffer}

`overlay-buffer` `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}

Short name: `V`

  * `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} (default option): Buffers to overlay -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"}: Only act on buffers matching the code -- values: a piece of [Ruby code](#ruby)
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for curves display -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`

{::comment} synopsis-end: overlay-buffer {:/}
{::comment} description-start: overlay-buffer {:/}
Plots one or several buffers on top of the current buffer.

See [cmd: load] for the description of the `/style` option.
{::comment} description-end: overlay-buffer {:/}

{::comment} synopsis-start: hide-buffer {:/}

### `hide-buffer` - Hide buffers {#cmd-hide-buffer}

`hide-buffer` _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}

Short name: `H`

  * _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: buffers to hide -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)

{::comment} synopsis-end: hide-buffer {:/}
{::comment} description-start: hide-buffer {:/}
This does the reverse of the [cmd: overlay-buffer] command. Pass it
the buffers you want to remove from the current view. Don't be afraid
of passing it non-visible datasets, QSoas won't shout at you if you do.
{::comment} description-end: hide-buffer {:/}


{::comment} synopsis-start: overlay {:/}

### `overlay` - Overlay {#cmd-overlay}

`overlay` _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."} `/auto-split=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/columns=`_integers_{:title="a comma-separated list of integers"} `/comments=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"} `/decimal=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/expected=`_integer_{:title="an integer"} `/flags=`_words_{:title="several words, separated by ','"} `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"} `/histogram=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/ignore-cache=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/ignore-empty=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/separator=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/skip=`_integer_{:title="an integer"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/yerrors=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}

Short name: `v`

  * _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."}: the files to load -- values: one or more files. Can include wildcards such as *, `[0-4]`, etc...
  * `/auto-split=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, create a new dataset at every fully blank line (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/columns=`_integers_{:title="a comma-separated list of integers"}: columns loaded from the file -- values: a comma-separated list of integers
  * `/comments=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"}: pattern for comment lines -- values: plain text, or [regular expressions](#regexps) enclosed within / / delimiters
  * `/decimal=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: decimal separator -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/expected=`_integer_{:title="an integer"}: Expected number of loaded datasets -- values: an integer
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"}: Select on formula -- values: a piece of [Ruby code](#ruby)
  * `/histogram=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to show as a histogram (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/ignore-cache=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, ignores cache (default off) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/ignore-empty=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, skips empty files (default on) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/separator=`_pattern_{:title="plain text, or [regular expressions](#regexps) enclosed within / / delimiters"}: separator between columns -- values: plain text, or [regular expressions](#regexps) enclosed within / / delimiters
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/skip=`_integer_{:title="an integer"}: skip that many lines at beginning -- values: an integer
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/yerrors=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}: name of the column containing y errors -- values: the [number/name of a column](#column-names) in a buffer

{::comment} synopsis-end: overlay {:/}
{::comment} description-start: overlay {:/}
This command combines [cmd: overlay-buffer] and 
[cmd: load] in one go: loads the files given as arguments and
adds them to the current plot; it has the same options as those commands.
{::comment} description-end: overlay {:/}

{::comment} synopsis-start: clear {:/}

### `clear` - Clear view {#cmd-clear}

`clear` 


{::comment} synopsis-end: clear {:/}
{::comment} description-start: clear {:/}
Removes all datasets except the current buffer from the display. Use to
revert the effect of a previous overlay command, or can be useful if
for some reason a command failed while not restoring the display (but
that should not happen anyway).
{::comment} description-end: clear {:/}

{::comment} synopsis-start: points {:/}

### `points` - Show points {#cmd-points}

`points` 

Short name: `poi`


{::comment} synopsis-end: points {:/}
{::comment} description-start: points {:/}
Shows datapoints (by default, datasets are plotted by connecting
datapoints with a line). Beware that it may slow down display if you
have a large number of data points.
{::comment} description-end: points {:/}

{::comment} synopsis-start: zoom {:/}

### `zoom` - Zoom {#cmd-zoom}

`zoom` **(interactive)**

Short name: `z`


{::comment} synopsis-end: zoom {:/}
{::comment} description-start: zoom {:/}
Zooms on the current curve.

Click to delimit a region. Hit `x` to zoom in on the X axis, `X` to
zoom out, `y` and `Y` for the Y axis, and `z`/`Z` for both at the same
time. Hit `c` to reset the zoom.

Indepently of this function, you can use the mouse wheel **at any
moment** to zoom in and out:
 * mouse wheel: zoom in and out vertically
 * Shift+mouse wheel: zoom in and out horizontally
 * Ctrl (or Cmd) + mouse wheel: zoom in and out (horizontally and
 vertically)
 * Shift+Ctrl + mouse wheel: reset zoom.

If you know the coordinates around which you'd like to zoom, you may
want to use [cmd: limits] instead.

{::comment} description-end: zoom {:/}
{::comment} synopsis-start: limits {:/}

### `limits` - Set limits {#cmd-limits}

`limits` _left_{:title="a floating-point number"} _right_{:title="a floating-point number"} _bottom_{:title="a floating-point number"} _top_{:title="a floating-point number"}

  * _left_{:title="a floating-point number"}: Left limit -- values: a floating-point number
  * _right_{:title="a floating-point number"}: Right limit -- values: a floating-point number
  * _bottom_{:title="a floating-point number"}: Bottom limit -- values: a floating-point number
  * _top_{:title="a floating-point number"}: Top limit -- values: a floating-point number

{::comment} synopsis-end: limits {:/}
{::comment} description-start: limits {:/}
This is the non-interactive version of [cmd: zoom]. You specify the
left, right, bottom and top values of the currently displayed window
directly on the command-line. There are two special values:

  * `*` means "auto", or in other words the maximum needed to see all
  the curves for that specific side (left, right, bottom or top)
  * `=` means "don't change"
{::comment} description-end: limits {:/}




# Data stack manipulation {#data-stack}

Data files are loaded and manipulated in a stack. Every time a file is
loaded or a buffer modified, the new buffer is pushed onto the top of
the stack, and becomes the current buffer (numbered 0). Older buffers
have increasing numbers (the previous buffer is 1, the one before 2,
and so on). There is also a "redo" stack populated by the
[cmd: undo] command. Stack can be manipulated in different
ways:

 * the current buffer can be changed using
   [cmd: undo]/[cmd: redo];
 * buffers can be permanently removed from the stack using
   [cmd: drop];
 * the whole stack can be saved for later use with
   [cmd: save-stack] and restored using
   [cmd: load-stack], or dropped altogether using
   [cmd: clear-stack];
 * contents of the stack can be displayed in the terminal using
   [cmd: show-stack] or in a dialog bog with 
   [cmd: browse-stack].
 * an old buffer can be put back on the top of the stack with
   [cmd: fetch].
 * buffers can be flagged ([cmd: flag]) or unflagged
   ([cmd: unflag]) to be used later using the `flagged`
   buffer selector.


{::comment} synopsis-start: browse-stack {:/}

### `browse-stack` - Browse stack {#cmd-browse-stack}

`browse-stack` `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"} **(interactive)**

Short name: `K`

  * `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} (default option): Buffers to show -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"}: Only act on buffers matching the code -- values: a piece of [Ruby code](#ruby)

{::comment} synopsis-end: browse-stack {:/}
{::comment} description-start: browse-stack {:/}
Displays the contents of the stack using a dialog box that
works similarly to the one of the [cmd: browse] command.

It is possible to fine-tune the datasets to browse using:
* the `/buffers` option, which takes a buffer list;
* the `/for-which` option, that takes a condition, see the
[dedicated section](#for-which) for more information.

If the option `/meta=` is specified, the command also lists the values
of the given, comma-separated, [meta data](#meta-data).

{::comment} description-end: browse-stack {:/}

{::comment} synopsis-start: show-stack {:/}

### `show-stack` - Show stack {#cmd-show-stack}

`show-stack` `/meta=`_words_{:title="several words, separated by ','"} `/number=`_integer_{:title="an integer"}

Short name: `k`

  * `/meta=`_words_{:title="several words, separated by ','"}: also lists the comma-separated meta-data -- values: several words, separated by ','
  * `/number=`_integer_{:title="an integer"} (default option): Display only that many buffers around 0 -- values: an integer

{::comment} synopsis-end: show-stack {:/}
{::comment} description-start: show-stack {:/}
Shows a small text summary of what the stack is made of. If your stack
is large and you just need to look at a few buffers, use `/number=10`
for instance (that will only show buffers `-9` to `9`).
{::comment} description-end: show-stack {:/}


{::comment} synopsis-start: undo {:/}

### `undo` - Undo {#cmd-undo}

`undo` `/number=`_integer_{:title="an integer"}

Short name: `u`

  * `/number=`_integer_{:title="an integer"} (default option): Number of operations to undo -- values: an integer

{::comment} synopsis-end: undo {:/}
{::comment} description-start: undo {:/}
Returns to the previous buffer, and pushes the current to the redo
stack. If `/number=` is specified, repeats that many times.
{::comment} description-end: undo {:/}


{::comment} synopsis-start: redo {:/}

### `redo` - Redo {#cmd-redo}

`redo` `/number=`_integer_{:title="an integer"}

Short name: `r`

  * `/number=`_integer_{:title="an integer"} (default option): Number of operations to redo -- values: an integer

{::comment} synopsis-end: redo {:/}
{::comment} description-start: redo {:/}
Pops the last buffer from the redo stack and sets it as the current
buffer. `/number` has the same meaning as for [cmd: undo].
{::comment} description-end: redo {:/}

{::comment} synopsis-start: save-stack {:/}

### `save-stack` - Save stack {#cmd-save-stack}

`save-stack` _file_{:title="name of a file"}

  * _file_{:title="name of a file"}: File name for saving stack -- values: name of a file

{::comment} synopsis-end: save-stack {:/}
{::comment} description-start: save-stack {:/}
Saves the entire contents of the stack (all the buffers, their flags
and their meta-data) for later use in a `.qst` file, which is in a
binary format.  This file is only meant to be loaded again with
either the command [cmd: load-stack], directly from the
command-line using the `--load-stack` [command-line
option](#command-line-options), or directly by double-clicking
from your favorite file manager.

If you'd rather save every file in the stack separately as a text
file, use the [cmd: save-buffers] command:

~~~~
QSoas> save-buffers all
~~~~
{::comment} description-end: save-stack {:/}

{::comment} synopsis-start: load-stack {:/}

### `load-stack` - Load stack {#cmd-load-stack}

`load-stack` _file_{:title="name of a file"} `/merge=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _file_{:title="name of a file"}: File name for saving stack -- values: name of a file
  * `/merge=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If true, merges into the current stack rather than overwriting -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: load-stack {:/}
{::comment} description-start: load-stack {:/}
Loads a saved stack, from a file that was created using
[cmd: save-stack].

If `/merge=true` is used, then the previous buffers are kept, and the
contents of the stack files are just merged into the stack.
{::comment} description-end: load-stack {:/}



{::comment} synopsis-start: clear-stack {:/}

### `clear-stack` - Clear stack {#cmd-clear-stack}

`clear-stack` 

Short name: `delstack`


{::comment} synopsis-end: clear-stack {:/}
{::comment} description-start: clear-stack {:/}
Removes all the buffers from both normal and redo stack
{::comment} description-end: clear-stack {:/}

{::comment} synopsis-start: fetch {:/}

### `fetch` - Fetch an old buffer {#cmd-fetch}

`fetch` _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}

  * _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: Buffers to fetch -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)

{::comment} synopsis-end: fetch {:/}
{::comment} description-start: fetch {:/}
Put back a *copy* of the given buffer on the top of the stack. Useful
when you want to work again on a old buffer buried in the stack.
{::comment} description-end: fetch {:/}

{::comment} synopsis-start: drop {:/}

### `drop` - Drop dataset {#cmd-drop}

`drop` `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}

  * `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} (default option): Buffers to drop -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)

{::comment} synopsis-end: drop {:/}
{::comment} description-start: drop {:/}
Permanently deletes the current dataset (or the ones specified in the
`/buffers` options) from the stack.

~~~~
QSoas> drop 3..16
~~~~ 

drops all the buffers from 3 to 16 included. 

*Important:* it is *not* possible to recover a buffer once it has been
dropped from the stack. [cmd: undo] won't work.
{::comment} description-end: drop {:/}
{::comment} synopsis-start: flag {:/}

### `flag` - Flag datasets {#cmd-flag}

`flag` `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/exclusive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/flags=`_words_{:title="several words, separated by ','"} `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"} `/set=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} (default option): Buffers to flag/unflag -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/exclusive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, clears the given flags on all the buffers but the ones specified -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/flags=`_words_{:title="several words, separated by ','"}: Buffers to flag/unflag -- values: several words, separated by ','
  * `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"}: Only act on buffers matching the code -- values: a piece of [Ruby code](#ruby)
  * `/set=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, clears all the previous flags -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: flag {:/}
{::comment} description-start: flag {:/}
Flags the given buffer (or the current one if none is supplied) for
later use. All currently flagged buffers can be specified using the
`flagged` argument to, for instance, [cmd: overlay-buffer].

`QSoas` supports arbitrary text flags, by passing a comma-separated
list of flags to the `/flags=` option. In the absence of that, the
buffers are flagged with the flag name `default`. Buffers can hold
an arbitrary number of flags. For instance:

~~~~
QSoas> flag 0..5 /flags=exp1,fit
~~~~

flags buffers 0 to 5 with the flags `exp1` and `fit`. Buffers are
flagged 'in-place': the current buffer is not changed.

If the `/for-which` option is present, the flags are only applied to
the datasets that match the specifications given. See more about that
[there](#for-which).

By default, `flag` does not touch already existing flags. However, if
you use `/exclusive=true`, then all the flags that are not set
explictly with the command are cleared.

{::comment} description-end: flag {:/}
{::comment} synopsis-start: unflag {:/}

### `unflag` - Unflag datasets {#cmd-unflag}

`unflag` `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/flags=`_words_{:title="several words, separated by ','"} `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"}

  * `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} (default option): Buffers to flag/unflag -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/flags=`_words_{:title="several words, separated by ','"}: Buffers to flag/unflag -- values: several words, separated by ','
  * `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"}: Only act on buffers matching the code -- values: a piece of [Ruby code](#ruby)

{::comment} synopsis-end: unflag {:/}
{::comment} description-start: unflag {:/}
Does the reverse of [cmd: flag], that is removes all flags on the
given datasets, or only those specified by the `/flags` option if the
latter is present. The `/for-which` option words exactly in the same
way as for [cmd: flag].
{::comment} description-end: unflag {:/}

{::comment} synopsis-start: auto-flag {:/}

### `auto-flag` - Auto flag {#cmd-auto-flag}

`auto-flag` `/flags=`_words_{:title="several words, separated by ','"}

  * `/flags=`_words_{:title="several words, separated by ','"} (default option): Flags -- values: several words, separated by ','

{::comment} synopsis-end: auto-flag {:/}
{::comment} description-start: auto-flag {:/}
Flags the datasets produced by all commands afterwards, until a call
to [cmd: auto-flag] without options:

~~~~
QSoas> auto-flag /flags=stuff
 [ ... create new datasets. They will all be flagged stuff,
 until the following command ...]
QSoas> auto-flag
~~~~

This can be used to flag all the datasets produced by a script, for
instance.


{::comment} description-end: auto-flag {:/}



# Basic data manipulation at the buffer level

{::comment} synopsis-start: apply-formula {:/}

### `apply-formula` - Apply formula {#cmd-apply-formula}

`apply-formula` _formula_{:title="a piece of [Ruby code](#ruby)"} `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/extra-columns=`_integer_{:title="an integer"} `/flags=`_words_{:title="several words, separated by ','"} `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"} `/keep-on-error=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/use-meta=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/use-stats=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

Short name: `F`

  * _formula_{:title="a piece of [Ruby code](#ruby)"}: formula -- values: a piece of [Ruby code](#ruby)
  * `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} (default option): Buffers to work on -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/extra-columns=`_integer_{:title="an integer"}: number of extra columns to create -- values: an integer
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"}: Only act on buffers matching the code -- values: a piece of [Ruby code](#ruby)
  * `/keep-on-error=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, the points where the Ruby expression returns a  error are kept, as invalid numbers -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/use-meta=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on (by default), you can use `$meta` to refer to the dataset meta-data -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/use-stats=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on (by default), you can use `$stats` to refer to statistics (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: apply-formula {:/}
{::comment} description-start: apply-formula {:/}
Applies a formula to the current dataset. It should specify how the
`x` and/or `y` values of the dataset are modified:

~~~~
QSoas> apply-formula x=x**2
QSoas> apply-formula y=sin(x**2)
QSoas> apply-formula x,y=y,x
~~~~

The last bit swaps the $$x$$ and $$y$$ values of the buffer. The
formula must be valid [ruby](#ruby) code.

In addition to `x` and `y` (note the lowercase !), the formula can
refer to: 

  * `i`, the index of the data point
  * `seg`, the number of the current segment (starting from 0)
  * `x_0`, the value of $$x$$ of the first point of the current
    [segment](#segments)
  * `i_0`, the index of the first point in the current
    [segment](#segments)
  * `y2`, `y3`, etc when there are more than 2 columns in the dataset

`i` and `seg` cannot be modified, but `y2` and so on can. Here is how
you can use `i` to have even points draw a sine wave and odd points a
cosine:

~~~~
QSoas> apply-formula y=(i%2==0?sin(x):cos(x))
~~~~

`%` is the modulo operator. The construction with `?` and `:` (called
the [ternary operator](https://en.wikipedia.org/wiki/%3F:) means:
if `i%2==0` is true, then the value is `sin(x)`, else `cos(x)`.

You can use several instructions by separating them with `;`:

~~~~
QSoas> apply-formula x=x**2;y=x**2
~~~~

This results in `x` values that are the squares of the old values, and
`y` values that are the square of the new `x` values.


Extra columns initially filled with 0 can be created by using the
`/extra-columns` option:

~~~~
QSoas> apply-formula /extra-columns=1 y2=y**2
~~~~

This creates a third column (a second `y` column) containing the
square of the values of the Y column.

If `/use-stats=true` is used, a global variable `$stats` can be used
in the [Ruby expression](#ruby). It contains all the statistics displayed
by [cmd: stats]. For instance, to normalize the Y values by dividing
by the median, one would use:

~~~ 
QSoas> apply-formula /use-stats=true y=y/$stats.y_med
~~~

Note that you can make use of the special `/=` operator to shorten
that into:

~~~ 
QSoas> apply-formula /use-stats=true y/=$stats.y_med
~~~

Statistics by segments (see more about segments [there](#segments))
are available too, which means if you want to normalize by the medians
of the first segment, you could do

~~~ 
QSoas> apply-formula /use-stats=true y/=$stats[0].y_med
~~~

If `/use-meta` is `true` (the default), then a global variable `$meta`
is defined that contains the value of the [meta-data](#meta-data)
(what is shown by [cmd: show]). What you make of this will greatly
depend of the meta-data QSoas has gathered from your file (and those
you have set manually using [cmd: set-meta]).

Some results will give "invalid numbers", such as `sqrt(-1)`. By
default, `QSoas` strips the points corresponding to the invalid
results, but you can keep them (as invalid numbers) using
`/keep-on-error=true` (but be aware that working with invalid numbers
is a real pain !).

It is now possible to work with several buffers using the `/buffers`
option, and control the resulting buffers using the commands described
[there](#several-buffers).

{::comment} description-end: apply-formula {:/}


{::comment} synopsis-start: dx {:/}

### `dx` - DX {#cmd-dx}

`dx` 


{::comment} synopsis-end: dx {:/}
{::comment} description-start: dx {:/}
Replaces the Y values by the values of delta X, i.e, 
`y[i] = x[i+1] - x[i]`. This is useful to see if the X values are
equally spaced.
{::comment} description-end: dx {:/}
{::comment} synopsis-start: dy {:/}

### `dy` - DY {#cmd-dy}

`dy` 


{::comment} synopsis-end: dy {:/}
{::comment} description-start: dy {:/}
Same as [cmd: dx] but for Y values: replaces the Y values by the
values of delta Y.
{::comment} description-end: dy {:/}

{::comment} synopsis-start: zero {:/}

### `zero` - Makes 0 {#cmd-zero}

`zero` _value_{:title="a floating-point number"} `/axis=`_axis_{:title="one of: `x`, `y`"}

  * _value_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/axis=`_axis_{:title="one of: `x`, `y`"}: which axis is zero-ed (default y) -- values: one of: `x`, `y`

{::comment} synopsis-end: zero {:/}
{::comment} description-start: zero {:/}
Given an X value, shifts the Y values so that the point the closest to
the given X value has 0 as Y value.

If `/axis` is `x`, swap X and Y in the above description.
{::comment} description-end: zero {:/}

{::comment} synopsis-start: shiftx {:/}

### `shiftx` - Shift X values {#cmd-shiftx}

`shiftx` 


{::comment} synopsis-end: shiftx {:/}
{::comment} description-start: shiftx {:/}
Shift X values so that the first point has a X value of 0.
{::comment} description-end: shiftx {:/}

{::comment} synopsis-start: norm {:/}

### `norm` - Normalize {#cmd-norm}

`norm` `/map-to=`_numbers_{:title="several floating-point numbers, separated by :"} `/positive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * `/map-to=`_numbers_{:title="several floating-point numbers, separated by :"} (default option): Normalizes by mapping to the given segment -- values: several floating-point numbers, separated by :
  * `/positive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to normalize on positive or negative values (default true) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: norm {:/}
{::comment} description-start: norm {:/}
Normalizes the current buffer by dividing by its maximum value, or, if
`/positive=false` by the absolute value of its most negative value. 

If the `/map-to` option is specified, the original dataset is mapped
linearly to the given interval: 

~~~~ 
norm /map-to=2:4
~~~~

shifts and scales the original data so that the Y minimum is 2 and the
Y maximum is 4.
{::comment} description-end: norm {:/}


{::comment} synopsis-start: deldp {:/}

### `deldp` - Deldp {#cmd-deldp}

`deldp` **(interactive)**


{::comment} synopsis-end: deldp {:/}
{::comment} description-start: deldp {:/}
With this command, you can click on given data points to remove
them. Useful to remove a few spikes from the data. Middle click or `q`
to accept the modifications, hit escape to cancel them.
{::comment} description-end: deldp {:/}


{::comment} synopsis-start: edit {:/}

### `edit` - Edit dataset {#cmd-edit}

`edit` 


{::comment} synopsis-end: edit {:/}
{::comment} description-start: edit {:/}
Opens a spreadsheet-like window where you can view and edit the
individual values of the current dataset. If you want to save your
modification, press the "push new" button.
{::comment} description-end: edit {:/}

{::comment} synopsis-start: sort {:/}

### `sort` - Sort {#cmd-sort}

`sort` 


{::comment} synopsis-end: sort {:/}
{::comment} description-start: sort {:/}
Sorts the buffer in increasing X values.
{::comment} description-end: sort {:/}

{::comment} synopsis-start: reverse {:/}

### `reverse` - Reverse {#cmd-reverse}

`reverse` 


{::comment} synopsis-end: reverse {:/}
{::comment} description-start: reverse {:/}
Reverses the order of all the data points: the last one now becomes
the first one, and so on. Though this has no effect on the look of the
data, this will impact commands that work with indices, such as
[cmd: cut] and the multi-buffer processing commands (such as
[cmd: subtract], [cmd: div]) with `/mode=indices`.
{::comment} description-end: reverse {:/}


{::comment} synopsis-start: strip-if {:/}

### `strip-if` - Strip points {#cmd-strip-if}

`strip-if` _formula_{:title="a piece of [Ruby code](#ruby)"} `/threshold=`_integer_{:title="an integer"} `/use-meta=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/use-stats=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _formula_{:title="a piece of [Ruby code](#ruby)"}: Ruby boolean expression -- values: a piece of [Ruby code](#ruby)
  * `/threshold=`_integer_{:title="an integer"}: If the stripping operation leaves less than that many points, do not create a new dataset -- values: an integer
  * `/use-meta=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on (by default), you can use `$meta` to refer to the dataset meta-data -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/use-stats=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, you can use `$stats` to refer to statistics (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: strip-if {:/}
{::comment} description-start: strip-if {:/}
Removes all points for which the [ruby expression](#ruby) returns `true`. This
can be used for quite advanced data selection:

~~~~
QSoas> strip-if x>2
~~~~ 

This removes all points whose X value is greater than 2.

~~~~
QSoas> strip-if x>2||x<4
~~~~ 

This removes all points whose X value is greater than 2 or whose X
value is lower than 4. The `||` bit means OR. In other terms, it
*keeps* only the X values between 2 and 4.

~~~~
QSoas> strip-if x*y<10&&x>2
~~~~

This removes all the points for which both the X value is greater than 2 and
the product of X and Y is lower than 10.

When reading data files that contain spurious data points (such as
text lines containing no data within a file read with
[cmd: load-as-text]), QSoas replaces the missing data
by weird numbers called NaN (Not a Number). They can be useful at
times, but mess up statistics and fits. To remove them, use:

~~~~
QSoas> strip-if x.nan?||y.nan?
~~~~

Like in [cmd: apply-formula], you can use the statistics and the
meta-data of the buffers if you use the options `/use-meta` (on by
default) and `/use-stats`.

By default, `strip-if` creates a new dataset regardless of the number
of points left (even if there are no points left). Giving a value to
the `/threshold` option will prevent `strip-if` from creating a new
buffer if it has less than that many points.

{::comment} description-end: strip-if {:/}

{::comment} synopsis-start: integrate {:/}

### `integrate` - Integrate {#cmd-integrate}

`integrate` `/index=`_integer_{:title="an integer"}

  * `/index=`_integer_{:title="an integer"}: index of the point that should be used as y = 0 -- values: an integer

{::comment} synopsis-end: integrate {:/}
{::comment} description-start: integrate {:/}
Integrate just does the reverse of [cmd: diff] and integrates the
current buffer. First data point is the one for which Y=0, unless an
index is specified to the `/index` option, in which case the numbered
point ends up being at 0.
{::comment} description-end: integrate {:/}

{::comment} synopsis-start: diff {:/}

### `diff` - Derive {#cmd-diff}

`diff` `/derivative=`_integer_{:title="an integer"} `/order=`_integer_{:title="an integer"}

  * `/derivative=`_integer_{:title="an integer"}: the number of the derivative to take, only valid together with the order option -- values: an integer
  * `/order=`_integer_{:title="an integer"}: total order of the computation -- values: an integer

{::comment} synopsis-end: diff {:/}
{::comment} description-start: diff {:/}
Computes the 4th order accurate derivative of the buffer.

This is efficient to compute the derivative of smooth data, but it
gives very poor results on noisy data. In general, for derivation of
real data, prefer [cmd: filter-fft], [cmd: filter-bsplines] or
[cmd: auto-reglin], which will give much better results.

Starting from QSoas version 2.1, a second mode is available, in which
you can choose an arbitrary order for the derivation (has to be less
than the number of points of the dataset), via the option `/order=`,
and an optional derivative via the `/derivative` option. For instance,
you can reproduce the effect of [cmd: diff2] using:

~~~~
QSoas> diff /order=4 /derivative=2
~~~~

{::comment} description-end: diff {:/}

{::comment} synopsis-start: diff2 {:/}

### `diff2` - Derive twice {#cmd-diff2}

`diff2` 


{::comment} synopsis-end: diff2 {:/}
{::comment} description-start: diff2 {:/}
Computes the 4th order accurate second derivative of the buffer. 

The same warnings apply as for [cmd: diff].
{::comment} description-end: diff2 {:/}
{::comment} synopsis-start: dataset-options {:/}

### `dataset-options` - Options {#cmd-dataset-options}

`dataset-options` `/histogram=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/yerrors=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}

  * `/histogram=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to show as a histogram (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/yerrors=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}: name of the column containing y errors -- values: the [number/name of a column](#column-names) in a buffer

{::comment} synopsis-end: dataset-options {:/}
{::comment} description-start: dataset-options {:/}
Sets options for the current dataset:

 * `/yerrors` sets the display of errors on Y values, see
   [there](#column-names) for more information on how to specify the
   columns;
 * `/histogram` sets wether or not the dataset should be
   displayed as a histogram.
{::comment} description-end: dataset-options {:/}

{::comment} synopsis-start: edit-errors {:/}

### `edit-errors` - Edit errors {#cmd-edit-errors}

`edit-errors` **(interactive)**


{::comment} synopsis-end: edit-errors {:/}
{::comment} description-start: edit-errors {:/}
Provides an interface for editing manually the errors attached to each
point of the current buffer. This function will create a column
containing errors if there is none yet.

Pick left and right bounds with the left and right mouse buttons and
set the errors within the bounds with `i` and outside with `o`. This
is typically used to crudely exclude some bits of the dataset from
fitting, by setting much larger errors for the bits than for the rest.
{::comment} description-end: edit-errors {:/}


## Splitting the dataset in bits (and back)

{::comment} synopsis-start: cut {:/}

### `cut` - Cut {#cmd-cut}

`cut` **(interactive)**

Short name: `c`


{::comment} synopsis-end: cut {:/}
{::comment} description-start: cut {:/}
Interactively cuts bits out of the buffer. Left and right mouse clicks
set the left and right limits. Middle click or `q` quits leaving only the
part that is within the region, while `u` leaves only the outer
part. `r` remove the part inside the region, but lets you keep on
editing the buffer. Hit escape to cancel.

By default, the Y values are displayed as a function of the index; you
can switch back to display Y values as a function of X by hitting `x`.
{::comment} description-end: cut {:/}

{::comment} synopsis-start: chop {:/}

### `chop` - Chop Buffer {#cmd-chop}

`chop` _lengths..._{:title="several floating-point numbers, separated by ,"} `/flags=`_words_{:title="several words, separated by ','"} `/mode=`_choice_{:title="one of: `deltax`, `index`, `indices`, `xvalues`"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/set-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}

  * _lengths..._{:title="several floating-point numbers, separated by ,"}: Lengths of the subsets -- values: several floating-point numbers, separated by ,
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/mode=`_choice_{:title="one of: `deltax`, `index`, `indices`, `xvalues`"}: Whether to cut on index or x values (default) -- values: one of: `deltax`, `index`, `indices`, `xvalues`
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/set-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Whether to actually cut the dataset, or just to set segments where the cuts would have been -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`

{::comment} synopsis-end: chop {:/}
{::comment} description-start: chop {:/}
Cuts the buffer into several parts based on the numbers given as
arguments, and save them as separate
buffers. The intepretation of the numbers depends on the value of the
`/mode` option:

  * `deltax` (default): the numbers are the length (in terms of X) of
    the sub-buffers
  * `xvalues`: the numbers are the X values at which to split
  * `index` (or `indices`): the numbers are the indices of the points
    at which to split

If `/set-segments` is on, the X values are not used to create independent
buffers but rather to set the position of the [segments](#segments).

{::comment} description-end: chop {:/}

{::comment} synopsis-start: splita {:/}

### `splita` - Split first {#cmd-splita}

`splita` 


{::comment} synopsis-end: splita {:/}
{::comment} description-start: splita {:/}
Returns the first part of the buffer, until the first change of sign
of $$\Delta x$$. 

Useful to get the forward scan of a cyclic voltammogram.
{::comment} description-end: splita {:/}

{::comment} synopsis-start: splitb {:/}

### `splitb` - Split second {#cmd-splitb}

`splitb` 


{::comment} synopsis-end: splitb {:/}
{::comment} description-start: splitb {:/}
Returns the part of the buffer after the first change of sign
of $$\Delta x$$. 

Useful to get the backward scan of a cyclic voltammogram.
{::comment} description-end: splitb {:/}


{::comment} synopsis-start: split-monotonic {:/}

### `split-monotonic` - Split into monotonic parts {#cmd-split-monotonic}

`split-monotonic` `/flags=`_words_{:title="several words, separated by ','"} `/group=`_integer_{:title="an integer"} `/keep-first=`_integer_{:title="an integer"} `/keep-last=`_integer_{:title="an integer"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}

  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/group=`_integer_{:title="an integer"}: Group that many segments into one dataset -- values: an integer
  * `/keep-first=`_integer_{:title="an integer"}: Keep only the first n elements of the results -- values: an integer
  * `/keep-last=`_integer_{:title="an integer"}: Keep only the last n elements of the results -- values: an integer
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`

{::comment} synopsis-end: split-monotonic {:/}
{::comment} description-start: split-monotonic {:/}
Splits the buffer into buffers where all parts have X values that
increase or decrease monotonically.

With `/group=2`, each resulting dataset will contain two monotonic
segments.

Using the `/keep-first` or `/keep-last` options make it possible to
only keep a given number of the generated datasets.
{::comment} description-end: split-monotonic {:/}
{::comment} synopsis-start: unwrap {:/}

### `unwrap` - Unwrap {#cmd-unwrap}

`unwrap` `/reverse=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/scan-rate=`_number_{:title="a floating-point number"}

  * `/reverse=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If true, reverses the effect of a previous unwrap command -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/scan-rate=`_number_{:title="a floating-point number"}: Sets the scan rate -- values: a floating-point number

{::comment} synopsis-end: unwrap {:/}
{::comment} description-start: unwrap {:/}

This command makes the X values of the current buffer monotonic by
ensuring that the value of $$\Delta x$$ always have the same sign,
changing it if needed. The command places segments limits at the
position of the changes in direction.

This is useful for instance to convert a cyclic voltammogram from $$i
= f(E)$$ to $$i = f(t)$$; for that purpose, the scan rate can be
provided using the `/scan-rate=` option, or can be guessed from the
`sr` meta-data.

The `unwrap` operation can be reverted by calling [cmd: unwrap] with
`/reverse=true`, which will use the scan rate information and the
position of the segments to reconstruct the original data.

{::comment} description-end: unwrap {:/}

{::comment} synopsis-start: cat {:/}

### `cat` - Concatenate {#cmd-cat}

`cat` _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/add-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

Short name: `i`

  * _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: Buffers to concatenate -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/add-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on (default) segments are added between the old buffers -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: cat {:/}
{::comment} description-start: cat {:/}
Concatenates the buffers given as arguments, adding segment stops
inbetween (unless `/add-segments=false` is used). This can be used to
reverse the effect of the previous commands.

This does not change the number of columns. If you want to gather
several Y columns as a function of the same X, use 
[cmd: contract] instead.
{::comment} description-end: cat {:/}

## Buffer's meta-data and perpendicular coordinates {#meta-data}

QSoas' buffers (or datasets) hold more than just columns of
numbers. When a file is loaded, QSoas also gathers as much information
as possible about that file, such as original file name, file date,
and, for file formats supported by QSoas, details about the
experimental conditions recorded in that file. These are known as
"meta-data", and can be displayed using the [cmd: show] command.

Here are some meta-data of particular signification available to all
buffers loaded from files:

  * `file-date` is the date of the file
  * `age` is the how old the file was in **seconds** when the current
    `QSoas` session was started.
  * `commands` is the list of commands that have been applied to this
    buffer since its load/creation.

Upon saving using [cmd: save] all meta-data are saved as
comments in the text file.

Perpendicular coordinates make sense when a buffer has several Y
columns. For instance, when the dataset consists in spectra taken at
different times, like in the
[tutorial](tutorial.html#tuto-joliot)  (or at different
solution potentials for a redox titration), then the X values will be
the wavelength, and each Y column will correspond to a different
time. Then the time is the _perpendicular coordinate_. One can set
the perpendicular coordinate manually using [cmd: set-perp].

Many commands use perpendicular coordinates, most notably
[cmd: transpose] (that would convert columns of $$y = f(\lambda)$$ for
different values of $$t$$ above into columns of $$y = f(t)$$ for
different values of $$\lambda$$), and all the multi-fit commands, which
show parameters as a function of the perpendicular coordinates when
applicable.


Some of the meta-data has special meaning for `QSoas`, which uses them
for specific functions:

  * `sr` is taken to be the *scan rate* of a voltammogram. This
    information is used by [cmd: baseline]  and [cmd: fit-adsorbed].

## Selecting datasets and files based on meta-data {#for-which}

Some commands, namely [cmd: flag], [cmd: unflag] and [cmd: browse]
accept a `/for-which` option to select the datasets (or files) they
work on based on their properties. The value of the `/for-which` is a
[ruby](#ruby) formula that uses the global variables `$meta` and
`$stats` variables. For instance, the following command flags all the
datasets that have a maximum value greater than `1e-4`:

~~~
QSoas> flag all /for-which $stats.y_max>=1e-4
~~~

**How to test for equality:** in [ruby](#ruby), you need to use `==`
to test whether two values are the same. For instance, to flag
voltammograms in which the scan rate is 0.1 V/s, you have to use:

~~~
QSoas> flag all /for-which $meta.sr==0.1
~~~

Replacing the `==` by `=` in the code above leads to selecting **all**
the buffers, because `$meta.sr=0.1` is always `true` (see more about
the ruby expressions [there](#ruby)).


{::comment} synopsis-start: show {:/}

### `show` - Show information {#cmd-show}

`show` _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}

  * _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: Buffers to show -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)

{::comment} synopsis-end: show {:/}
{::comment} description-start: show {:/}
This command gives detailed information about the buffers given as
arguments, such as the number of rows, columns, segments, but also the
flags the buffer may have, and all its meta-data:

~~~
QSoas> show 0
Dataset 08.oxw: 2 cols, 4975 rows, 1 segments
Flags: 
Meta-data:	delta_t_0 = 950	gpes_file = D:\Vincent\140428\08	original-file = /home/vincent/Data/140428/08.oxw
	age = 428907.581	steps = 1	title = 
	file-date = 2014-05-23T21:23:38	exp-time = 14:03:08	comments = 
	t_0 = 0	E_0 = -0.65	method = chronoamperometry
~~~
 
{::comment} description-end: show {:/}
{::comment} synopsis-start: set-meta {:/}

### `set-meta` - Set meta-data {#cmd-set-meta}

`set-meta` _name_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} _value_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/also-record=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/type=`_choice_{:title="one of: `number`, `number-list`, `text`"}

  * _name_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: name of the meta-data -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * _value_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: value of the meta-data -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/also-record=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: also record the meta-data as if one had used record-meta on the original file -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/type=`_choice_{:title="one of: `number`, `number-list`, `text`"}: type of the meta-data -- values: one of: `number`, `number-list`, `text`

{::comment} synopsis-end: set-meta {:/}
{::comment} description-start: set-meta {:/}
Using `set-meta`, one can set the value of the named meta-data for the
current buffer. _name_ can have any value, it does not have to
exist in the list of buffer's meta-data.

The actual type of the meta-data can be specified using the `/type`
option. For now, it is mostly useful to specify lists of numbers:

~~~ 
QSoas> set-meta injection-times 100,200,300 /type=number-list
~~~

This specifies that the meta-data injection times is a list of numbers
(and not a text).

Meta-data are not permament, and will be forgotten from a `QSoas`
session to another. To store permanently the meta-data so that it is
set again the next time `QSoas` loads this file, either use the
[cmd: record-meta], or use `/also-record=true`, which has the same
effect as running [cmd: record-meta] on the original file.
{::comment} description-end: set-meta {:/}

{::comment} synopsis-start: record-meta {:/}

### `record-meta` - Set meta-data {#cmd-record-meta}

`record-meta` _name_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} _value_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} _files..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."} `/exclude=`_files_{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."} `/type=`_choice_{:title="one of: `number`, `number-list`, `text`"}

  * _name_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: name of the meta-data -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * _value_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: value of the meta-data -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * _files..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."}: files on which to set the meta-data -- values: one or more files. Can include wildcards such as *, `[0-4]`, etc...
  * `/exclude=`_files_{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."}: exclude files -- values: one or more files. Can include wildcards such as *, `[0-4]`, etc...
  * `/type=`_choice_{:title="one of: `number`, `number-list`, `text`"}: type of the meta-data -- values: one of: `number`, `number-list`, `text`

{::comment} synopsis-end: record-meta {:/}
{::comment} description-start: record-meta {:/}
`record-meta` is the "permanent" version of `set-meta`. It sets
meta-data permanently for a series of **files** (and not buffers as in
the case of [cmd: set-meta]). For instance, after running

~~~ 
QSoas> record-meta pH 7 experiment.dat another.dat
~~~

The next time `QSoas` loads either `experiment.dat` or `another.dat`,
they will automatically have a meta-data called `pH` with a value `7`.


**Behind the scenes** The meta-data are stored in special files, one for each of
the data files. They are almost plain text files (more precisely, JSON
files). The have the names of the original files with a `.qsm` suffix
appended. If you move data files around, you need to also move these
files if you want the meta-data to follow.
{::comment} description-end: record-meta {:/}


{::comment} synopsis-start: set-perp {:/}

### `set-perp` - Set perpendicular {#cmd-set-perp}

`set-perp` _coords..._{:title="several floating-point numbers, separated by ,"}

  * _coords..._{:title="several floating-point numbers, separated by ,"}: The values of the coordinates (one for each Y column) -- values: several floating-point numbers, separated by ,

{::comment} synopsis-end: set-perp {:/}
{::comment} description-start: set-perp {:/}
Sets the perpendicular coordinates for the Y columns, as
comma-separated values. There must be as many perpendicular
coordinates as there are Y columns.
{::comment} description-end: set-perp {:/}

{::comment} synopsis-start: transpose {:/}

### `transpose` - Transpose {#cmd-transpose}

`transpose` 


{::comment} synopsis-end: transpose {:/}
{::comment} description-start: transpose {:/}
This command transposes the matrix of the Y columns, while paying
attention to the perpendicular coordinates. In short, if one starts
from a series of Y columns representing spectra as a function of
$$\lambda$$ (the X column) for different values of time (each column
at at different value of $$t$$), then after [cmd: transpose], the new
dataset contains columns describing the time evolution of the
absorbance for different values of $$\lambda$$ (one for each column).

{::comment} description-end: transpose {:/}

{::comment} synopsis-start: tweak-columns {:/}

### `tweak-columns` - Tweak columns {#cmd-tweak-columns}

`tweak-columns` `/flip=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/flip-all=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/remove=`_columns_{:title="a comma-separated list of [columns names](#column-names)"}

  * `/flip=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If true, flips all the Y columns -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/flip-all=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If true, flips all the columns, including the X column -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/remove=`_columns_{:title="a comma-separated list of [columns names](#column-names)"}: the columns to remove  -- values: a comma-separated list of [columns names](#column-names)

{::comment} synopsis-end: tweak-columns {:/}
{::comment} description-start: tweak-columns {:/}
[cmd: tweak-columns] provides basic modifications of columns. If a
[list of columns](#column-names) is given to the `/remove` option,
then the given columns are removed. If `/flip` is on, then all Y
columns are reversed. If `/flip-all` is on, then all columns,
including the X column, are reversed.
{::comment} description-end: tweak-columns {:/}

{::comment} synopsis-start: split-on-values {:/}

### `split-on-values` - Split on column values {#cmd-split-on-values}

`split-on-values` _meta..._{:title="several words, separated by ','"} _columns..._{:title="a comma-separated list of [columns names](#column-names)"} `/flags=`_words_{:title="several words, separated by ','"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}

  * _meta..._{:title="several words, separated by ','"}: Names of the meta to be created -- values: several words, separated by ','
  * _columns..._{:title="a comma-separated list of [columns names](#column-names)"}: Columns whose values one should split on -- values: a comma-separated list of [columns names](#column-names)
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`

{::comment} synopsis-end: split-on-values {:/}
{::comment} description-start: split-on-values {:/}
This command splits the current dataset into a number of datasets,
based on the contents of the columns _columns_. Each newly created
dataset correspond to points in the original dataset that had exactly
the same values in the designated columns. These columns are remove
from the newly created datasets and the values are used to set the
meta-data _meta_. There must be as many comma-separated names in
_meta_ as there are colunm names in _columns_. 
{::comment} description-end: split-on-values {:/}




# Data filtering/processing

QSoas provides different ways to process data to remove unwanted
noise: 

 * Fourier transform filtering using [cmd: filter-fft]
   or [cmd: auto-filter-fft].
 * Data approximation using basis splines via 
   [cmd: filter-bsplines] or 
   [cmd: auto-filter-bs].
 * Splike removals using [cmd: remove-spikes] or even [cmd: deldp].

In addition, QSoas provides ways to remove calculated "baselines":

 * baselines interpolated from datapoints with
   [cmd: baseline]
 * baselines interpolated between two segments using either a cubic
   function or an exponential function with
   [cmd: catalytic-baseline]


{::comment} synopsis-start: filter-fft {:/}

### `filter-fft` - FFT filter {#cmd-filter-fft}

`filter-fft` `/derive=`_integer_{:title="an integer"} **(interactive)**

  * `/derive=`_integer_{:title="an integer"}: The starting order of derivation -- values: an integer

{::comment} synopsis-end: filter-fft {:/}
{::comment} description-start: filter-fft {:/}
Filters data using FFT, ie the data is Fourier transformed, then a
filter function is applied in the frequency domain and the result is
backward transformed.

The cutoff can be changed using the mouse left/right buttons. The
power spectrum can be displayed using the `p` key, and the derivative
can be displayed with `d` (in which case you get the derivative of the
signal when accepting the data).

Behind the scenes, a cubic baseline is computed and subtracted from
the data to ensure that the data to which the FFT is applied has 0
value and 0 derivative on both sides. This greatly reduces artifacts
at the extremities of the dataset. This baseline is computed using a
small heuristic. You can display it using the `b` key.

If you want to do that non-interactively, look at [cmd: auto-filter-fft].
{::comment} description-end: filter-fft {:/}

{::comment} synopsis-start: filter-bsplines {:/}

### `filter-bsplines` - B-Splines filter {#cmd-filter-bsplines}

`filter-bsplines` `/weight-column=`_column_{:title="the [number/name of a column](#column-names) in a buffer"} **(interactive)**

  * `/weight-column=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}: Use the weights in the given column -- values: the [number/name of a column](#column-names) in a buffer

{::comment} synopsis-end: filter-bsplines {:/}
{::comment} description-start: filter-bsplines {:/}

Filters the data using B-splines: B-splines are polynomial functions
of a given order defined over segments. The filtering process finds
the linear combination of these spline functions that is the closest
to the original data.

This approach amounts to taking the projection of the original data
onto the subspace of the polynomial functions.

More information about the polynomial splines used can be found in
the [GSL documentation](http://www.gnu.org/software/gsl/manual/html_node/Overview-of-B_002dsplines.html).  

The result can be tuned by placing "nodes", ie the X positions of the
segments over which the splines are defined. Put more nodes in an area
where the data is not described properly by the smoothed
function. Increasing the order (using `+`) may help too.

Like for [cmd: filter-fft], you can derive the data as
well pushing the `d` key.

Hitting the `o` key optimizes the position of the segments in order
to minimize the difference between the data and the
approximation. (be careful as this function may fail at times).

If you want to do that non-interactively, look at [cmd: auto-filter-bsplines].
{::comment} description-end: filter-bsplines {:/}

{::comment} synopsis-start: auto-filter-bs {:/}

### `auto-filter-bs` - Auto B-splines {#cmd-auto-filter-bs}

`auto-filter-bs` `/derivatives=`_integer_{:title="an integer"} `/number=`_integer_{:title="an integer"} `/optimize=`_integer_{:title="an integer"} `/order=`_integer_{:title="an integer"} `/weight-column=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}

Short name: `afbs`

  * `/derivatives=`_integer_{:title="an integer"}: computes derivatives up to this number -- values: an integer
  * `/number=`_integer_{:title="an integer"}: number of segments -- values: an integer
  * `/optimize=`_integer_{:title="an integer"}: number of iterations to optimize the position of the nodes (defaults to 15, set to 0 or less to disable) -- values: an integer
  * `/order=`_integer_{:title="an integer"}: order of the splines -- values: an integer
  * `/weight-column=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}: uses the weights in the given column -- values: the [number/name of a column](#column-names) in a buffer

{::comment} synopsis-end: auto-filter-bs {:/}
{::comment} description-start: auto-filter-bs {:/}
Filters the data using B-splines in a non-interactive fashion.
Performs automatically an optimization step, like hitting `o` in
[cmd: filter-bsplines], with a number of iterations that is
configurable using the `/optimize=` option (0 disables that altogether).

This is mostly useful in scripts.
{::comment} description-end: auto-filter-bs {:/}


{::comment} synopsis-start: auto-filter-fft {:/}

### `auto-filter-fft` - Auto FFT {#cmd-auto-filter-fft}

`auto-filter-fft` `/cutoff=`_integer_{:title="an integer"} `/derive=`_integer_{:title="an integer"} `/transform=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

Short name: `afft`

  * `/cutoff=`_integer_{:title="an integer"}: value of the cutoff -- values: an integer
  * `/derive=`_integer_{:title="an integer"}: differentiate to the given order -- values: an integer
  * `/transform=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, pushes the transform (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: auto-filter-fft {:/}
{::comment} description-start: auto-filter-fft {:/}
Filters data using FFT in a non-interactive fashion.
Useful in scripts.

With `/transform=yes`, pushes the Fourier transform of the data, in
the format:

~~~
freq magnitude real imag
~~~

{::comment} description-end: auto-filter-fft {:/}

{::comment} synopsis-start: auto-reglin {:/}

### `auto-reglin` - Automatic linear regression {#cmd-auto-reglin}

`auto-reglin` `/window=`_integer_{:title="an integer"}

  * `/window=`_integer_{:title="an integer"}: Number of points (after and before) over which to perform regression -- values: an integer

{::comment} synopsis-end: auto-reglin {:/}
{::comment} description-start: auto-reglin {:/}
Performs a linear regression on a number of points around each point
of the graph and creates a buffer from the resulting slopes, which
results in a derivative buffer. This command is similar to but
provides less noisy output than [cmd: diff], and also similar to
filtering with FFT (using [cmd: filter-fft]) and taking the derivative.
{::comment} description-end: auto-reglin {:/}

{::comment} synopsis-start: remove-spikes {:/}

### `remove-spikes` - Remove spikes {#cmd-remove-spikes}

`remove-spikes` `/factor=`_number_{:title="a floating-point number"} `/force-new=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/number=`_integer_{:title="an integer"}

Short name: `R`

  * `/factor=`_number_{:title="a floating-point number"}: threshold factor -- values: a floating-point number
  * `/force-new=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: creates a new buffer even if no spikes were removed (default: false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/number=`_integer_{:title="an integer"}: looks at that many points -- values: an integer

{::comment} synopsis-end: remove-spikes {:/}
{::comment} description-start: remove-spikes {:/}

Removes spikes using a simple heuristic: a point is considered a
"spike" if over the `/number` points, the difference between this
point and the ones next to it are larger than `/factor` times the
other differences in the interval. This command will not create a new
buffer if not spikes were removed, unless you specify
`/force-new=true`, in which case the buffer is duplicated; this is
useful for scripting, when you need a reproducible number of created
buffers, regardless of whether spikes are present or not.
{::comment} description-end: remove-spikes {:/}

{::comment} synopsis-start: downsample {:/}

### `downsample` - Downsample {#cmd-downsample}

`downsample` `/factor=`_integer_{:title="an integer"}

  * `/factor=`_integer_{:title="an integer"}: Downsampling factor -- values: an integer

{::comment} synopsis-end: downsample {:/}
{::comment} description-start: downsample {:/}
Creates a buffer with about _factor_ times less points than the
original buffer (default 10 times less) by averaging the original X
and Y values in groups of _factor_. This command averages the other
columns too. 
{::comment} description-end: downsample {:/}


{::comment} synopsis-start: baseline {:/}

### `baseline` - Baseline {#cmd-baseline}

`baseline` **(interactive)**

Short name: `b`


{::comment} synopsis-end: baseline {:/}
{::comment} description-start: baseline {:/}
Draw a baseline by placing markers on the curve using the mouse (or
off the curve, after using key `o`). Baseline is computing using one
of several interpolation algorithms: C-splines, linear or polynomial
interpolation and Akima splines (the latter usually follows best the
accidents on the curve). Cycle between the various schemes by hitting
`t`.

It is possible to leave saving not the interpolated data, but just the
interpolation "nodes" (ie the big dots), by pushing the `p`
key. This has two advantages: first, one can load nodes from a buffer
by hitting the `L` key and providing the buffer number (or just their
X value by hitting `l`). Second, if one has the nodes and just the X
values, one can generate the interpolated data using [cmd: interpolate].

The area between the baseline and the curve is displayed in the
terminal. If the dataset has a meta-data named `sr`, it is taken as a
scan rate (as in cyclic voltammetry), and the charge is displayed too.

{::comment} description-end: baseline {:/}


{::comment} synopsis-start: interpolate {:/}

### `interpolate` - Interpolate {#cmd-interpolate}

`interpolate` _xvalues_{:title="the number of a buffer in the stack"} _nodes_{:title="the number of a buffer in the stack"} `/type=`_choice_{:title="one of: `akima`, `linear`, `polynomial`, `spline`"}

  * _xvalues_{:title="the number of a buffer in the stack"}: Buffer serving as base for X values -- values: the number of a buffer in the stack
  * _nodes_{:title="the number of a buffer in the stack"}: Buffer containing the nodes X/Y values -- values: the number of a buffer in the stack
  * `/type=`_choice_{:title="one of: `akima`, `linear`, `polynomial`, `spline`"}: Interpolation type -- values: one of: `akima`, `linear`, `polynomial`, `spline`

{::comment} synopsis-end: interpolate {:/}
{::comment} description-start: interpolate {:/}
Given a buffer containing _xvalues_ and another one containing the X/Y
position of interpolation nodes saved using `p` from within
[cmd: baseline], this command regenerates the interpolated values, for the
given X values.

Through this approach, one can draw a baseline, save the points,
generate the baseline-subtracted data using [cmd: interpolate] from
within a script. This has the advantage that one can always have a
close look at the quality of the baseline, and tweak it if need be.
{::comment} description-end: interpolate {:/}

{::comment} synopsis-start: catalytic-baseline {:/}

### `catalytic-baseline` - Catalytic baseline {#cmd-catalytic-baseline}

`catalytic-baseline` **(interactive)**

Short name: `B`


{::comment} synopsis-end: catalytic-baseline {:/}
{::comment} description-start: catalytic-baseline {:/}
Draws a so-called "catalytic" baseline. There are several types of
baselines, but they all share the following features:

  * they are defined by 4 points
  * the first two points correspond to points where the baseline
    sticks to the data
  * the last two points give a "direction"

There are two baselines implemented for now:

  * a cubic baseline, that goes through the first two points and is
    parallel to the slope of the last two
  * an exponential baseline, that goes through the first two points
    and has the same ratio as the data for the last two points

{::comment} description-end: catalytic-baseline {:/}


{::comment} synopsis-start: solve {:/}

### `solve` - Solves an equation {#cmd-solve}

`solve` _formula_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/iterations=`_integer_{:title="an integer"} `/max=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/min=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/prec-absolute=`_number_{:title="a floating-point number"} `/prec-relative=`_number_{:title="a floating-point number"}

  * _formula_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: An expression of the y variable -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/iterations=`_integer_{:title="an integer"}: Maximum number of iterations before giving up -- values: an integer
  * `/max=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: An expression giving the upper boundary for dichotomy approaches -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/min=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: An expression giving the lower boundary for dichotomy approaches -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/prec-absolute=`_number_{:title="a floating-point number"}: absolute precision required -- values: a floating-point number
  * `/prec-relative=`_number_{:title="a floating-point number"}: relative precision required -- values: a floating-point number

{::comment} synopsis-end: solve {:/}
{::comment} description-start: solve {:/}
Solves an equation on $$y$$ on the current buffer. For instance, 

~~~ 
QSoas> solve y**2-x
~~~

solves for $$y$$ the equation $$y^2 - x = 0$$.

By default, the algorithm used is an iterative process starting from
the current value of $$y$$ (i.e. the value before the command
starts). You can use a dichotomy approch by specifying upper and lower
bounds using the `/min=` and `/max=` options:

~~~ 
QSoas> solve y**2-x /min=0 /max=x
~~~

{::comment} description-end: solve {:/}


{::comment} synopsis-start: auto-correlation {:/}

### `auto-correlation` - Auto-correlation {#cmd-auto-correlation}

`auto-correlation` 

Short name: `ac`


{::comment} synopsis-end: auto-correlation {:/}
{::comment} description-start: auto-correlation {:/}
Computes the auto-correlation function of the data, using FFT.
{::comment} description-end: auto-correlation {:/}
{::comment} synopsis-start: bin {:/}

### `bin` - Bin {#cmd-bin}

`bin` `/boxes=`_integer_{:title="an integer"} `/column=`_column_{:title="the [number/name of a column](#column-names) in a buffer"} `/log=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/norm=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/weight=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}

  * `/boxes=`_integer_{:title="an integer"}:  -- values: an integer
  * `/column=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}:  -- values: the [number/name of a column](#column-names) in a buffer
  * `/log=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}:  -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/norm=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}:  -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/weight=`_column_{:title="the [number/name of a column](#column-names) in a buffer"}:  -- values: the [number/name of a column](#column-names) in a buffer

{::comment} synopsis-end: bin {:/}
{::comment} description-start: bin {:/}
Creates an histogram by binning the Y values (or the values of the
column given by the `/column` option, see [above](#column-names))
into various boxes (whose number can be controlled using the `/boxes`
option). The new buffer has for X values the center of the boxes and
as Y values the number of data points that were in the boxes.

By default, all original points have a weight of 1. You can specify a
column number using the `/weight=` option that contains the weight of
each point.
{::comment} description-end: bin {:/}


# Segments {#segments}

It is possible to split a buffer into logical segments without changing
the contents of the buffer. The position of the segment
boundaries are marked by a vertical line. They can be used for
different purposes: for 
[segment-by-segment operations](#buffer-operations), 
step-by-step film loss correction
(using [cmd: film-loss]) or buffer splitting 
(using [cmd: segments-chop]).

Segments can be detected using
[cmd: find-steps], or set manually using
[cmd: set-segments] or [cmd: chop].

{::comment} synopsis-start: find-steps {:/}

### `find-steps` - Find steps {#cmd-find-steps}

`find-steps` `/average=`_integer_{:title="an integer"} `/set-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/threshold=`_number_{:title="a floating-point number"}

  * `/average=`_integer_{:title="an integer"}: Average over that many points -- values: an integer
  * `/set-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Whether or not to set the dataset segments -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/threshold=`_number_{:title="a floating-point number"}: Detection threshold -- values: a floating-point number

{::comment} synopsis-end: find-steps {:/}
{::comment} description-start: find-steps {:/}
This function detects "jumps" in the data (such as potential changes
in a chronoamperometry experiment, for instance), and display them
both to the terminal output and on the data display. 

By default, this function only shows the segments it finds, but if the
option `/set-segments` is on, the segments are set to that found by
`find-steps` (removing the ones previously there).
{::comment} description-end: find-steps {:/}

{::comment} synopsis-start: set-segments {:/}

### `set-segments` - Set segments {#cmd-set-segments}

`set-segments` **(interactive)**


{::comment} synopsis-end: set-segments {:/}
{::comment} description-start: set-segments {:/}
Interactively prompts for the addition/removal of segments. A left
click adds a segment where the mouse is, while a right click removes
the closest segment.
{::comment} description-end: set-segments {:/}

{::comment} synopsis-start: segments-chop {:/}

### `segments-chop` - Chop into segments {#cmd-segments-chop}

`segments-chop` `/flags=`_words_{:title="several words, separated by ','"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}

  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`

{::comment} synopsis-end: segments-chop {:/}
{::comment} description-start: segments-chop {:/}

Cuts the buffer into several ones based on the segments defined in the
current buffer. This way, the effect of a [cmd: chop]
`/set-segment=true` followed by `segments-chop` is the same as the
`chop` without `/set-segment=true`.

{::comment} description-end: segments-chop {:/}
{::comment} synopsis-start: film-loss {:/}

### `film-loss` - Film loss {#cmd-film-loss}

`film-loss` **(interactive)**


{::comment} synopsis-end: film-loss {:/}
{::comment} description-start: film-loss {:/}
Applies stepwise film loss correction (in the spirit of the $$K_m$$
experiments in [Fourmond _et al_, **Anal. Chem.**,
*2009*](http://dx.doi.org/10.1021/ac8025702)). For that, the current
buffer must be separated into segments, using
[cmd: set-segments], for instance. `QSoas` then zooms on
the first segment. Right and left clicking around the final linear
decay will set the value of the film loss rate constant for this
step. Push space to switch to the next step, and when you have done
everything, push `q` to obtain the corrected data.
{::comment} description-end: film-loss {:/}



# Operations involving several buffers {#buffer-operations}

It is possible to combine several buffers into one by applying
mathematical operations (subtraction, division and the like). Each of
these processes involve matching a data point of a buffer to a data point
of another one. There are two ways to do that, chosen by the
`/mode` option:


 * with `/mode=xvalues`, the default, uses the values of X (ie the
   closest X value is picked). **Warning** this will work properly
   for buffers with several times the same X values,
   like cyclic voltammograms.
 * with `/mode=indices`, points are matched on a one-to-one basis, ie
   point 1 of buffer 1 to point 1 of buffer 2, irrespective of the X
   values.

In addition to that, the operations can make use of the segments
defined on each buffer (see [cmd: find-steps] and
[cmd: set-segments]). If segments are defined and
`/use-segments=true`, then the operations are applied
segment-by-segment, with the first point of each segment matching the
corresponding point in the other buffer. This mode is suited to
combine two buffers that are divided into logical bits (such as
chronoamperograms with steps at different potentials) whose exact
details (beginnings and duration of the steps) vary a a little.



{::comment} synopsis-start: subtract {:/}

### `subtract` - Subtract {#cmd-subtract}

`subtract` _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/mode=`_choice_{:title="one of: `indices`, `xvalues`"} `/use-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

Short name: `S`

  * _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: All buffers -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/mode=`_choice_{:title="one of: `indices`, `xvalues`"}: Whether operations try to match x values or indices -- values: one of: `indices`, `xvalues`
  * `/use-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, operations are performed segment-by-segment -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: subtract {:/}
{::comment} description-start: subtract {:/}
Subtracts the last buffer from all the other ones (there can be more
than one _first_ buffer). Useful for standard baseline removal.
{::comment} description-end: subtract {:/}

{::comment} synopsis-start: div {:/}

### `div` - Divide {#cmd-div}

`div` _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/mode=`_choice_{:title="one of: `indices`, `xvalues`"} `/use-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: All buffers -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/mode=`_choice_{:title="one of: `indices`, `xvalues`"}: Whether operations try to match x values or indices -- values: one of: `indices`, `xvalues`
  * `/use-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, operations are performed segment-by-segment -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: div {:/}
{::comment} description-start: div {:/}
Divides all buffers by the last one. Just as [cmd: subtract] is useful
to remove one of a multicomponent response when they are *additive*,
[cmd: div] can be used to remove one of the components when they are
*multiplicative*, like film loss in protein film voltammetry experiments, see
[Fourmond _et al_, **Anal. Chem.** 2009](http://dx.doi.org/10.1021/ac8025702)
for more information.
{::comment} description-end: div {:/}

{::comment} synopsis-start: add {:/}

### `add` - Add {#cmd-add}

`add` _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/mode=`_choice_{:title="one of: `indices`, `xvalues`"} `/use-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: Buffers -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/mode=`_choice_{:title="one of: `indices`, `xvalues`"}: Whether operations try to match x values or indices -- values: one of: `indices`, `xvalues`
  * `/use-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, operations are performed segment-by-segment -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: add {:/}
{::comment} description-start: add {:/}
Adds all the given _buffers_ and pushes the result (a single dataset).
{::comment} description-end: add {:/}

{::comment} synopsis-start: multiply {:/}

### `multiply` - Multiply {#cmd-multiply}

`multiply` _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/mode=`_choice_{:title="one of: `indices`, `xvalues`"} `/use-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

Short name: `mul`

  * _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: Buffers -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/mode=`_choice_{:title="one of: `indices`, `xvalues`"}: Whether operations try to match x values or indices -- values: one of: `indices`, `xvalues`
  * `/use-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, operations are performed segment-by-segment -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: multiply {:/}
{::comment} description-start: multiply {:/}
Multiplies all the given _buffers_ and pushes the result (a single dataset).
{::comment} description-end: multiply {:/}

{::comment} synopsis-start: average {:/}

### `average` - Average {#cmd-average}

`average` _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/count=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/mode=`_choice_{:title="one of: `indices`, `xvalues`"} `/split=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/use-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: Buffers -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/count=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, a last column contains the number of averaged points for each value -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/mode=`_choice_{:title="one of: `indices`, `xvalues`"}: Whether operations try to match x values or indices -- values: one of: `indices`, `xvalues`
  * `/split=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, buffers are automatically split into monotonic parts before averaging. -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/use-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, operations are performed segment-by-segment -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: average {:/}
{::comment} description-start: average {:/}
In a manner similar to [cmd: subtract] and
[cmd: div], the `average` command averages all the
buffers given into one, with the same segment-by-segment capacities.

An additional feature of `average` is its ability to first
split the buffers into monotonic parts before averaging (when `/split`
is on). That is the default when only one buffer is
provided. This proves useful for averaging the forward and return scan
in a cyclic voltammogram.
{::comment} description-end: average {:/}

{::comment} synopsis-start: merge {:/}

### `merge` - Merge buffers on X values {#cmd-merge}

`merge` _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/mode=`_choice_{:title="one of: `indices`, `xvalues`"} `/use-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: All buffers -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/mode=`_choice_{:title="one of: `indices`, `xvalues`"}: Whether operations try to match x values or indices -- values: one of: `indices`, `xvalues`
  * `/use-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, operations are performed segment-by-segment -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: merge {:/}
{::comment} description-start: merge {:/}
Merges the second buffer with the first one, and keep Y of the second
as a function of Y of the first. The algorithm for finding which point
in the second corresponds to a given one in the first is the same as
that of the other commands in this section ([cmd: subtract],
[cmd: div]...). 

If more than two buffers are specified, the last one gets merged with
each of those before.
{::comment} description-end: merge {:/}

{::comment} synopsis-start: contract {:/}

### `contract` - Group buffers on X values {#cmd-contract}

`contract` _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/mode=`_choice_{:title="one of: `indices`, `xvalues`"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/use-columns=`_columns_{:title="a comma-separated list of [columns names](#column-names)"} `/use-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _buffers..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: Buffers to contract -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/mode=`_choice_{:title="one of: `indices`, `xvalues`"}: Whether operations try to match x values or indices -- values: one of: `indices`, `xvalues`
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the perpendicular coordinate from meta-data -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/use-columns=`_columns_{:title="a comma-separated list of [columns names](#column-names)"}: if specified, uses only the given columns for the contraction -- values: a comma-separated list of [columns names](#column-names)
  * `/use-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, operations are performed segment-by-segment -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: contract {:/}
{::comment} description-start: contract {:/}
[cmd: contract] does the reverse of [cmd: expand], ie it regroups in
one buffer several values of Y that run against the same values of
X. The result is a buffer that contains as many Y columns as the total
of Y columns of all the arguments. X matching between the buffers is
done as for the other commands in this section ([cmd: div] or
[cmd: subtract]).

You can specify a column list using `/use-columns` (see
[above](#column-names) for more information about column lists), in
which case the other columns from the buffers are ignored.
{::comment} description-end: contract {:/}

# Data inspection facilities

## Options for data output {#data-output}

The commands below are able to compute a number of quantities from the
datasets they work on, such as various statistics, the position of
peaks, and so on. `QSoas` provides several ways to store and work with
these data.

### Saving to the output file

The "traditional" way is to store the data in the [output
file](#output-file). They end up as TAB-separated data, with an
generally explicit header, and the name of the buffer the data is
extracted from on the first column. When outputting to the [output
file](#output-file), you can force the writing of extra columns
containing some [meta-data](#meta-data) by listing them using the
`/meta-data=` option.

### Saving as meta-data

It is also possible to use the `/set-meta=` option to "decorate" the
buffers with the results of the command, as meta-data. For instance:
running

~~~
QSoas> stats /set-meta=y_min
~~~

sets the `y_min` meta-data to the minimum value of the $$y$$ column of
the dataset. It is also possible to select several meta-data,
separating them using commas, or even change their name, such as

~~~
QSoas> stats /set-meta=y_min->my_interesting_meta
~~~

which saves also the minimum of the $$y$$ column as meta-data, but
this time under the name `my_interesting_meta`.

You can save all the data in one go under their original name using
`/set-meta=*`.

### Combining `/accumulate=` and `pop` to create new datasets on the fly

It is now possible to generate a data from scratch using the
`/accumulate=` option. This option takes an ordered list of output
values (and, possibly meta-data), and accumulates the values to a
"hidden" buffer, until the command [cmd: pop] is called. For instance,
running on different buffers the following command:

~~~
QSoas> 1 /output=false /accumulate=x,y,area
~~~

will populate a dataset with 3 columns, containing respectively the
X position, Y position, and area of the major peak of the buffers
(with possibly extra columns for meta-data).

This command is typically used to parse a whole series of buffers
using [cmd: run-for-each] or [cmd: run-for-datasets].



{::comment} synopsis-start: pop {:/}

### `pop` - Pop accumulator {#cmd-pop}

`pop` `/drop=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * `/drop=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Drop the accumulator instead of pushing it on the stack -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: pop {:/}
{::comment} description-start: pop {:/}
A number of commands can accumulate data to a "hidden" buffer using
the `/accumulate=` options. The [cmd: pop] command takes that buffer,
pushes it to the stack, and clears the "hidden" buffer.

With `/drop=yes`, the "hidden" buffer is just clear, it is not pushed
onto the stack.
{::comment} description-end: pop {:/}



{::comment} synopsis-start: find-peaks {:/}

### `find-peaks` - Find peaks {#cmd-find-peaks}

`find-peaks` `/accumulate=`_words_{:title="several words, separated by ','"} `/include-borders=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/meta=`_words_{:title="several words, separated by ','"} `/output=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/peaks=`_integer_{:title="an integer"} `/set-meta=`_words_{:title="several words, separated by ','"} `/which=`_choice_{:title="one of: `both`, `max`, `min`"} `/window=`_integer_{:title="an integer"}

  * `/accumulate=`_words_{:title="several words, separated by ','"}: accumulate the given data into a dataset -- values: several words, separated by ','
  * `/include-borders=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to include borders -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/meta=`_words_{:title="several words, separated by ','"}: when writing to output file, also prints the listed meta-data -- values: several words, separated by ','
  * `/output=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to write data to output file (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/peaks=`_integer_{:title="an integer"}: Display only that many peaks (by order of intensity) -- values: an integer
  * `/set-meta=`_words_{:title="several words, separated by ','"}: saves the results of the command as meta-data rather than/in addition to saving to the output file -- values: several words, separated by ','
  * `/which=`_choice_{:title="one of: `both`, `max`, `min`"}: selects which of minima and/or maxima to find -- values: one of: `both`, `max`, `min`
  * `/window=`_integer_{:title="an integer"}: width of the window -- values: an integer

{::comment} synopsis-end: find-peaks {:/}
{::comment} description-start: find-peaks {:/}
Find all the peaks of the current dataset. Peaks are local extrema
over a window of a number of points given by `/window` (8 by default).
If `/output` is on, then the peak data is written to the output
file. This function will find many peaks on noisy data, you can limit
to the first _n_ ones by using `/peaks=`_n_ (peaks are ranked by
amplitude with respect to the average of the buffer).

By default, if a point at either end of the dataset is an extremum, it
is not included, unless you use `/include-borders=true`.

Peaks are indicated on the buffer using lines, and their position is
written to the terminal. In addition, if `/output` is on (off by
default), they are also written to the [output file](#output-file).
{::comment} description-end: find-peaks {:/}

{::comment} synopsis-start: echem-peaks {:/}

### `echem-peaks` - Find peaks pairs {#cmd-echem-peaks}

`echem-peaks` `/accumulate=`_words_{:title="several words, separated by ','"} `/include-borders=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/meta=`_words_{:title="several words, separated by ','"} `/output=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/pairs=`_integer_{:title="an integer"} `/set-meta=`_words_{:title="several words, separated by ','"} `/which=`_choice_{:title="one of: `both`, `max`, `min`"} `/window=`_integer_{:title="an integer"}

  * `/accumulate=`_words_{:title="several words, separated by ','"}: accumulate the given data into a dataset -- values: several words, separated by ','
  * `/include-borders=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to include borders -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/meta=`_words_{:title="several words, separated by ','"}: when writing to output file, also prints the listed meta-data -- values: several words, separated by ','
  * `/output=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to write data to output file (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/pairs=`_integer_{:title="an integer"}: Display (and output) only that many peak pairs (by order of intensity) -- values: an integer
  * `/set-meta=`_words_{:title="several words, separated by ','"}: saves the results of the command as meta-data rather than/in addition to saving to the output file -- values: several words, separated by ','
  * `/which=`_choice_{:title="one of: `both`, `max`, `min`"}: selects which of minima and/or maxima to find -- values: one of: `both`, `max`, `min`
  * `/window=`_integer_{:title="an integer"}: width of the window -- values: an integer

{::comment} synopsis-end: echem-peaks {:/}
{::comment} description-start: echem-peaks {:/}
This function tries to find "pairs" of peaks that may be the anodic
and cathodic peaks of a redox couple, and outputs useful information
about those.
{::comment} description-end: echem-peaks {:/}

{::comment} synopsis-start: 1 {:/}

### `1` - Find peak {#cmd-1}

`1` `/accumulate=`_words_{:title="several words, separated by ','"} `/include-borders=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/meta=`_words_{:title="several words, separated by ','"} `/output=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/set-meta=`_words_{:title="several words, separated by ','"} `/which=`_choice_{:title="one of: `both`, `max`, `min`"} `/window=`_integer_{:title="an integer"}

  * `/accumulate=`_words_{:title="several words, separated by ','"}: accumulate the given data into a dataset -- values: several words, separated by ','
  * `/include-borders=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to include borders -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/meta=`_words_{:title="several words, separated by ','"}: when writing to output file, also prints the listed meta-data -- values: several words, separated by ','
  * `/output=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to write data to output file (defaults to true) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/set-meta=`_words_{:title="several words, separated by ','"}: saves the results of the command as meta-data rather than/in addition to saving to the output file -- values: several words, separated by ','
  * `/which=`_choice_{:title="one of: `both`, `max`, `min`"}: selects which of minima and/or maxima to find -- values: one of: `both`, `max`, `min`
  * `/window=`_integer_{:title="an integer"}: width of the window -- values: an integer

{::comment} synopsis-end: 1 {:/}
{::comment} description-start: 1 {:/}
Equivalent to 

~~~~
QSoas> find-peaks /peaks=1 /output=true
~~~~
{::comment} description-end: 1 {:/}

{::comment} synopsis-start: 2 {:/}

### `2` - Find two peaks {#cmd-2}

`2` `/accumulate=`_words_{:title="several words, separated by ','"} `/include-borders=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/meta=`_words_{:title="several words, separated by ','"} `/output=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/set-meta=`_words_{:title="several words, separated by ','"} `/which=`_choice_{:title="one of: `both`, `max`, `min`"} `/window=`_integer_{:title="an integer"}

  * `/accumulate=`_words_{:title="several words, separated by ','"}: accumulate the given data into a dataset -- values: several words, separated by ','
  * `/include-borders=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to include borders -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/meta=`_words_{:title="several words, separated by ','"}: when writing to output file, also prints the listed meta-data -- values: several words, separated by ','
  * `/output=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to write data to output file (defaults to true) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/set-meta=`_words_{:title="several words, separated by ','"}: saves the results of the command as meta-data rather than/in addition to saving to the output file -- values: several words, separated by ','
  * `/which=`_choice_{:title="one of: `both`, `max`, `min`"}: selects which of minima and/or maxima to find -- values: one of: `both`, `max`, `min`
  * `/window=`_integer_{:title="an integer"}: width of the window -- values: an integer

{::comment} synopsis-end: 2 {:/}
{::comment} description-start: 2 {:/}
Equivalent to 

~~~~
QSoas> find-peaks /peaks=2 /output=true
~~~~
{::comment} description-end: 2 {:/}


{::comment} synopsis-start: stats {:/}

### `stats` - Statistics {#cmd-stats}

`stats` `/accumulate=`_words_{:title="several words, separated by ','"} `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/meta=`_words_{:title="several words, separated by ','"} `/output=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/set-meta=`_words_{:title="several words, separated by ','"} `/stats=`_stats-names_{:title="one or more name of statistics (as displayed by stats), separated by `,`."} `/use-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * `/accumulate=`_words_{:title="several words, separated by ','"}: accumulate the given data into a dataset -- values: several words, separated by ','
  * `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} (default option): buffers to work on -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/meta=`_words_{:title="several words, separated by ','"}: when writing to output file, also prints the listed meta-data -- values: several words, separated by ','
  * `/output=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to write data to output file (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/set-meta=`_words_{:title="several words, separated by ','"}: saves the results of the command as meta-data rather than/in addition to saving to the output file -- values: several words, separated by ','
  * `/stats=`_stats-names_{:title="one or more name of statistics (as displayed by stats), separated by `,`."}: writes only the given stats -- values: one or more name of statistics (as displayed by stats), separated by `,`.
  * `/use-segments=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: makes statistics segment by segment (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: stats {:/}
{::comment} description-start: stats {:/}
`stats` displays various statistics about the current buffer (or the one
specified by the `/buffer` option). The following statistics are available:
{::comment} statistics-start {:/}

* `buffer`, `rows`, `columns`, `segments`: the buffer name, and the row, column and segment counts.
* `_sum`, `_average`, `_var`, `_stddev`: the sum, the average, the variance and the standard deviation of the values of the column.
* `_first`, `_last`: the first and last values of the column.
* `_min`, `_max`: the minimum and maximum values of the column.
* `_norm`: the norm of the column, that is $$\sqrt{\sum {x_i}^2}$$.
* `y_int`: the integral of the Y values over the X values.
* `_med`, `_q10`, `_q25`, `_q75`, `_q90`: the median, and the 10th, 25th, 75th and 90th percentiles.
* `_delta_min`, `_delta_max`: the min and max values of the difference between two successive values.
* `y_a`, `y_b`: the linear regression coefficients of the Y column over X: `a` is the slope and `b` the value at 0.
{::comment} statistics-end {:/}

In this list, the statistics that start with `_` are available for all columns
(for instance `x_min`, `y_min`, `y2_min`, etc...), the ones that start
with `y_` are only available for Y columns (such as `y_int`, `y2_int`,
etc...), and the other ones are global (`buffer`, `rows`, etc.).

These statistics are also available in [Ruby code](#ruby) with the
name `$stats`, such as `$stats.x_min`.

Statistics can be written to the output file with `/output=true`. If
you specify `/use-segments=true`, the statistics are also displayed
segment-by-segment (and written to the output file if
`/output=true`). If you want some meta-data to be written to the
output file together with the statistics, provide them as a
comma-separated list to the `/meta` option, or, alternatively, use the
`/meta` option of the [cmd: output] command. See more about that
[above](#data-output).

It is possible to run [cmd: stats] on several buffers by using the
`/buffers=` option.


{::comment} description-end: stats {:/}

{::comment} synopsis-start: cursor {:/}

### `cursor` - Cursor {#cmd-cursor}

`cursor` **(interactive)**

Short name: `cu`


{::comment} synopsis-end: cursor {:/}
{::comment} description-start: cursor {:/}
Starts an interative mode (which you can end by pression `q` or
Escape), in which you can position a cursor by left-clicking on the
curve, to know its exact X and Y positions.

Using the right mouse button, it is also possible to position a
reference point. After that, the command also shows the difference and
the ratios in X,Y coordinates between the cursor and the reference
point.

Cursor positions can be saved to the output file by pressing the space
bar.

Hitting `u` subtracts the Y value of the current point to the Y values
of the buffer and returns. Hitting `v` divides by the current Y value.

{::comment} description-end: cursor {:/}

{::comment} synopsis-start: reglin {:/}

### `reglin` - Linear regression {#cmd-reglin}

`reglin` **(interactive)**

Short name: `reg`


{::comment} synopsis-end: reglin {:/}
{::comment} description-start: reglin {:/}
Linear regression. Using the left and right mouse buttons, select a
region whose slope is of interest. The terminal shows the $$a$$ and $$b$$
parameters (the equation is $$ax + b$$),
and also the effective first order rate constant, ie the
$$k_{eff}$$ parameter of the equation

$$ f_0 \exp \left[-k_{eff} \, (x - x_0) \right] $$

whose first-order expansion gives the same linear approximation, ie:

$$ f_0 \times \left[1 - k_{eff} (x - x_0))\right] = a x + b$$

Using the space bar it is possible to save the values displayed in the
terminal to the [output file](#output-file).
{::comment} description-end: reglin {:/}




# Fits {#fits}

QSoas was designed with a particular emphasis on fitting data. It
allows complex fits, and in particular multi-buffer fits, when
functions with shared parameters are fit to different buffers. Fits
fall into two different categories:

 * mono-buffer fits, ie fits that apply to one buffer, but that can be
   applied to several buffers at the same time with shared parameters
 * multi-buffer fits, ie fits that need at least two buffers to work

Fits can be used through several commands: for all fits there are a
`mfit-`_fit_ and a `sim-`_fit_ command, and for mono-buffer fits,
there is a `fit-`_fit_ in addition.

 * The `fit-` command fits a single buffer, when the fit allows
   that. It takes no argument
 * The `mfit-` command fits several buffers at the same time. It takes
   the numbers of the buffers it will work on.
 * The `sim-` command takes a saved parameters file and a series of
   buffers, and pushes the data computed from the parameters on the
   stack using the X values of the buffers given as arguments (their Y
   values are not used).

All fits commands share the following options:

 * With the `/extra-parameters` option, on defines additional
   parameters to the fit, that can be used to define parameters by
   formulas
 * Passing the name of a saved parameters file to the `/parameters`
   option preloads the given parameters at the beginning of the fit.
 * The `/set-from-meta` option makes it possible to set a value of
   parameters from meta-data. For instance, running a fit with
   `/set-from-meta=v=sr` will set the value of the parameter `v` to
   the value of the meta-data `sr` (if present). Specify more of those
   by separating them with commas.
 * The `/debug` option is for debugging fits or fit engines. It takes
   a debug level: 0 (no debug info), 1 and 2.
 * Using the `/engine`, one can pre-select the [fit
   engine](#fit-engines) for fitting (exactly like choosing it in the
   dialog box)
 * The `/window-title=` option makes it possible to select the title of
   the fit window, which can be useful if you're running several fits
   at the same time on the same computer.

The `sim-` commands additionally take the following options:

 * `/operation=` which tells `sim-` which operation to make: `compute`
   for just computing the fit function (the default operation),
   `reexport`, to reexport the values of the fit parameters with the
   options to the output file, `jacobian` to push the jacobian of
   the fit to the stack, and `annotate`, that just annotates the
   buffers by adding the values of the fit parameters as
   [meta-data](#meta-data).
 * `/override=`, which provides a possibility to change the values of
   the parameters with respect to the values read from the parameter
   file. The syntax is a comma or colon-separated list of assignments
   of the form `parameter=value` or `parameter[#buffer]=value`. 


In addition to these commands, QSoas provides commands to combine fits
together, to fit derivatives of the signals, and to define fits with
distributions of parameters.

The fit engines now feature an "expert", command-line, mode, which
makes it possible to run fits automatically, to set parameters using
expressions, to save "trajectories", i.e. series of starting
parameters -> ending parameters, and to explore the parameter space
using various explorers. These features are accessible through the
following options of the `fit-` and `mfit-` commands:

 * `/expert=true` activates the expert mode and allows typing commands;
 * `/script=` makes it possible to run a script file at fit startup
   time;
 * `/arg1=`, `/arg2=` and `/arg3=` can be used to give arguments to
   the script specified by `/script=`.

The commands for the command-line interface are described
[below](#fit-commands).


## Fit engines {#fit-engines}

QSoas provides a number of fit engines with different strengths and
weaknesses. Most are based on a Levenberg-Marquardt solver, with a few
variants that make some of them more useful in certain situations. The
rule is, if you are unhappy with how a particular fit engine
converges, try another one !

 * `odrpack` is a very good Levenberg-Marquardt fit engine based on
   the [`ODRPACK`](http://www.netlib.org/odrpack/) netlib package. It
   is the default (and most often the best) for fitting a small number
   of buffers.
 * `lmder` and `lmsder` are the Levenberg-Marquardt fit engines built
   into the [GNU Scientific
   Library](https://www.gnu.org/software/gsl/).
 * `qsoas` and `multi` are the own Levenberg-Marquardt solvers of
   QSoas, they are in general significantly faster than the other
   ones, and the `multi` fit engine is optimized for massively
   multi-buffer fits. Don't use anything else than `multi` if you have
   more than 20 buffers with some parameters (but not all) global.
 * `simplex` is a naive implementation of the "Simplex" minimization
   problem. It is much faster than all the other ones, but its
   convergence is sometimes not very good. You may want to refine the
   fit using one of the Levenberg-Marquardt engines once you have
   found a suitable minimum using this engine.
 * `pso` is a naive implementation of the "Particle Swarm" optimizer.
   


## Subfunctions

Some fits support displaying "sub-functions": for instance, "peak
fits" like [cmd: fit-gaussian] display each individual component in
color if there are more than one. They are documented in each
individual fitting function when applicable. They are not always
displayed by default, as in some cases, such as
[cmd: fit-exponential-decay ], it generally makes the display
less clear.

To show/hide subfunctions, use "Toggle subfunction display" from
within the "Data..." submenu in the fit dialog. If that item is
absent, then the fit does not support subfunctions.

You can also push the individual components to the stack for further
manipulation using "Data..."/"Push all subfunctions".

## Parameters restrictions

Some fits implement restrictions on the values that can be taken by
parameters. For instance, the time constants for the
[fit: exponential-decay] cannot be negative, neither for the starting
parameters, nor for any intermediate (iteration, computation of
derivatives).

This is done so that the fit algorithm does not go into directions
which are assured not to give relevant parameters.


## Fit manipulations {#fit-manipulations}

`QSoas` provide a series of commands to create new fits from other
fits:

  * to combine several fits together using a mathematical formula, use
    [cmd: combine-fits]
  * to fit the derivative of a fit function (possibly together with
    the original function), use [cmd: define-derived-fit]
  * to fit a function with a distribution of one of the parameters,
    use [cmd: define-distribution-fit]
  * to change the parameters of a fit and impose additional
    restrictions on them, use [cmd: reparametrize-fit]

{::comment} synopsis-start: combine-fits {:/}

### `combine-fits` - Combine fits {#cmd-combine-fits}

`combine-fits` _name_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} _formula_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} _fits..._{:title="a series of names of a fit (without the fit- prefix), separated by spaces"} `/redefine=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _name_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: name of the new fit -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * _formula_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: how to combine the various fits -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * _fits..._{:title="a series of names of a fit (without the fit- prefix), separated by spaces"}: the fits to combine together -- values: a series of names of a fit (without the fit- prefix), separated by spaces
  * `/redefine=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If the new fit already exists, redefines it -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: combine-fits {:/}
{::comment} description-start: combine-fits {:/}
Creates a new fit named _name_ based on other fits, combined through a
formula. The formula use `y1`, `y2` and so on to refer to the
fits. You specify the fit names by removing the `fit-` or `mfit-`
prefix. For instance, to fit a sum of lorentzians and gaussians, one
just has to do:

~~~
QSoas> combine-fits lg 'y1 + y2' lorentzian gaussian
~~~

This creates a new fit, `lg`, and hence three new commands, `fit-lg`,
`mfit-lg` and `sim-lg`. The fit is a sum of a
[lorentzian](#cmd-fit-lorentzian) fit (`y1`) and a
[gaussian](#cmd-fit-gaussian) fit (`y2`). The new fit shares the
options of all the original fits.

The newly-defined fit only lasts for the current session, if you need
something more persistent, consider setting up a startup file
using [cmd: startup-files].

If you try to redefine an existing fit, the command will stop, unless
you use `/redefine=true` (not by default), in which case existing
(custom) fits are silently redefined. You cannot redefine built-in fits.
{::comment} description-end: combine-fits {:/}

{::comment} synopsis-start: define-derived-fit {:/}

### `define-derived-fit` - Create a derived fit {#cmd-define-derived-fit}

`define-derived-fit` _existing-fit_{:title="the name of a fit (without the fit- prefix)"} `/mode=`_choice_{:title="one of: `combined`, `deriv-only`, `separated`"} `/redefine=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _existing-fit_{:title="the name of a fit (without the fit- prefix)"}: name of the fit to make a derived fit of -- values: the name of a fit (without the fit- prefix)
  * `/mode=`_choice_{:title="one of: `combined`, `deriv-only`, `separated`"}: Whether one fits only the derivative, both the derivative and the original data together or separated -- values: one of: `combined`, `deriv-only`, `separated`
  * `/redefine=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Does not error out if the fit already exists -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: define-derived-fit {:/}
{::comment} description-start: define-derived-fit {:/}
Defines new fit commands based on _existing-fit_ (without the `fit-`
prefix). It fits:

  * only the derivative if `/mode=deriv-only`, in which case is is
    named `fit-deriv-only-`_existing-fit_;
  * a multibuffer fit for the original function in one buffer 
    and the derivative in the second if `/mode=separated` (the default
    mode), in which case the fit is named `mfit-deriv-`_existing-fit_;
  * both the original function and the derivative in a single buffer
    (the derivative is assumed to be the data after the first
    discontinuity in the X values) if `/mode=combined`, in which case
    the new fit is named `fit-deriv-combined-`_existing-fit_;

This function is explained in more details in the
[tutorial](tutorial.html#tuto-define-derived-fit).  
{::comment} description-end: define-derived-fit {:/}
{::comment} synopsis-start: define-distribution-fit {:/}

### `define-distribution-fit` - Define fit with distribution {#cmd-define-distribution-fit}

`define-distribution-fit` _name_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} _existing-fit_{:title="the name of a fit (without the fit- prefix)"} _parameter_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/distribution=`_choice_{:title="one of: `gaussian`, `log-uniform`, `lorentzian`, `uniform`"} `/redefine=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _name_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: name of the new fit -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * _existing-fit_{:title="the name of a fit (without the fit- prefix)"}: name of fit to make a derived fit from -- values: the name of a fit (without the fit- prefix)
  * _parameter_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: the parameter over which to integrate -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/distribution=`_choice_{:title="one of: `gaussian`, `log-uniform`, `lorentzian`, `uniform`"}: The default distribution -- values: one of: `gaussian`, `log-uniform`, `lorentzian`, `uniform`
  * `/redefine=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If the new fit already exists, redefines it -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: define-distribution-fit {:/}
{::comment} description-start: define-distribution-fit {:/}
Defines a new fit called _name_ based on the fit _fit_ in which the
data is the result of the integration of the original fit over a
distribution of _parameter_.

You can choose the default distribution with the  `/distribution=`
option. It is one of:

 * `gaussian`: gaussian distribution of the parameter
 * `lorentzian`: lorentzian distribution of the parameter
 * `log-uniform`: uniform probability between two values for the
   logarithm of the parameter
 * `uniform`: for a uniform probability between two values

Of course, even for theoretically infinite distributions (`gaussian`
and `lorentzian` distributions above), `QSoas` does not integrate over
the whole real axis, which is why these distributions get an extra
parameter, fixed by default, which indicates the extent of the
integration interval in dimensionless units (independent of the value
of the parameter). In principle, these values are chosen as a good
compromise between accuracy and computing time, but they can be tuned
should you need it.

The created fit commands also take a `/distribution` option with the
same meaning.

Like for [cmd: combine-fits], you cannot redefine existing fits with
this command unless `/redefine=true` is specified.


{::comment} description-end: define-distribution-fit {:/}

{::comment} synopsis-start: reparametrize-fit {:/}

### `reparametrize-fit` - Reparametrize fit {#cmd-reparametrize-fit}

`reparametrize-fit` _name_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} _fit_{:title="the name of a fit (without the fit- prefix)"} _new-parameters_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} _redefinitions..._{:title="several words, separated by ';;'"} `/conditions=`_words_{:title="several words, separated by ''"} `/redefine=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _name_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: name of the new fit -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * _fit_{:title="the name of a fit (without the fit- prefix)"}: the fit to modify -- values: the name of a fit (without the fit- prefix)
  * _new-parameters_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: Comma-separated list of new parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * _redefinitions..._{:title="several words, separated by ';;'"}: a list of redefinitions, separated by `;;` -- values: several words, separated by ';;'
  * `/conditions=`_words_{:title="several words, separated by ''"}: Additional conditions that must be fullfilled by the parameters (Ruby code) -- values: several words, separated by ''
  * `/redefine=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If the new fit already exists, redefines it -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: reparametrize-fit {:/}
{::comment} description-start: reparametrize-fit {:/}
This command makes it possible to reparametrize a fit: add new
parameters, and express old parameters as a function of other old
parameters and new ones.

For instance, to reparametrize a mono-exponential fit in terms of rate
constant rather than time constant, one can use:

~~~
QSoas> reparametrize-fit my-exp exponential-decay k_1 tau_1=1/k_1
~~~

This creates a new fit named `my-exp` (hence it creates the commands
`fit-my-exp`, `mfit-my-exp` and `sim-my-exp`), in which the parameter
`tau_1` of the [fit: exponential-decay] fit has been replaced by `k_1`
(its reciprocal).
{::comment} description-end: reparametrize-fit {:/}


## Exponential fits

There are several ways to fit exponentials to data. The simplest is 
[cmd: fit-exponential-decay], which fits a decay with an arbitrary number of exponentials to the data.

{::comment} synopsis-start: fit-exponential-decay {:/}

### `fit-exponential-decay` - Fit: Multi-exponential fits {#cmd-fit-exponential-decay}

`fit-exponential-decay` `/absolute=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/exponentials=`_integer_{:title="an integer"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/loss=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/parameters=`_file_{:title="name of a file"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/slow=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * `/absolute=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the amplitude is absolute or relative to the asymptote (defaults to true) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/exponentials=`_integer_{:title="an integer"}: Number of exponentials -- values: an integer
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/loss=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: wether the sum of exponentials should be multiplied by an exp(-kt) function (default: false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/slow=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether there is a very slow phase (that shows up as a linear change in Y against time, defaults: false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-exponential-decay {:/}
{::comment} description-start: fit-exponential-decay {:/}
Fits the formula below to the current dataset:

$$ \left(A_\infty + \sum_{i=1}^n A_i \exp(-(x - x_0)/\tau_i) + b\,
x\right) \exp (- k_{loss}(x - x_0))$$

$$b\,x$$ is only present if the `/slow` option is on, and $$k_{loss}$$
is not 0 only if `/loss` is on.  If `/relative` is on, the parameter
of the fit is $$\alpha_i$$ (defined by $$A_i = \alpha_i A_\infty$$)
rather than $$A_i$$. `/relative=true` should not be used to fit data
that tend to 0.

#### Subfunctions

Each individual exponential, with $$A_\infty$$ as asymptotic
value. The subfunctions are not displayed by default.

#### Parameters restrictions

The values of $$\tau_i$$ cannot be negative, nor can $$k_{loss}$$.


{::comment} description-end: fit-exponential-decay {:/}

{::comment} synopsis-start: mfit-exponential-decay {:/}

### `mfit-exponential-decay` - Multi fit: Multi-exponential fits {#cmd-mfit-exponential-decay}

`mfit-exponential-decay` _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/absolute=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/exponentials=`_integer_{:title="an integer"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/loss=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/slow=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/absolute=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the amplitude is absolute or relative to the asymptote (defaults to true) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/exponentials=`_integer_{:title="an integer"}: Number of exponentials -- values: an integer
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/loss=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: wether the sum of exponentials should be multiplied by an exp(-kt) function (default: false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/slow=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether there is a very slow phase (that shows up as a linear change in Y against time, defaults: false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: mfit-exponential-decay {:/}
{::comment} description-start: mfit-exponential-decay {:/}
Multi-buffer version of the
[cmd: fit-exponential-decay] fit.
{::comment} description-end: mfit-exponential-decay {:/}


{::comment} synopsis-start: sim-exponential-decay {:/}

### `sim-exponential-decay` - Simulation: Multi-exponential fits {#cmd-sim-exponential-decay}

`sim-exponential-decay` _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/absolute=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/exponentials=`_integer_{:title="an integer"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/loss=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/slow=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}

  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/absolute=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the amplitude is absolute or relative to the asymptote (defaults to true) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/exponentials=`_integer_{:title="an integer"}: Number of exponentials -- values: an integer
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/loss=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: wether the sum of exponentials should be multiplied by an exp(-kt) function (default: false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/slow=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether there is a very slow phase (that shows up as a linear change in Y against time, defaults: false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`

{::comment} synopsis-end: sim-exponential-decay {:/}
{::comment} description-start: sim-exponential-decay {:/}
Simulation command for the
[cmd: fit-exponential-decay] fit.
{::comment} description-end: sim-exponential-decay {:/}


{::comment} synopsis-start: fit-multiexp-multistep {:/}

### `fit-multiexp-multistep` - Fit: Multi-step and multi-exponential {#cmd-fit-multiexp-multistep}

`fit-multiexp-multistep` `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/exponentials=`_integer_{:title="an integer"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/independent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/parameters=`_file_{:title="name of a file"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/steps=`_integers_{:title="a comma-separated list of integers"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/exponentials=`_integer_{:title="an integer"}: Number of exponentials -- values: an integer
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/independent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Whether irreversible loss is independent on each step -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/steps=`_integers_{:title="a comma-separated list of integers"}: Step list with numbered conditions -- values: a comma-separated list of integers
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-multiexp-multistep {:/}
{::comment} description-start: fit-multiexp-multistep {:/}

This fit is an extension of the [fit: exponential-decay] fit when the
experiment consists in several steps in which the time constants are
expected to change, but some may be common to different steps. The
steps are specified using the `/steps` option. Specifying
`/steps=0,1,0` means that there are three steps, but there are only
two distinct sets of time constants, a first one (`0`, used for step 1
and 3), and a second one (`1`, used only for step 2).


In each of the steps, the formula fitted to the data is:

$$ y(t) = I^{k(j)}\left(1 - \sum_{i=1}^n \alpha^j_i \exp(-(t -
t^j_0)/\tau^{k(j)}_i) \right)\exp (- k^{k(j)}_{loss}(t - t^j_0)) \times
a_j$$

Where $$j$$ is the step number, $$k(j)$$ is the number of the
corresponding time constants, $$t^j_0$$ is the beginning of the step
$$j$$, the $$\alpha^j_i$$ are the relative amplitudes of the
exponential phases, the $$I^{k(j)}$$ are the asymptotic values of
$$y(t)$$ on each step (in the absence of film loss) and $$a_j$$
is defined recursively by $$a_0 = 1$$ and
$$a_j = a_{j-1} \exp \left(- k^{k(j-1)}_{loss}(t^j_0 - t^{j-1}_0)\right)$$.
This is done so as to keep track of film loss over the whole experiment.

#### Parameters restrictions

Like in the [fit: exponential-decay] fit, the values of $$\tau_i$$
cannot be negative, nor can the values of $$k_{loss}$$.

{::comment} description-end: fit-multiexp-multistep {:/}


{::comment} synopsis-start: mfit-multiexp-multistep {:/}

### `mfit-multiexp-multistep` - Multi fit: Multi-step and multi-exponential {#cmd-mfit-multiexp-multistep}

`mfit-multiexp-multistep` _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/exponentials=`_integer_{:title="an integer"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/independent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/steps=`_integers_{:title="a comma-separated list of integers"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/exponentials=`_integer_{:title="an integer"}: Number of exponentials -- values: an integer
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/independent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Whether irreversible loss is independent on each step -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/steps=`_integers_{:title="a comma-separated list of integers"}: Step list with numbered conditions -- values: a comma-separated list of integers
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: mfit-multiexp-multistep {:/}
{::comment} description-start: mfit-multiexp-multistep {:/}
This is the multibuffer version of the [fit: multiexp-multistep] fit.
{::comment} description-end: mfit-multiexp-multistep {:/}

{::comment} synopsis-start: sim-multiexp-multistep {:/}

### `sim-multiexp-multistep` - Simulation: Multi-step and multi-exponential {#cmd-sim-multiexp-multistep}

`sim-multiexp-multistep` _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/exponentials=`_integer_{:title="an integer"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/independent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/steps=`_integers_{:title="a comma-separated list of integers"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}

  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/exponentials=`_integer_{:title="an integer"}: Number of exponentials -- values: an integer
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/independent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Whether irreversible loss is independent on each step -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/steps=`_integers_{:title="a comma-separated list of integers"}: Step list with numbered conditions -- values: a comma-separated list of integers
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`

{::comment} synopsis-end: sim-multiexp-multistep {:/}
{::comment} description-start: sim-multiexp-multistep {:/}
This is the simulation command for the [fit: multiexp-multistep] fit.
{::comment} description-end: sim-multiexp-multistep {:/}


{::comment} synopsis-start: fit-linear-kinetic-system {:/}

### `fit-linear-kinetic-system` - Fit: Several steps with a kinetic evolution {#cmd-fit-linear-kinetic-system}

`fit-linear-kinetic-system` `/additional-loss=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/offset=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/parameters=`_file_{:title="name of a file"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/species=`_integer_{:title="an integer"} `/steps=`_words_{:title="several words, separated by ','"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * `/additional-loss=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Additional unconstrained 'irreversible loss' rate constants -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/offset=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, allow for a constant offset to be added -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/species=`_integer_{:title="an integer"}: Number of species -- values: an integer
  * `/steps=`_words_{:title="several words, separated by ','"}: Step list with numbered conditions -- values: several words, separated by ','
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-linear-kinetic-system {:/}
{::comment} description-start: fit-linear-kinetic-system {:/}
This is an extension to the [fit: multiexp-multistep] fit. This fit
models the evolution of a system of chemical species that interconvert
with first-order reactions. For instance, $$k_{12}$$ is the rate of
production of species 2 from species 1.

Like in [fit: multiexp-multistep], the time is divided into steps,
during which the values of the rate constants are constant. The
concentration of the species is assumed to be continuous at step
change. The fit engine solves the following differential
equations over each step (the result is a sum of exponential decays):

$$ \frac{\mathrm{d}c_i}{\mathrm{d}t} = -\left(k_{loss} + \sum_{j=1}^n
k_{ij}\right)\times c_i + \sum_{j\neq i} k_{ji}c_j$$

The step specification is just a like of "names" (numbers,
letters...), separated by commas. For each name corresponds a set of
rate constants in the equation above. For instance, with the
specification `/steps=1,2,1`, there are three steps, but only two sets
of rate constants, `1`, and `2`, the first one being reused.

This fit was used for many of the publications of the team, such as
[Fourmond _et al_, **Nat. Chem.**,
*2014*](http://dx.doi.org/10.1038/nchem.1892) or [Jacques _et al_, **BBA**,
*2014*](http://dx.doi.org/10.1016/j.bbabio.2014.05.357).


{::comment} description-end: fit-linear-kinetic-system {:/}
{::comment} synopsis-start: mfit-linear-kinetic-system {:/}

### `mfit-linear-kinetic-system` - Multi fit: Several steps with a kinetic evolution {#cmd-mfit-linear-kinetic-system}

`mfit-linear-kinetic-system` _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/additional-loss=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/offset=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/species=`_integer_{:title="an integer"} `/steps=`_words_{:title="several words, separated by ','"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/additional-loss=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Additional unconstrained 'irreversible loss' rate constants -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/offset=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, allow for a constant offset to be added -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/species=`_integer_{:title="an integer"}: Number of species -- values: an integer
  * `/steps=`_words_{:title="several words, separated by ','"}: Step list with numbered conditions -- values: several words, separated by ','
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: mfit-linear-kinetic-system {:/}
{::comment} description-start: mfit-linear-kinetic-system {:/}
This is the multibuffer version of the [fit: linear-kinetic-system] fit.
{::comment} description-end: mfit-linear-kinetic-system {:/}


{::comment} synopsis-start: sim-linear-kinetic-system {:/}

### `sim-linear-kinetic-system` - Simulation: Several steps with a kinetic evolution {#cmd-sim-linear-kinetic-system}

`sim-linear-kinetic-system` _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/additional-loss=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/offset=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/species=`_integer_{:title="an integer"} `/steps=`_words_{:title="several words, separated by ','"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}

  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/additional-loss=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Additional unconstrained 'irreversible loss' rate constants -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/offset=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, allow for a constant offset to be added -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/species=`_integer_{:title="an integer"}: Number of species -- values: an integer
  * `/steps=`_words_{:title="several words, separated by ','"}: Step list with numbered conditions -- values: several words, separated by ','
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`

{::comment} synopsis-end: sim-linear-kinetic-system {:/}
{::comment} description-start: sim-linear-kinetic-system {:/}
This is the simulation command for the [fit: linear-kinetic-system] fit.
{::comment} description-end: sim-linear-kinetic-system {:/}


## Polynomial fits

{::comment} synopsis-start: fit-polynomial {:/}

### `fit-polynomial` - Fit: Fit to a polynomial function {#cmd-fit-polynomial}

`fit-polynomial` `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/monotonic=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/number=`_integer_{:title="an integer"} `/order=`_integers_{:title="a comma-separated list of integers"} `/parameters=`_file_{:title="name of a file"} `/prefactor=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/without-inflexions=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} **(interactive)**

  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/monotonic=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: With this on, only monotonic polynomials are solutions -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/number=`_integer_{:title="an integer"}: Number of distinct polynomial functions -- values: an integer
  * `/order=`_integers_{:title="a comma-separated list of integers"}: Order of the polynomial functions -- values: a comma-separated list of integers
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/prefactor=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Whether there is a prefactor for each polynomial (on by default for multiple polynomials) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/without-inflexions=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If this is on, there are no inflexion points in the polynomials -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: fit-polynomial {:/}
{::comment} description-start: fit-polynomial {:/}
Fits a sum of polynomials to the data:

$$
y(x) = A_p \times \left(\sum_{i=0}^n A_i x^i\right) +
B_p \times \left(\sum_{i=0}^{n'} B_i x^i\right) + ...
$$

The number of polynomial functions is given by the `/number=` option
(defaults to 1), and the order $$n$$ of the polynomials is chosen
using the `/order=` option. By default, the order is the same for all
polynomials, to specify different ones, give a comma-separated list of
orders, one for each polynomial, and don't use `/number=`.

The prefactors $$A_p$$, $$B_p$$ are present by default when there are
more than one polynomial, and off if not. You can override that using
the `/prefactor` option.

#### Parameters restrictions

By default, there are no restrictions on parameters, but using
`/monotonic=true` will discard parameter combinations that give
non-monotonic polynomials (each of the $$\sum_{i=0}^n A_i x^i$$,
not the sum), and with `/without-inflexions=true`, it will discard
parameter combinations that give inflexion points.


{::comment} description-end: fit-polynomial {:/}


{::comment} synopsis-start: mfit-polynomial {:/}

### `mfit-polynomial` - Multi fit: Fit to a polynomial function {#cmd-mfit-polynomial}

`mfit-polynomial` _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/monotonic=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/number=`_integer_{:title="an integer"} `/order=`_integers_{:title="a comma-separated list of integers"} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/prefactor=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/without-inflexions=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} **(interactive)**

  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/monotonic=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: With this on, only monotonic polynomials are solutions -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/number=`_integer_{:title="an integer"}: Number of distinct polynomial functions -- values: an integer
  * `/order=`_integers_{:title="a comma-separated list of integers"}: Order of the polynomial functions -- values: a comma-separated list of integers
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/prefactor=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Whether there is a prefactor for each polynomial (on by default for multiple polynomials) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/without-inflexions=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If this is on, there are no inflexion points in the polynomials -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: mfit-polynomial {:/}
{::comment} description-start: mfit-polynomial {:/}
This is the multibuffer version of the [fit: polynomial] fit.
{::comment} description-end: mfit-polynomial {:/}
{::comment} synopsis-start: sim-polynomial {:/}

### `sim-polynomial` - Simulation: Fit to a polynomial function {#cmd-sim-polynomial}

`sim-polynomial` _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/monotonic=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/number=`_integer_{:title="an integer"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/order=`_integers_{:title="a comma-separated list of integers"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/prefactor=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/without-inflexions=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/monotonic=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: With this on, only monotonic polynomials are solutions -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/number=`_integer_{:title="an integer"}: Number of distinct polynomial functions -- values: an integer
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/order=`_integers_{:title="a comma-separated list of integers"}: Order of the polynomial functions -- values: a comma-separated list of integers
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/prefactor=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Whether there is a prefactor for each polynomial (on by default for multiple polynomials) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/without-inflexions=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If this is on, there are no inflexion points in the polynomials -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: sim-polynomial {:/}
{::comment} description-start: sim-polynomial {:/}
This is the simulation command for the [fit: polynomial] fit.
{::comment} description-end: sim-polynomial {:/}


## Arbitrary fits 

QSoas provides ways to fit arbitrary formulas (written in
[Ruby](#ruby)) to data. While it is possible to do that on a
case-by-case basis using [cmd: fit-arb], it is also
possible to store formulas in a plain text file and load them using 
[cmd: load-fits] or define a new one using [cmd: custom-fit].

{::comment} synopsis-start: fit-arb {:/}

### `fit-arb` - Fit: Arbitrary fit {#cmd-fit-arb}

`fit-arb` _formulas_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/parameters=`_file_{:title="name of a file"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/with=`_time-dependent parameters_{:title="several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps"} **(interactive)**

  * _formulas_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: \|-separated formulas for the fit -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/with=`_time-dependent parameters_{:title="several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps"}: Make certain parameters depend upon time -- values: several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps

{::comment} synopsis-end: fit-arb {:/}
{::comment} description-start: fit-arb {:/}
Fits _formula_ (a piece of [Ruby](#ruby) code) to the current buffer. 

Parameters are auto-detected. Some parameters are treated
specifically:

  * `x_0` and `y_0` are fixed by default and initialized to the first
    X or Y value of the buffer the fit applies to;
  * `temperature` is also fixed and set to the current
    [temperature](#cmd-temperature)
  * Using `fara` counts as using `temperature` excepted that its value is
    $$f = F/RT$$. You never get `fara` as a fit parameter.
  * `dx` is fixed by default to the difference in the $$x$$ values of
    two consecutive points
  * `x_`_i_ and `y_`_i_ with _i_ a strictly positive integer are
    initially assumed to be evenly spread among the $$x$$ or $$y$$
    range.

If you often use the same formula for `fit-arb`, you should consider
using [cmd: custom-fit] or writing it in a file and
loading that file with [cmd: load-fits].

Starting from `QSoas` version 2.0, you can use the `/with=` option to
make some of the parameters dependent on time in a flexible
fashion. See [time dependent parameters](#time-dependent-parameters)
below for more information.

{::comment} description-end: fit-arb {:/}

{::comment} synopsis-start: mfit-arb {:/}

### `mfit-arb` - Multi fit: Arbitrary fit {#cmd-mfit-arb}

`mfit-arb` _formulas_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/with=`_time-dependent parameters_{:title="several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps"} **(interactive)**

  * _formulas_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: \|-separated formulas for the fit -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: datasets that will be fitted to -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/with=`_time-dependent parameters_{:title="several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps"}: Make certain parameters depend upon time -- values: several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps

{::comment} synopsis-end: mfit-arb {:/}
{::comment} description-start: mfit-arb {:/}
Same as [cmd: fit-arb], but for multiple buffers.

Using `mfit-arb`, it is possible to specify several formulas,
separated by `|`. 

If only one formula is specified, the same formula is applied to all
buffers (with, as usual, the possibility to select which parameters
are global or buffer-local).

If more than one formula is specified, the exact same number of
buffers should be supplied; the first formula applies to the first
buffer, the second formula to the second buffer, and so on... For
instance, if you run:

~~~~
QSoas> mfit-arb a*x+b|a*x+c|a*x+d 0 1 2
~~~~

This command fits `a*x+b` to buffer `0`, `a*x+c` to buffer `1` and
`a*x+d` to buffer `2`.

In this specific case, though, you could also have run

~~~~
QSoas> mfit-arb a*x+b 0 1 2
~~~~

and have `a` common to all buffer, but `b` buffer-specific.

{::comment} description-end: mfit-arb {:/}

{::comment} synopsis-start: load-fits {:/}

### `load-fits` - Load fits {#cmd-load-fits}

`load-fits` _file_{:title="name of a file"} `/redefine=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _file_{:title="name of a file"}: File containing the fits to load -- values: name of a file
  * `/redefine=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If a fit already exists, redefines it -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: load-fits {:/}
{::comment} description-start: load-fits {:/}
Load fits of arbitrary functions from a plain text file, and create
the corresponding `fit-`, `mfit-` and `sim-` functions, that can be
used with [cmd: define-derived-fit] or
[cmd: combine-fits] for instance. Files should look
like this:

~~~~
# Comments are allowed
michaelis: vmax/(1 + km/x)
sigm-log: log((exp(a_red*log(10.0)) +exp(a_ox*log(10.0)) * \
          exp(-fara*(x-e0)))/ \
          (1 + exp(-fara*(x-e0))))
~~~~

Comments are allowed, as are line continuations with `\`.

Like for [cmd: combine-fits], you cannot redefine existing fits with
this command unless `/redefine=true` is specified.


{::comment} description-end: load-fits {:/}

{::comment} synopsis-start: custom-fit {:/}

### `custom-fit` - Define fit {#cmd-custom-fit}

`custom-fit` _name_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} _formula_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/redefine=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _name_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: Name for the new fit -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * _formula_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: Mathematical expression for the fit -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/redefine=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If the fit already exists, redefines it -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: custom-fit {:/}
{::comment} description-start: custom-fit {:/}
Directly defines a custom fit with the given _name_ and
_formula_. Equivalent to having a line

<pre>
<i>name</i>: <i>formula</i>
</pre>

in a file loaded by [cmd: load-fits].

Like for [cmd: combine-fits], you cannot redefine existing fits with
this command unless `/redefine=true` is specified.

{::comment} description-end: custom-fit {:/}

## Peak fits

The fits in this section can be used to fit various "peaks" obeying to
different distributions, such as the

 * gaussian distribution [cmd: fit-gaussian]
 * lorentzian distribution [cmd: fit-lorentzian]
 * pseudo-Voigt distribution [cmd: fit-pseudo-voigt]

For all these fits, you can specify the number of "peaks" using a
common `/number` option. For each peak, there is a position, an
amplitude and a width parameter. If you are more interested in the
total surface under the peak rather than the amplitude of the peak,
the fits provide a `/use-surface` argument that changes the amplitude
parameter into a surface one.

{::comment} synopsis-start: fit-gaussian {:/}

### `fit-gaussian` - Fit: One or several gaussians {#cmd-fit-gaussian}

`fit-gaussian` `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/number=`_integer_{:title="an integer"} `/parameters=`_file_{:title="name of a file"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/number=`_integer_{:title="an integer"}: number of distinct peaks (default 1) -- values: an integer
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to use a surface or an amplitude parameter (default false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-gaussian {:/}
{::comment} description-start: fit-gaussian {:/}
Fits a number of gaussians (and an offset), given by:

$$\sum_i \frac{A_i}{\sqrt{2 \pi {\sigma_i}^2}} 
\exp \left[-\frac{(x-x_i)^2}{2{\sigma_i}^2}\right] + Y_0$$

More information in the [GSL
documentation](http://www.gnu.org/software/gsl/manual/html_node/The-Gaussian-Distribution.html).

The `/number` option controls the number of different peaks, while
using `/use-surface=true` fits the surface of the peak instead of the
amplitude.

#### Subfunctions
Each individual peak, with the offset $$Y_0$$. Displayed
by default.

{::comment} description-end: fit-gaussian {:/}
{::comment} synopsis-start: mfit-gaussian {:/}

### `mfit-gaussian` - Multi fit: One or several gaussians {#cmd-mfit-gaussian}

`mfit-gaussian` _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/number=`_integer_{:title="an integer"} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/number=`_integer_{:title="an integer"}: number of distinct peaks (default 1) -- values: an integer
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to use a surface or an amplitude parameter (default false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: mfit-gaussian {:/}
{::comment} description-start: mfit-gaussian {:/}
Multi-buffer variant of the [cmd: fit-gaussian] fit.
{::comment} description-end: mfit-gaussian {:/}
{::comment} synopsis-start: sim-gaussian {:/}

### `sim-gaussian` - Simulation: One or several gaussians {#cmd-sim-gaussian}

`sim-gaussian` _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/number=`_integer_{:title="an integer"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/number=`_integer_{:title="an integer"}: number of distinct peaks (default 1) -- values: an integer
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to use a surface or an amplitude parameter (default false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: sim-gaussian {:/}
{::comment} description-start: sim-gaussian {:/}
Simulation command for the  [cmd: fit-gaussian] fit.
{::comment} description-end: sim-gaussian {:/}
{::comment} synopsis-start: fit-lorentzian {:/}

### `fit-lorentzian` - Fit: A Lorentzian (also named Cauchy distribution) {#cmd-fit-lorentzian}

`fit-lorentzian` `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/number=`_integer_{:title="an integer"} `/parameters=`_file_{:title="name of a file"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/number=`_integer_{:title="an integer"}: number of distinct peaks (default 1) -- values: an integer
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to use a surface or an amplitude parameter (default false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-lorentzian {:/}
{::comment} description-start: fit-lorentzian {:/}
Fits a number of lorentzians (and an offset), given by:

$$\sum_i 
\frac{A_i}{a_i\pi \left(1 + \left[(x-x_i)/a_i\right]^2\right) } + Y_0
$$

More information in the [GSL
documentation](http://www.gnu.org/software/gsl/manual/html_node/The-Cauchy-Distribution.html).

The `/number` option controls the number of different peaks, while
using `/use-surface=true` fits the surface of the peak instead of the
amplitude.

#### Subfunctions
Each individual peak, with the offset $$Y_0$$. Displayed
by default.

{::comment} description-end: fit-lorentzian {:/}
{::comment} synopsis-start: mfit-lorentzian {:/}

### `mfit-lorentzian` - Multi fit: A Lorentzian (also named Cauchy distribution) {#cmd-mfit-lorentzian}

`mfit-lorentzian` _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/number=`_integer_{:title="an integer"} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/number=`_integer_{:title="an integer"}: number of distinct peaks (default 1) -- values: an integer
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to use a surface or an amplitude parameter (default false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: mfit-lorentzian {:/}
{::comment} description-start: mfit-lorentzian {:/}
Multi-buffer variant of the [cmd: fit-lorentzian] fit.
{::comment} description-end: mfit-lorentzian {:/}
{::comment} synopsis-start: sim-lorentzian {:/}

### `sim-lorentzian` - Simulation: A Lorentzian (also named Cauchy distribution) {#cmd-sim-lorentzian}

`sim-lorentzian` _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/number=`_integer_{:title="an integer"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/number=`_integer_{:title="an integer"}: number of distinct peaks (default 1) -- values: an integer
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to use a surface or an amplitude parameter (default false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: sim-lorentzian {:/}
{::comment} description-start: sim-lorentzian {:/}
Simulation command for the  [cmd: fit-lorentzian] fit.
{::comment} description-end: sim-lorentzian {:/}

{::comment} synopsis-start: fit-pseudo-voigt {:/}

### `fit-pseudo-voigt` - Fit: A pseudo-voigt distribution (linear combination of a gaussian and a lorentzian) {#cmd-fit-pseudo-voigt}

`fit-pseudo-voigt` `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/number=`_integer_{:title="an integer"} `/parameters=`_file_{:title="name of a file"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/number=`_integer_{:title="an integer"}: number of distinct peaks (default 1) -- values: an integer
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to use a surface or an amplitude parameter (default false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-pseudo-voigt {:/}
{::comment} description-start: fit-pseudo-voigt {:/}
Fits a number of pseudo-Voigt peaks, according to the following
formula:

$$ f(x) = Y_0 + \sum_i A_i \left[\frac{1-\mu_i}{\sqrt{2 \pi w_i^2}}
\exp (-(x-x_i)^2 / 2{w_i}^2) + \frac{\mu_i}{ w_i
\pi (1 + ((x-x_i)/w_i)^2) }\right]$$

#### Subfunctions
Each individual peak, with the offset $$Y_0$$. Displayed
by default.

{::comment} description-end: fit-pseudo-voigt {:/}
{::comment} synopsis-start: mfit-pseudo-voigt {:/}

### `mfit-pseudo-voigt` - Multi fit: A pseudo-voigt distribution (linear combination of a gaussian and a lorentzian) {#cmd-mfit-pseudo-voigt}

`mfit-pseudo-voigt` _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/number=`_integer_{:title="an integer"} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/number=`_integer_{:title="an integer"}: number of distinct peaks (default 1) -- values: an integer
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to use a surface or an amplitude parameter (default false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: mfit-pseudo-voigt {:/}
{::comment} description-start: mfit-pseudo-voigt {:/}
Multi-buffer variant of the [cmd: fit-pseudo-voigt] fit.
{::comment} description-end: mfit-pseudo-voigt {:/}
{::comment} synopsis-start: sim-pseudo-voigt {:/}

### `sim-pseudo-voigt` - Simulation: A pseudo-voigt distribution (linear combination of a gaussian and a lorentzian) {#cmd-sim-pseudo-voigt}

`sim-pseudo-voigt` _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/number=`_integer_{:title="an integer"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/number=`_integer_{:title="an integer"}: number of distinct peaks (default 1) -- values: an integer
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/use-surface=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to use a surface or an amplitude parameter (default false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: sim-pseudo-voigt {:/}
{::comment} description-start: sim-pseudo-voigt {:/}
Simulation command for the [cmd: fit-pseudo-voigt] fit.
{::comment} description-end: sim-pseudo-voigt {:/}


## Redox titration fits

{::comment} synopsis-start: fit-nernst {:/}

### `fit-nernst` - Fit: Nerstian behaviour {#cmd-fit-nernst}

`fit-nernst` `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/parameters=`_file_{:title="name of a file"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/species=`_integer_{:title="an integer"} `/states=`_integers_{:title="a comma-separated list of integers"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/species=`_integer_{:title="an integer"}: Number of distinct species (regardless of their redox state) -- values: an integer
  * `/states=`_integers_{:title="a comma-separated list of integers"}: Number of redox states for each species -- values: a comma-separated list of integers
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-nernst {:/}
{::comment} description-start: fit-nernst {:/}
Fits the Nernst equation for a number of chemical species present
under several redox states to the buffer, that represents absorbance
(or something else) as a function of potential. The number of species
is given to the `/species` option, while the number of redox states
for each species is given to the `/states` option. Alternatively, if
you need distinct species with a different number of redox states, you
can specify a comma-separated list of number of states to `/states`,
in which case `/species` is ignored. For instance, to fit the Nersnt
equation for two species, one present in 4 redox states and the other
in two redox states, one can use:

~~~
QSoas> fit-nernst /states=4,2
~~~

The species are designated using a lowercase letter suffix, while the
redox state is designated using `red`, `int` or `ox` when there are 3
states or less, or with a number for more than three states.

**Note**: be aware that if there is more than one species, the system
is intrinsically overdetermined, which is why `QSoas` automatically
fixes the absorbance of the reduced species of all but the first one to
0 (but you can change that).

This fit is useful to fit the results of a the redox titration at a
single wavelength. If several wavelength are available, separate them
into several buffers as a function of the potential and fit them using
[cmd: mfit-nernst], while keeping the redox potentials
(and electron numbers) global and only the absorbances as
buffer-local.
{::comment} description-end: fit-nernst {:/}

{::comment} synopsis-start: mfit-nernst {:/}

### `mfit-nernst` - Multi fit: Nerstian behaviour {#cmd-mfit-nernst}

`mfit-nernst` _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/species=`_integer_{:title="an integer"} `/states=`_integers_{:title="a comma-separated list of integers"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/species=`_integer_{:title="an integer"}: Number of distinct species (regardless of their redox state) -- values: an integer
  * `/states=`_integers_{:title="a comma-separated list of integers"}: Number of redox states for each species -- values: a comma-separated list of integers
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: mfit-nernst {:/}
{::comment} description-start: mfit-nernst {:/}
Multi-buffer version of [cmd: fit-nernst]. To be used
for fitting multi-wavelength redox titrations.
{::comment} description-end: mfit-nernst {:/}

{::comment} synopsis-start: sim-nernst {:/}

### `sim-nernst` - Simulation: Nerstian behaviour {#cmd-sim-nernst}

`sim-nernst` _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/species=`_integer_{:title="an integer"} `/states=`_integers_{:title="a comma-separated list of integers"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}

  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/species=`_integer_{:title="an integer"}: Number of distinct species (regardless of their redox state) -- values: an integer
  * `/states=`_integers_{:title="a comma-separated list of integers"}: Number of redox states for each species -- values: a comma-separated list of integers
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`

{::comment} synopsis-end: sim-nernst {:/}
{::comment} description-start: sim-nernst {:/}
Simulation command for [cmd: fit-nernst]
{::comment} description-end: sim-nernst {:/}


## Adsorbed redox species


{::comment} synopsis-start: fit-adsorbed {:/}

### `fit-adsorbed` - Fit: Adsorbed species {#cmd-fit-adsorbed}

`fit-adsorbed` `/2el=`_integer_{:title="an integer"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/distinct=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/parameters=`_file_{:title="name of a file"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/species=`_integer_{:title="an integer"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * `/2el=`_integer_{:title="an integer"}: Number of true 2-electron species -- values: an integer
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/distinct=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If true (default) then all species have their own surface concentrations -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/species=`_integer_{:title="an integer"}: Number of 1-electron species -- values: an integer
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-adsorbed {:/}
{::comment} description-start: fit-adsorbed {:/}
Fits the theoretical current given by a series of species adsorbed to
an electrode in electrochemically reversible conditions to the current
buffer (see for instance [Laviron, __J. Electroanal. Chem.__,
1979](http://dx.doi.org/10.1016/S0022-0728(79)80075-3) for more details). The actual formula is the following:

$$ i = \frac{F^2 \nu }{R\,T} 
   \left( \sum_{k} i^{1~el}_k + \sum_{k'} i^{2~el}_{k'}\right) 
$$

The number of 1-electron peaks is given by the `/species` option
(defaults to 1) and that of the 2-electrons peaks is given by the
`/2el` option (defaults to 0).

The current for 1-electron peaks is given by:

$$ i^{1~el}_k = \frac{\Gamma_k n_k\,e_k}{\left(1 + {e_k}\right)^2}
$$ 

with $$e_k = \exp \frac{F\,n_k (E - E^0_k)}{R\,T}$$, with $$E^0_k$$
the potential of the couple and $$n_k$$ the apparent number of
electrons. The latter only affects the width of the peaks, the
stoechiometry is always 1 electron.

The current for the 2-electrons peaks is given by [Pilchon and
Laviron, __J. Electronanal. Chem.__,
*1976*](http://dx.doi.org/10.1016/S0022-0728(76)80030-7):

$$ i^{2~el}_{k'} = \Gamma_{k'} \kappa_{k'}
\frac{\epsilon_{k'} + 4/\kappa_{k'} + 1/\epsilon_{k'}}
{\left(\epsilon_{k'} + \kappa_{k'} + 1/\epsilon_{k'}\right)^2}
$$

With $$\epsilon_{k'} = \exp \frac{F\,(E - E^0_{k'})}{R\,T}$$,
$$E^0_{k'}$$ being the 2-electrons reduction potential (i.e. the
average of those of the 1-electron couples) and 
$$\kappa_{k'} = \exp \frac{F\,\Delta E^0_{k'}}{R\,T}$$, 
$$\Delta E^0_{k'}$$ being the
difference in the reduction potentials of the 1-electron couples (it
is positive if the intermediate species is thermodynamically stable).

The $$\Gamma$$ parameters are the number of moles of the molecules
adsorbed on the electrode. If the
option `/distinct=false` is used, the same value of $$\Gamma$$ is used
for all couples, while in the other case (the default), each couple
has its own value of $$\Gamma$$ (this situation corresponds to unrelated
species). $$\nu$$ is the voltammetric scan rate (in volts per second).

{::comment} description-end: fit-adsorbed {:/}

{::comment} synopsis-start: mfit-adsorbed {:/}

### `mfit-adsorbed` - Multi fit: Adsorbed species {#cmd-mfit-adsorbed}

`mfit-adsorbed` _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/2el=`_integer_{:title="an integer"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/distinct=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/species=`_integer_{:title="an integer"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/2el=`_integer_{:title="an integer"}: Number of true 2-electron species -- values: an integer
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/distinct=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If true (default) then all species have their own surface concentrations -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/species=`_integer_{:title="an integer"}: Number of 1-electron species -- values: an integer
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: mfit-adsorbed {:/}
{::comment} description-start: mfit-adsorbed {:/}
Multi-buffer version of the [fit: adsorbed] fit.
{::comment} description-end: mfit-adsorbed {:/}


{::comment} synopsis-start: sim-adsorbed {:/}

### `sim-adsorbed` - Simulation: Adsorbed species {#cmd-sim-adsorbed}

`sim-adsorbed` _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/2el=`_integer_{:title="an integer"} `/debug=`_integer_{:title="an integer"} `/distinct=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/species=`_integer_{:title="an integer"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}

  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/2el=`_integer_{:title="an integer"}: Number of true 2-electron species -- values: an integer
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/distinct=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If true (default) then all species have their own surface concentrations -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/species=`_integer_{:title="an integer"}: Number of 1-electron species -- values: an integer
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`

{::comment} synopsis-end: sim-adsorbed {:/}
{::comment} description-start: sim-adsorbed {:/}
Simulation command for the [fit: adsorbed] fit.
{::comment} description-end: sim-adsorbed {:/}

## Differential equations fits

{::comment} synopsis-start: fit-ode {:/}

### `fit-ode` - Fit: Fit an ODE system {#cmd-fit-ode}

`fit-ode` _system_{:title="name of a file"} `/adaptive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/choose-t0=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/min-step-size=`_number_{:title="a floating-point number"} `/parameters=`_file_{:title="name of a file"} `/prec-absolute=`_number_{:title="a floating-point number"} `/prec-relative=`_number_{:title="a floating-point number"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/step-size=`_number_{:title="a floating-point number"} `/stepper=`_stepper_{:title="[ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`"} `/sub-steps=`_integer_{:title="an integer"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/with=`_time-dependent parameters_{:title="several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps"} **(interactive)**

  * _system_{:title="name of a file"}: Path to the file describing the ODE system -- values: name of a file
  * `/adaptive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to use an adaptive stepper (on by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/choose-t0=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, one can choose the initial time -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/min-step-size=`_number_{:title="a floating-point number"}: minimum step size for the stepper -- values: a floating-point number
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/prec-absolute=`_number_{:title="a floating-point number"}: absolute precision required -- values: a floating-point number
  * `/prec-relative=`_number_{:title="a floating-point number"}: relative precision required -- values: a floating-point number
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/step-size=`_number_{:title="a floating-point number"}: initial step size for the stepper -- values: a floating-point number
  * `/stepper=`_stepper_{:title="[ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`"}: algorithm used for integration (default: rkf45) -- values: [ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`
  * `/sub-steps=`_integer_{:title="an integer"}: If this is not 0, then the smallest step size is that many times smaller than the minimum delta t -- values: an integer
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/with=`_time-dependent parameters_{:title="several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps"}: Make certain parameters depend upon time -- values: several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps

{::comment} synopsis-end: fit-ode {:/}
{::comment} description-start: fit-ode {:/}
Using this command, one can fit the results of integrating a system of
differential equations to a dataset. The system is a file given as the
_system_ argument. For more details about how to specify the system of
equations, please refer to the documentation of the [cmd: ode]
command. The parameters whose values are not defined in the _system_
file become the fit parameters. If there is no optional third section
in the _system_ file, the $$y$$ value of the function is by default a
linear combination of the variables of the system.

As with the [fit: kinetic-system] fit, some of the parameters of the
system can be varied automatically as a function of time, using the
`/with=` option. See [time dependent
parameters](#time-dependent-parameters) below for more information.
{::comment} description-end: fit-ode {:/}

{::comment} synopsis-start: mfit-ode {:/}

### `mfit-ode` - Multi fit: Fit an ODE system {#cmd-mfit-ode}

`mfit-ode` _system_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/adaptive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/choose-t0=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/min-step-size=`_number_{:title="a floating-point number"} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/prec-absolute=`_number_{:title="a floating-point number"} `/prec-relative=`_number_{:title="a floating-point number"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/step-size=`_number_{:title="a floating-point number"} `/stepper=`_stepper_{:title="[ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`"} `/sub-steps=`_integer_{:title="an integer"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/with=`_time-dependent parameters_{:title="several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps"} **(interactive)**

  * _system_{:title="name of a file"}: Path to the file describing the ODE system -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/adaptive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to use an adaptive stepper (on by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/choose-t0=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, one can choose the initial time -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/min-step-size=`_number_{:title="a floating-point number"}: minimum step size for the stepper -- values: a floating-point number
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/prec-absolute=`_number_{:title="a floating-point number"}: absolute precision required -- values: a floating-point number
  * `/prec-relative=`_number_{:title="a floating-point number"}: relative precision required -- values: a floating-point number
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/step-size=`_number_{:title="a floating-point number"}: initial step size for the stepper -- values: a floating-point number
  * `/stepper=`_stepper_{:title="[ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`"}: algorithm used for integration (default: rkf45) -- values: [ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`
  * `/sub-steps=`_integer_{:title="an integer"}: If this is not 0, then the smallest step size is that many times smaller than the minimum delta t -- values: an integer
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/with=`_time-dependent parameters_{:title="several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps"}: Make certain parameters depend upon time -- values: several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps

{::comment} synopsis-end: mfit-ode {:/}
{::comment} description-start: mfit-ode {:/}
Multibuffer version of the [fit: ode] fit.
{::comment} description-end: mfit-ode {:/}
{::comment} synopsis-start: sim-ode {:/}

### `sim-ode` - Simulation: Fit an ODE system {#cmd-sim-ode}

`sim-ode` _system_{:title="name of a file"} _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/adaptive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/choose-t0=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/min-step-size=`_number_{:title="a floating-point number"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/prec-absolute=`_number_{:title="a floating-point number"} `/prec-relative=`_number_{:title="a floating-point number"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/step-size=`_number_{:title="a floating-point number"} `/stepper=`_stepper_{:title="[ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/sub-steps=`_integer_{:title="an integer"} `/with=`_time-dependent parameters_{:title="several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps"}

  * _system_{:title="name of a file"}: Path to the file describing the ODE system -- values: name of a file
  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/adaptive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to use an adaptive stepper (on by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/choose-t0=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, one can choose the initial time -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/min-step-size=`_number_{:title="a floating-point number"}: minimum step size for the stepper -- values: a floating-point number
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/prec-absolute=`_number_{:title="a floating-point number"}: absolute precision required -- values: a floating-point number
  * `/prec-relative=`_number_{:title="a floating-point number"}: relative precision required -- values: a floating-point number
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/step-size=`_number_{:title="a floating-point number"}: initial step size for the stepper -- values: a floating-point number
  * `/stepper=`_stepper_{:title="[ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`"}: algorithm used for integration (default: rkf45) -- values: [ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/sub-steps=`_integer_{:title="an integer"}: If this is not 0, then the smallest step size is that many times smaller than the minimum delta t -- values: an integer
  * `/with=`_time-dependent parameters_{:title="several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps"}: Make certain parameters depend upon time -- values: several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps

{::comment} synopsis-end: sim-ode {:/}
{::comment} description-start: sim-ode {:/}
Simulation command for the  [fit: ode] fit.
{::comment} description-end: sim-ode {:/}

### ODE steppers {#ode-stepper}

The fits and commands that perform ordinary differential equations (ODE)
integrations, such as the [fit: kinetic-system] or [fit: ode] fits,
have a `/stepper=` option that controls the *stepper* used, that is
the algorithm that integrates the ODE.

Steppers are divided in two main categories: the *explicit* steppers,
which are fast, and the *implicit* steppers, which are slower, but
handle much better stiff problems, when the values of the derivatives
are large (typically when using very large kinetic constants for
[fit: kinetic-system] for instance).

The explicit steppers are `rk2`, `rk4`, `rk8pd`, `rkck` and
`rkf45`. We recommend the use of `rkf45` when it is possible.

The implicit steppers are `bsimp`, `msadams`, `msbdf`, `rk1imp`,
`rk2imp` and `rk4imp`. We recommend the use of `bsimp` for stiff
problems.

We refer the reader to the
[stepper documentation of the GSL][gsl-steppers] for more information.



## Kinetic systems {#kinetic-systems}

It is possible with QSoas to fit kinetic traces that follow the
concentration of one or more species that are part of a full kinetic
system. For that, you need to write a simple [text file](#text-files) of the
following form:

~~~~
A <=>[k_i][k_a] I1
I1 ->[k_i2 * o2] I2
~~~~

This describes a kinetic system with three species, `A`, `I1` and
`I2`, with a reversible reaction from `A` to `I1` with a forward
rate of `k_i` and a backward rate of `k_a`, and an irreversible
reaction from `I1` to `I2` with a rate of `k_i2 * o2`.

QSoas automatically detects the parameters from the fit, here `k_i`,
`k_a`, `k_i2` and `o2`, and the initial concentrations of `A`, `I1`
and `I2`, namely `c0_A`, `c0_I1` and `c0_I2`. As for arbitrary fits
([cmd: fit-arb]), do not use parameters that start with a capital
letter. There is no such restriction on the name of species.


It is also possible to specify bimolecular reactions (or any molecularity):

~~~~
A + B <=>[k_1][km_1] C
~~~~

The rate is deduced from the rate constants as if it were an
elementary reaction, but you can use arbitrary functions of the
concentrations as rate constants (by prefixing the species name with
`c_`). For Michaelis-Menten kinetics, use for instance:

~~~~
S ->[k/(1 + km/c_S)] P
~~~~


The files can contain comment lines starting with a `#`, and can
contain an arbitrary large number of reactions.


It is possible to assign special time dependence to any of the
parameters by using the `/with` option: 

~~~~
QSoas> fit-kinetic-system /with=o2:3,exp kinetic-file.txt
~~~~

This gives to `o2` the value of the sum of three exponential decays
shifted in time (see formula below); this possibility is documented in
greater detail [below](#time-dependent-parameters).

By default, the fitted value is a linear combination of all the
concentrations, with the coefficients given by parameters of name
`y_A` (for the coefficient for the concentration of species `A`, for
instance).

However, it is possible to include in the kinetic system file a line
starting with `y = ` to define a formula to be fitted. For instance,
in the file

~~~
A + B <=>[k_1][km_1] C
y = c_C**2
~~~

the function fitted is the square of the concentration of `C`. The
formula can contain any arbitrary function, just like the arbitrary
fits, and can contain new parameters, and refer to the time `t` and to
any of the concentrations.


To define a new fit one could combine with others using 
[cmd: combine-fits], use [cmd: define-kinetic-system-fit].


{::comment} synopsis-start: fit-kinetic-system {:/}

### `fit-kinetic-system` - Fit: Full kinetic system {#cmd-fit-kinetic-system}

`fit-kinetic-system` _system_{:title="name of a file"} `/adaptive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/choose-t0=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/min-step-size=`_number_{:title="a floating-point number"} `/parameters=`_file_{:title="name of a file"} `/prec-absolute=`_number_{:title="a floating-point number"} `/prec-relative=`_number_{:title="a floating-point number"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/step-size=`_number_{:title="a floating-point number"} `/stepper=`_stepper_{:title="[ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`"} `/sub-steps=`_integer_{:title="an integer"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/with=`_time-dependent parameters_{:title="several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps"} **(interactive)**

  * _system_{:title="name of a file"}: file describing the system -- values: name of a file
  * `/adaptive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to use an adaptive stepper (on by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/choose-t0=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, one can choose the initial time -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/min-step-size=`_number_{:title="a floating-point number"}: minimum step size for the stepper -- values: a floating-point number
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/prec-absolute=`_number_{:title="a floating-point number"}: absolute precision required -- values: a floating-point number
  * `/prec-relative=`_number_{:title="a floating-point number"}: relative precision required -- values: a floating-point number
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/step-size=`_number_{:title="a floating-point number"}: initial step size for the stepper -- values: a floating-point number
  * `/stepper=`_stepper_{:title="[ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`"}: algorithm used for integration (default: rkf45) -- values: [ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`
  * `/sub-steps=`_integer_{:title="an integer"}: If this is not 0, then the smallest step size is that many times smaller than the minimum delta t -- values: an integer
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/with=`_time-dependent parameters_{:title="several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps"}: Make certain parameters depend upon time -- values: several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps

{::comment} synopsis-end: fit-kinetic-system {:/}
{::comment} description-start: fit-kinetic-system {:/}
Fits a full [kinetic system](#kinetic-systems). 

#### Parameters restrictions

A rate constant cannot be negative.

{::comment} description-end: fit-kinetic-system {:/}

{::comment} synopsis-start: mfit-kinetic-system {:/}

### `mfit-kinetic-system` - Multi fit: Full kinetic system {#cmd-mfit-kinetic-system}

`mfit-kinetic-system` _system_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/adaptive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/choose-t0=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/min-step-size=`_number_{:title="a floating-point number"} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/prec-absolute=`_number_{:title="a floating-point number"} `/prec-relative=`_number_{:title="a floating-point number"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/step-size=`_number_{:title="a floating-point number"} `/stepper=`_stepper_{:title="[ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`"} `/sub-steps=`_integer_{:title="an integer"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/with=`_time-dependent parameters_{:title="several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps"} **(interactive)**

  * _system_{:title="name of a file"}: file describing the system -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/adaptive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to use an adaptive stepper (on by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/choose-t0=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, one can choose the initial time -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/min-step-size=`_number_{:title="a floating-point number"}: minimum step size for the stepper -- values: a floating-point number
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/prec-absolute=`_number_{:title="a floating-point number"}: absolute precision required -- values: a floating-point number
  * `/prec-relative=`_number_{:title="a floating-point number"}: relative precision required -- values: a floating-point number
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/step-size=`_number_{:title="a floating-point number"}: initial step size for the stepper -- values: a floating-point number
  * `/stepper=`_stepper_{:title="[ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`"}: algorithm used for integration (default: rkf45) -- values: [ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`
  * `/sub-steps=`_integer_{:title="an integer"}: If this is not 0, then the smallest step size is that many times smaller than the minimum delta t -- values: an integer
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/with=`_time-dependent parameters_{:title="several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps"}: Make certain parameters depend upon time -- values: several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps

{::comment} synopsis-end: mfit-kinetic-system {:/}
{::comment} description-start: mfit-kinetic-system {:/}
Multi-buffer variant of the
[`kinetic-system`](#cmd-fit-kinetic-system) fit.
{::comment} description-end: mfit-kinetic-system {:/}

{::comment} synopsis-start: sim-kinetic-system {:/}

### `sim-kinetic-system` - Simulation: Full kinetic system {#cmd-sim-kinetic-system}

`sim-kinetic-system` _system_{:title="name of a file"} _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/adaptive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/choose-t0=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/min-step-size=`_number_{:title="a floating-point number"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/prec-absolute=`_number_{:title="a floating-point number"} `/prec-relative=`_number_{:title="a floating-point number"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/step-size=`_number_{:title="a floating-point number"} `/stepper=`_stepper_{:title="[ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/sub-steps=`_integer_{:title="an integer"} `/with=`_time-dependent parameters_{:title="several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps"}

  * _system_{:title="name of a file"}: file describing the system -- values: name of a file
  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/adaptive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to use an adaptive stepper (on by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/choose-t0=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, one can choose the initial time -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/min-step-size=`_number_{:title="a floating-point number"}: minimum step size for the stepper -- values: a floating-point number
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/prec-absolute=`_number_{:title="a floating-point number"}: absolute precision required -- values: a floating-point number
  * `/prec-relative=`_number_{:title="a floating-point number"}: relative precision required -- values: a floating-point number
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/step-size=`_number_{:title="a floating-point number"}: initial step size for the stepper -- values: a floating-point number
  * `/stepper=`_stepper_{:title="[ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`"}: algorithm used for integration (default: rkf45) -- values: [ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/sub-steps=`_integer_{:title="an integer"}: If this is not 0, then the smallest step size is that many times smaller than the minimum delta t -- values: an integer
  * `/with=`_time-dependent parameters_{:title="several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps"}: Make certain parameters depend upon time -- values: several specifications of [time dependent parameters](#time-dependent-parameters) (like `co:2,exp`), seperated by ';'. Available types: exp, ramps, rexp, steps

{::comment} synopsis-end: sim-kinetic-system {:/}
{::comment} description-start: sim-kinetic-system {:/}
Simulation command for the 
[`kinetic-system`](#cmd-fit-kinetic-system) fit.
{::comment} description-end: sim-kinetic-system {:/}

{::comment} synopsis-start: define-kinetic-system-fit {:/}

### `define-kinetic-system-fit` - Define a fit based on a kinetic mode {#cmd-define-kinetic-system-fit}

`define-kinetic-system-fit` _file_{:title="name of a file"} _name_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/redefine=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _file_{:title="name of a file"}: System to load -- values: name of a file
  * _name_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: Name of the newly created fit -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/redefine=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If the fit already exists, redefines it -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: define-kinetic-system-fit {:/}
{::comment} description-start: define-kinetic-system-fit {:/}

In the [cmd: fit-kinetic-system] fit, one has to provide
systematically the name of the file that contains the kinetic system.
This prevents the use of kinetic system fits with [cmd: combine-fits]
or [cmd: define-derived-fit].

The `define-kinetic-system-fit` command defines a new fit for the
kinetic system contained in _file_. The kinetic system is read only
once, if you make modifications to the kinetic system file, they will
not be taken into account.

Like for [cmd: combine-fits], you cannot redefine existing fits with
this command unless `/redefine=true` is specified.
{::comment} description-end: define-kinetic-system-fit {:/}


## Time-dependent parameters {#time-dependent-parameters}

Some fits, namely [fit: arb], [fit: ode] and [fit: kinetic-system]
(and all the custom fits defined using [cmd: custom-fit] or
[cmd: define-kinetic-system-fit]) have a built-in possibility to
have some parameters depend on time (instead of being constant). This
can be used in kinetic systems to impose an external dependence on
various parameters. It makes it possible to separate the chemistry of
the system (defined in the kinetic system file), and the experimental
procedure by which you vary the conditions (governed by the
time-dependent parameters).

The time-dependent parameters are defined using the `/with=` option to
the fits. This option takes a `;`-separated list of specifications of
the form: _parameter_:_number_,_type_,_options_... where _parameter_
is the name of the parameter that will depend on time, _type_ is the
type of the dependence (see below), _number_ (not always needed) is
the number of "features" in the dependence (very type-dependent), and
_options_ can additionnally be used for some types.


`QSoas` recognizes the following time-dependences:

  * `exp`, where the given parameter, $$p$$ is given by:

  $$ p = \sum_{i=1}^n p_i \exp \left( - \frac{t -
  t_i}{\tau_i}\right) \times H(t - t_i)$$

  where $$H$$ is the heavyside step function (1 for positive argument,
  0 else) and $$n$$ is the number given just after `:` (in command
  below, that means you will have three different steps). You may wish
  to have all $$\tau$$ values common, which you do by adding `,common`
  in the spec:

~~~~
QSoas> fit-kinetic-system /with=o2:3,exp,common kinetic-file.txt
~~~~

  This kind of functions were used to analyse the inhibition of NiFe
  hydrogenase by CO and O2, see for instance [Liebgott _et al_,
  __Nat. Chem. Biol.__, 2010](http://dx.doi.org/10.1038/nchembio.276).

  * `steps`, where the given parameter, takes a series of values (1
  more than the _number_ given) at the given times.
  * `rexp`, that combines the `steps` and `exp`: the time is divided
  in _number_ segments (preceded by an initial segment in which the
  parameter is fixed) in which the parameter is given by:

  $$ p = \left(p(t = t_i) - p^i_{\infty}\right)\exp -\frac{t -
  t_i}{\tau_i} \qquad\text{for}\qquad t_i < t \leq t_{i+1} $$

  As for `exp`, the time constant can be chosen to be common to all
  the segments by adding `,common` after the spec.


You can specify several independant parameters, if you separate their
description by `;` 

~~~~
QSoas> fit-kinetic-system /with=o2:3,exp;o3:2,rexp kinetic-file.txt
~~~~

This defines the dependence over time of two parameters: `o2`, like
above, and `o3`, that follows two exponentials relaxations.



Another way to look at the different types of time-dependent
parameters available in your version of `QSoas` is to run the file
`make-all.cmds` from the `tests/time-dependent-parameters` directory
of the [source code archive][code].



## Slow scans fits

These specific fits were used in the context of the interpretation of
cyclic voltammograms of adorbed nickel-iron hydrogenase that undergo
inactivations under oxidizing conditions. For more information, refer
to [Abou-Hamdam _et al_, **PNAS**
2012](http://dx.doi.org/10.1073/pnas.1212258109).

{::comment} synopsis-start: fit-slow-scan-hp {:/}

### `fit-slow-scan-hp` - Fit: Slow scan test {#cmd-fit-slow-scan-hp}

`fit-slow-scan-hp` `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/bi-exp=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/parameters=`_file_{:title="name of a file"} `/scaling=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/bi-exp=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the relaxation is bi-exponential or mono-exponential (false by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/scaling=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, use an additional scaling factor (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-slow-scan-hp {:/}
{::comment} description-start: fit-slow-scan-hp {:/}
Fit for the "high-potential" part of a slow voltammetric scan where
inactivation occurs with rate constants that do not depend on
time. The current for the active form is assumed to depend linearly on
potential.

Formula:

$$ i_{forward} = (a + b \times E) \left[\left(\alpha_0 - \alpha_e\right) \times \exp\left\{-(E -E_1)/(\nu \tau)\right\} + \alpha_e\right]  $$

$$ i_{backward} = (a + b \times E) \left[\left(\alpha_0 - \alpha_e\right) \times \exp\left\{-(2E_v-E_1-E)/(\nu \tau)\right\} + \alpha_e\right]  $$

where $$E_v$$ is the vertex potential, $$E_1$$ is the initial potential,
$$\tau$$ the rate constant of decrease, $$\alpha_0$$ the amount of initially
active enzyme, $$\alpha_e$$ the equilibrium concentration of active species
and $$\nu$$ the scan rate.

{::comment} description-end: fit-slow-scan-hp {:/}

{::comment} synopsis-start: fit-slow-scan-lp {:/}

### `fit-slow-scan-lp` - Fit: Slow scan test {#cmd-fit-slow-scan-lp}

`fit-slow-scan-lp` `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/explicit-rate=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/parameters=`_file_{:title="name of a file"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/explicit-rate=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the scan rate is an explicit parameter of the fit (default false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-slow-scan-lp {:/}
{::comment} description-start: fit-slow-scan-lp {:/}
Fit for the "low-potential" part of a slow voltammetric scan where the
enzyme reactivates with a rate constant that depends exponentially on
the potential: 

$$ k_a = k \exp(- \alpha f E)$$

The overall formula is:

$$ i(E) = \underbrace{(A\times E+B)}_{\text{stationnary current}}
   \underbrace{\left(  1 - (1-y_1) \exp^{-\frac{k}{\alpha f \nu}
   (\exp^{\alpha f E}-\exp^{\alpha f E_1})}\right)}_
   {\text{active fraction}} $$

$$E_1$$ is the initial potential, $$\nu$$ the scan rate

{::comment} description-end: fit-slow-scan-lp {:/}

{::comment} synopsis-start: mfit-slow-scan-hp {:/}

### `mfit-slow-scan-hp` - Multi fit: Slow scan test {#cmd-mfit-slow-scan-hp}

`mfit-slow-scan-hp` _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/bi-exp=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/scaling=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/bi-exp=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the relaxation is bi-exponential or mono-exponential (false by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/scaling=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, use an additional scaling factor (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: mfit-slow-scan-hp {:/}
{::comment} description-start: mfit-slow-scan-hp {:/}
Multi-buffer variant of the
[cmd: fit-slow-scan-hp] fit.
{::comment} description-end: mfit-slow-scan-hp {:/}

{::comment} synopsis-start: mfit-slow-scan-lp {:/}

### `mfit-slow-scan-lp` - Multi fit: Slow scan test {#cmd-mfit-slow-scan-lp}

`mfit-slow-scan-lp` _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/explicit-rate=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/explicit-rate=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the scan rate is an explicit parameter of the fit (default false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: mfit-slow-scan-lp {:/}
{::comment} description-start: mfit-slow-scan-lp {:/}
Multi-buffer variant of the
[cmd: fit-slow-scan-lp] fit.
{::comment} description-end: mfit-slow-scan-lp {:/}

{::comment} synopsis-start: sim-slow-scan-lp {:/}

### `sim-slow-scan-lp` - Simulation: Slow scan test {#cmd-sim-slow-scan-lp}

`sim-slow-scan-lp` _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/explicit-rate=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}

  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/explicit-rate=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the scan rate is an explicit parameter of the fit (default false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`

{::comment} synopsis-end: sim-slow-scan-lp {:/}
{::comment} description-start: sim-slow-scan-lp {:/}
Simulation command for the 
[`slow-scan-lp`](#cmd-fit-slow-scan-lp) fit.
{::comment} description-end: sim-slow-scan-lp {:/}

{::comment} synopsis-start: sim-slow-scan-hp {:/}

### `sim-slow-scan-hp` - Simulation: Slow scan test {#cmd-sim-slow-scan-hp}

`sim-slow-scan-hp` _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/bi-exp=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/scaling=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}

  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/bi-exp=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the relaxation is bi-exponential or mono-exponential (false by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/scaling=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, use an additional scaling factor (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`

{::comment} synopsis-end: sim-slow-scan-hp {:/}
{::comment} description-start: sim-slow-scan-hp {:/}
Simulation command for the 
[`slow-scan-hp`](#cmd-fit-slow-scan-hp) fit.
{::comment} description-end: sim-slow-scan-hp {:/}



## Wave shape fits {#wave-shape-fits}

These fits model the catalytic wave shape of active sites with either
2 or 3 redox states, and one catalytic reaction that can be
reversible. The equations for these models were initially described in 
[Fourmond _et al_, **JACS**
2013](http://dx.doi.org/10.1021/ja311607s), and were reviewed and
reparametrized in [Fourmond and Léger, **Curr Op Electrochemistry**
2017](http://dx.doi.org/10.1016/j.coelec.2016.11.002).
There are 5 different fits:

 * [cmd: fit-eci-wave] a 1-electron 1-way catalyst;
 * [cmd: fit-ecr-wave] a 1-electron 2-way (reversible) catalyst;
 * [cmd: fit-eeci-wave] a 2-electron 1-way catalyst;
 * [cmd: fit-eecr-wave] a 2-electron 2-way (reversible) catalyst;
 * [cmd: fit-eecr-relay-wave] a 2-electron 2-way (reversible) catalyst
   with an electron relay.

All these fits (but the [fit: eecr-relay-wave] fit) share common
options:

 * `/model` describes the approximation used: with `nersnt`, the
   electron transfers are at equilibrium, with `slow-et`, slow
   electron transfer is taken into account using Butler-Volmer type of
   kinetics, `disp-k0` is with slow electron transfer and a dispersion
   of values of $$k_0$$ as described in [Léger _et al_,
   **J. Phys. Chem. B** 2002](http://dx.doi.org/10.1021/jp0265687),
   and `bd0-inf` is the special case of the former when the limiting
   value of the current at extreme potentials is not reached.
 * `/reduction`, for irreversible models, describe the
   oxidative direction (by default) or the reductive direction
   (`/reduction=true`). For reversible models, it defines the
   reference direction (is the limiting current an oxidation or a
   reduction current).

The fits of reversible models also have the following extra option:

 * `/use-eoc`. The open circuit potential (for which the current is 0)
   is entirely determined by the potentials of the active site and the
   ratio of the catalytic rates in the two directions. Therefore,
   instead of using the latter ratio as a parameter, it is equivalent
   to use the open circuit potential. `/use-eoc=true` does that. See
   more about that in [Fourmond _et al_, **JACS** 2013](http://dx.doi.org/10.1021/ja311607s).

The equations for the fits differ depending on the model:

 * for `nernst`: $$ i = \frac{i_{lim}(1 - a')}{a}$$
 * for `slow-et`: $$ i = \frac{i_{lim}(1 - a')}
   {a + \frac{k_{cat}}{k_{OR}^0} b }$$
 * for `disp-k0`: $$ i = \frac{i_{lim}(1 - a')}{a}
    \times \left[1 + \frac{1}{\beta \,d_0}
      \ln \frac{a + \frac{k_{cat}}{k_{OR}^0} b}
    {a + \frac{k_{cat}}{k_{OR}^0}\,b \,\exp(\beta \,d_0)}\right]$$
 * for `bd0-inf`: $$ i = \frac{i_{lim}(1 - a')}{\beta \,d_0\,a}
    \times \ln \left[1 + \frac{a}{\frac{k_{cat}}{k_{OR}^0} b}\right]$$

In the formulas below, we use the shortcut
$$e_OR = \exp \frac{F(E - E_{OR})}{RT}$$, and $$k_{cat}$$ is the
catalytic rate in the "reference" direction, while $$k_{-cat}$$ is
that in the other direction (for reversible fits).



{::comment} synopsis-start: fit-eci-wave {:/}

### `fit-eci-wave` - Fit: Fit of an EC irreversible catalytic wave {#cmd-fit-eci-wave}

`fit-eci-wave` `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"} `/parameters=`_file_{:title="name of a file"} `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"}: the kind of model used for the computation (default: dispersion) -- values: one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, models a reductive wave (default: off, hence oxidative wave) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-eci-wave {:/}
{::comment} description-start: fit-eci-wave {:/}
Fits the wave shape of an irreversible 1-electron catalytic cycle to
the current dataset.

For the oxidative direction:

$$
\begin{align}
a &= 1 + {e_{OR}}^{-1}
& a' &= 0
& b &= {e_{OR}}^{-1/2}
\end{align}
$$

For the reductive direction:

$$
\begin{align}
a &= 1 + {e_{OR}}
& a' &= 0
& b &= {e_{OR}}^{1/2}
\end{align}
$$

{::comment} description-end: fit-eci-wave {:/}

{::comment} synopsis-start: mfit-eci-wave {:/}

### `mfit-eci-wave` - Multi fit: Fit of an EC irreversible catalytic wave {#cmd-mfit-eci-wave}

`mfit-eci-wave` _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"}: the kind of model used for the computation (default: dispersion) -- values: one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, models a reductive wave (default: off, hence oxidative wave) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: mfit-eci-wave {:/}
{::comment} description-start: mfit-eci-wave {:/}
Multi-buffer version of the [fit: eci-wave] fit.
{::comment} description-end: mfit-eci-wave {:/}



{::comment} synopsis-start: sim-eci-wave {:/}

### `sim-eci-wave` - Simulation: Fit of an EC irreversible catalytic wave {#cmd-sim-eci-wave}

`sim-eci-wave` _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}

  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"}: the kind of model used for the computation (default: dispersion) -- values: one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, models a reductive wave (default: off, hence oxidative wave) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`

{::comment} synopsis-end: sim-eci-wave {:/}
{::comment} description-start: sim-eci-wave {:/}
Simulation command for the [fit: eci-wave] fit.
{::comment} description-end: sim-eci-wave {:/}


{::comment} synopsis-start: fit-ecr-wave {:/}

### `fit-ecr-wave` - Fit: Fit of an EC reversible catalytic wave {#cmd-fit-ecr-wave}

`fit-ecr-wave` `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"} `/parameters=`_file_{:title="name of a file"} `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/use-eoc=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"}: the kind of model used for the computation (default: dispersion) -- values: one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, use the reductive direction as reference (default: oxidative direction as reference) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/use-eoc=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to use explicitly the bias or compute it using the open circuit potential (default: false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-ecr-wave {:/}
{::comment} description-start: fit-ecr-wave {:/}
Fits the wave shape of a reversible 1-electron catalytic cycle to
the current dataset.

For the oxidative direction:

$$
\begin{align}
a &= 1 + {e_{OR}}^{-1}
& a' &= \frac{k_{-cat}}{k_{cat}}{e_{OR}}^{-1}
& b &= {e_{OR}}^{-1/2}\left(1 + \frac{k_{-cat}}{k_{cat}}\right)
\end{align}
$$

For the reductive direction:

$$
\begin{align}
a &= 1 + {e_{OR}}
& a' &= \frac{k_{-cat}}{k_{cat}}{e_{OR}}
& b &= {e_{OR}}^{1/2}\left(1 + \frac{k_{-cat}}{k_{cat}}\right)
\end{align}
$$

{::comment} description-end: fit-ecr-wave {:/}
{::comment} synopsis-start: mfit-ecr-wave {:/}

### `mfit-ecr-wave` - Multi fit: Fit of an EC reversible catalytic wave {#cmd-mfit-ecr-wave}

`mfit-ecr-wave` _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/use-eoc=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"}: the kind of model used for the computation (default: dispersion) -- values: one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, use the reductive direction as reference (default: oxidative direction as reference) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/use-eoc=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to use explicitly the bias or compute it using the open circuit potential (default: false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: mfit-ecr-wave {:/}
{::comment} description-start: mfit-ecr-wave {:/}
Multi-buffer version of the [`ecr-wave`](#cmd-fit-ecr-wave) fit.
{::comment} description-end: mfit-ecr-wave {:/}
{::comment} synopsis-start: sim-ecr-wave {:/}

### `sim-ecr-wave` - Simulation: Fit of an EC reversible catalytic wave {#cmd-sim-ecr-wave}

`sim-ecr-wave` _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/use-eoc=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"}: the kind of model used for the computation (default: dispersion) -- values: one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, use the reductive direction as reference (default: oxidative direction as reference) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/use-eoc=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to use explicitly the bias or compute it using the open circuit potential (default: false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: sim-ecr-wave {:/}
{::comment} description-start: sim-ecr-wave {:/}
Simulation command for the [`ecr-wave`](#cmd-fit-ecr-wave) fit.
{::comment} description-end: sim-ecr-wave {:/}

{::comment} synopsis-start: fit-eeci-wave {:/}

### `fit-eeci-wave` - Fit: Fit of an EC irreversible catalytic wave {#cmd-fit-eeci-wave}

`fit-eeci-wave` `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"} `/parameters=`_file_{:title="name of a file"} `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"}: the kind of model used for the computation (default: dispersion) -- values: one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, models a reductive wave (default: off, hence oxidative wave) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-eeci-wave {:/}
{::comment} description-start: fit-eeci-wave {:/}
Fits the wave shape of an irreversible 2-electron catalytic cycle to
the current dataset.

For the oxidative direction:

$$
\begin{align}
a &= 1 + {e_{OI}}^{-1}\left(1 + {e_{IR}}^{-1}\right)
& a' &= 0
& b &= \left(\frac{k_{OI}^0}{k_{IR}^0} \,e_{OI}\right)^{-1/2}
    \left[1 +  {e_{IR}}^{-1}\right] + 
    \left(\frac{k_{IR}^0}{k_{OI}^0} \,e_{IR}\right)^{-1/2}
\end{align}
$$

For the reductive direction:

$$
\begin{align}
a &= 1 + {e_{IR}}\left(1 + {e_{OI}}\right)
& a' &= 0
& b &= \left(\frac{k_{IR}^0}{k_{OI}^0} \,e_{OI}\right)^{1/2}
     + 
    \left(\frac{k_{OI}^0}{k_{IR}^0} \,e_{IR}\right)^{1/2}
    \left[1 + {e_{OI}}\right]
\end{align}
$$

{::comment} description-end: fit-eeci-wave {:/}

{::comment} synopsis-start: mfit-eeci-wave {:/}

### `mfit-eeci-wave` - Multi fit: Fit of an EC irreversible catalytic wave {#cmd-mfit-eeci-wave}

`mfit-eeci-wave` _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"}: the kind of model used for the computation (default: dispersion) -- values: one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, models a reductive wave (default: off, hence oxidative wave) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: mfit-eeci-wave {:/}
{::comment} description-start: mfit-eeci-wave {:/}
Multibuffer version of the [fit: eeci-wave] fit.
{::comment} description-end: mfit-eeci-wave {:/}


{::comment} synopsis-start: sim-eeci-wave {:/}

### `sim-eeci-wave` - Simulation: Fit of an EC irreversible catalytic wave {#cmd-sim-eeci-wave}

`sim-eeci-wave` _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}

  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"}: the kind of model used for the computation (default: dispersion) -- values: one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, models a reductive wave (default: off, hence oxidative wave) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`

{::comment} synopsis-end: sim-eeci-wave {:/}
{::comment} description-start: mfit-eeci-wave {:/}
Simulation command for the [fit: eeci-wave] fit.
{::comment} description-end: mfit-eeci-wave {:/}


{::comment} synopsis-start: fit-eecr-wave {:/}

### `fit-eecr-wave` - Fit: Fit of an EEC reversible catalytic wave {#cmd-fit-eecr-wave}

`fit-eecr-wave` `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"} `/parameters=`_file_{:title="name of a file"} `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/use-eoc=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"}: the kind of model used for the computation (default: dispersion) -- values: one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, use the reductive direction as reference (default: oxidative direction as reference) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/use-eoc=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to use explicitly the bias or compute it using the open circuit potential (default: false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-eecr-wave {:/}
{::comment} description-start: fit-eecr-wave {:/}
Fits the wave shape of an reversible 2-electron catalytic cycle to
the current dataset.

For the oxidative direction:

$$
\begin{align}
a &= 1 + {e_{OI}}^{-1}\left(1 + {e_{IR}}^{-1}\right)
& a' &= \frac{k_{-cat}}{k_{cat}}\,\left(e_{OI}\,e_{IR}\right)^{-1} 
& b &= \left(\frac{k_{OI}^0}{k_{IR}^0} \,e_{OI}\right)^{-1/2}
    \left[1 + \left(1 + \frac{k_{-cat}}{k_{cat}}\right) {e_{IR}}^{-1}\right] + 
    \left(\frac{k_{IR}^0}{k_{OI}^0} \,e_{IR}\right)^{-1/2}
    \left[1 + \frac{k_{-cat}}{k_{cat}}\left(1 + {e_{OI}}^{-1}\right)\right]
\end{align}
$$

For the reductive direction:

$$
\begin{align}
a &= 1 + {e_{IR}}\left(1 + {e_{OI}}\right)
& a' &= \frac{k_{-cat}}{k_{cat}}\,e_{OI}\,e_{IR}
& b &= \left(\frac{k_{IR}^0}{k_{OI}^0} \,e_{OI}\right)^{1/2}
    \left[1 + \frac{k_{-cat}}{k_{cat}}\left(1 + {e_{IR}}\right)\right] + 
    \left(\frac{k_{OI}^0}{k_{IR}^0} \,e_{IR}\right)^{1/2}
    \left[1 + {e_{OI}}\left(1 + \frac{k_{-cat}}{k_{cat}}\right)\right]
\end{align}
$$

{::comment} description-end: fit-eecr-wave {:/}


{::comment} synopsis-start: mfit-eecr-wave {:/}

### `mfit-eecr-wave` - Multi fit: Fit of an EEC reversible catalytic wave {#cmd-mfit-eecr-wave}

`mfit-eecr-wave` _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/use-eoc=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"}: the kind of model used for the computation (default: dispersion) -- values: one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, use the reductive direction as reference (default: oxidative direction as reference) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/use-eoc=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to use explicitly the bias or compute it using the open circuit potential (default: false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: mfit-eecr-wave {:/}
{::comment} description-start: mfit-eecr-wave {:/}
Multi-buffer variant of [cmd: fit-eecr-wave].
{::comment} description-end: mfit-eecr-wave {:/}

{::comment} synopsis-start: sim-eecr-wave {:/}

### `sim-eecr-wave` - Simulation: Fit of an EEC reversible catalytic wave {#cmd-sim-eecr-wave}

`sim-eecr-wave` _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/use-eoc=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/model=`_choice_{:title="one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`"}: the kind of model used for the computation (default: dispersion) -- values: one of: `nernst`, `slow-et`, `bd0-inf`, `disp-k0`
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/reduction=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, use the reductive direction as reference (default: oxidative direction as reference) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/use-eoc=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether to use explicitly the bias or compute it using the open circuit potential (default: false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: sim-eecr-wave {:/}
{::comment} description-start: sim-eecr-wave {:/}
Simulation for the [`eecr-wave`](#cmd-fit-eecr-wave) fit.
{::comment} description-end: sim-eecr-wave {:/}


{::comment} synopsis-start: fit-eecr-relay-wave {:/}

### `fit-eecr-relay-wave` - Fit: Fit of an EECR+relay catalytic wave {#cmd-fit-eecr-relay-wave}

`fit-eecr-relay-wave` `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/parameters=`_file_{:title="name of a file"} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/use-potentials=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/use-potentials=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, use the potentials of the active site electronic transitions rather than the equilibrium constants -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-eecr-relay-wave {:/}
{::comment} description-start: fit-eecr-relay-wave {:/}
Fits the so-called EEC with relay model in [Fourmond _et al_,
**JACS** 2013](http://dx.doi.org/10.1021/ja311607s) to the data.
{::comment} description-end: fit-eecr-relay-wave {:/}

{::comment} synopsis-start: mfit-eecr-relay-wave {:/}

### `mfit-eecr-relay-wave` - Multi fit: Fit of an EECR+relay catalytic wave {#cmd-mfit-eecr-relay-wave}

`mfit-eecr-relay-wave` _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/parameters=`_file_{:title="name of a file"} `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/script=`_file_{:title="name of a file"} `/set-from-meta=`_words_{:title="several words, separated by ','"} `/use-potentials=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(interactive)**

  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/arg1=`_file_{:title="name of a file"}: first argument of the script file -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: second argument of the script file -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: third argument of the script file -- values: name of a file
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/expert=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: runs the fit in expert mode -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/parameters=`_file_{:title="name of a file"}: pre-loads parameters -- values: name of a file
  * `/perp-meta=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: if specified, it is the name of a meta-data that holds the perpendicular coordinates -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/script=`_file_{:title="name of a file"}: runs a script file -- values: name of a file
  * `/set-from-meta=`_words_{:title="several words, separated by ','"}: sets parameter values from meta-data -- values: several words, separated by ','
  * `/use-potentials=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, use the potentials of the active site electronic transitions rather than the equilibrium constants -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/weight-buffers=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to weight buffers (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/window-title=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines the title of the fit window -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: mfit-eecr-relay-wave {:/}
{::comment} description-start: mfit-eecr-relay-wave {:/}
Multi-buffer version of the [`eecr-relay-wave`](#cmd-fit-eecr-relay-wave) fit.
{::comment} description-end: mfit-eecr-relay-wave {:/}
{::comment} synopsis-start: sim-eecr-relay-wave {:/}

### `sim-eecr-relay-wave` - Simulation: Fit of an EECR+relay catalytic wave {#cmd-sim-eecr-relay-wave}

`sim-eecr-relay-wave` _parameters_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/debug=`_integer_{:title="an integer"} `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"} `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/flags=`_words_{:title="several words, separated by ','"} `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"} `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/use-potentials=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _parameters_{:title="name of a file"}: file to load parameters from -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: the buffers whose X values will be used for simulations -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/debug=`_integer_{:title="an integer"}: Debug level: 0 means no debug output, increasing values mean increasing details -- values: an integer
  * `/engine=`_engine_{:title="[Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`"}: The startup fit engine -- values: [Fit engine](#fit-engines), one of: `gsl-simplex`, `lmder`, `lmniel`, `lmsder`, `multi`, `odrpack`, `pso`, `qsoas`, `simplex`
  * `/extra-parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: defines supplementary parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/operation=`_choice_{:title="one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`"}: Whether to just compute the function, the full jacobian, reexport parameters with errors or just annotate datasets -- values: one of: `annotate`, `compute`, `jacobian`, `reexport`, `residuals`, `subfunctions`
  * `/override=`_overrides_{:title="several parameter=value assignments, separated by , or ;"}: a comma-separated list of parameters to override -- values: several parameter=value assignments, separated by , or ;
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/use-potentials=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, use the potentials of the active site electronic transitions rather than the equilibrium constants -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: sim-eecr-relay-wave {:/}
{::comment} description-start: sim-eecr-relay-wave {:/}
Simulation command for the [`eecr-relay-wave`](#cmd-fit-eecr-relay-wave) fit.
{::comment} description-end: sim-eecr-relay-wave {:/}

# Commands available in the fit command-line interface {#fit-commands}

All the commands here become available by using the `/expert=true`
option to `fit-` or `mfit-` commands.

## Fit engine selection

The fit command features means to select fit engines and tune their parameters.

{::comment} synopsis-start: fit-qsoas-engine {:/}

### `qsoas-engine` - qsoas {#fit-cmd-qsoas-engine}

`qsoas-engine` `/end-threshold=`_number_{:title="a floating-point number"} `/lambda=`_number_{:title="a floating-point number"} `/relative-min=`_number_{:title="a floating-point number"} `/residuals-threshold=`_number_{:title="a floating-point number"} `/scale=`_number_{:title="a floating-point number"} `/scaling=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/trial-steps=`_integer_{:title="an integer"} **(fit command)**

  * `/end-threshold=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/lambda=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/relative-min=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/residuals-threshold=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/scale=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/scaling=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}:  -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/trial-steps=`_integer_{:title="an integer"}:  -- values: an integer

{::comment} synopsis-end: fit-qsoas-engine {:/}
{::comment} description-start: fit-qsoas-engine {:/}
This command selects the `qsoas` fit engine, QSoas's own
implementation of the Levenberg-Marquardt algorithm.
{::comment} description-end: fit-qsoas-engine {:/}

{::comment} synopsis-start: fit-odrpack-engine {:/}

### `odrpack-engine` - odrpack {#fit-cmd-odrpack-engine}

`odrpack-engine` **(fit command)**


{::comment} synopsis-end: fit-odrpack-engine {:/}
{::comment} description-start: fit-odrpack-engine {:/}
Selects the ODRPACK fit engine
{::comment} description-end: fit-odrpack-engine {:/}
{::comment} synopsis-start: fit-multi-engine {:/}

### `multi-engine` - multi {#fit-cmd-multi-engine}

`multi-engine` `/end-threshold=`_number_{:title="a floating-point number"} `/global-scaling-order=`_number_{:title="a floating-point number"} `/lambda=`_number_{:title="a floating-point number"} `/relative-min=`_number_{:title="a floating-point number"} `/residuals-threshold=`_number_{:title="a floating-point number"} `/scale=`_number_{:title="a floating-point number"} `/scaling=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/trial-steps=`_integer_{:title="an integer"} **(fit command)**

  * `/end-threshold=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/global-scaling-order=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/lambda=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/relative-min=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/residuals-threshold=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/scale=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/scaling=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}:  -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/trial-steps=`_integer_{:title="an integer"}:  -- values: an integer

{::comment} synopsis-end: fit-multi-engine {:/}
{::comment} description-start: fit-multi-engine {:/}
This command selects the `multi` fit engine, the variant of the
`qsoas` fit engine that is adapted for massive multibuffer fits.
{::comment} description-end: fit-multi-engine {:/}
{::comment} synopsis-start: fit-simplex-engine {:/}

### `simplex-engine` - simplex {#fit-cmd-simplex-engine}

`simplex-engine` `/alpha=`_number_{:title="a floating-point number"} `/beta=`_number_{:title="a floating-point number"} `/delta=`_number_{:title="a floating-point number"} `/end-threshold=`_number_{:title="a floating-point number"} `/gamma=`_number_{:title="a floating-point number"} **(fit command)**

  * `/alpha=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/beta=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/delta=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/end-threshold=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/gamma=`_number_{:title="a floating-point number"}:  -- values: a floating-point number

{::comment} synopsis-end: fit-simplex-engine {:/}
{::comment} description-start: fit-simplex-engine {:/}
This command selects the Simplex fit engine.
{::comment} description-end: fit-simplex-engine {:/}
{::comment} synopsis-start: fit-gsl-simplex-engine {:/}

### `gsl-simplex-engine` - gsl-simplex {#fit-cmd-gsl-simplex-engine}

`gsl-simplex-engine` **(fit command)**


{::comment} synopsis-end: fit-gsl-simplex-engine {:/}
{::comment} description-start: fit-gsl-simplex-engine {:/}
This command selects the fit engine based on the GSL version of the
simplex, which may or may not be better than the
[Simplex](#fit-cmd-simplex-engine) depending on the function used for
fitting.
{::comment} description-end: fit-gsl-simplex-engine {:/}



{::comment} synopsis-start: fit-pso-engine {:/}

### `pso-engine` - pso {#fit-cmd-pso-engine}

`pso-engine` `/delta=`_number_{:title="a floating-point number"} `/min-inertia=`_number_{:title="a floating-point number"} `/particles=`_integer_{:title="an integer"} `/starting-inertia=`_number_{:title="a floating-point number"} **(fit command)**

  * `/delta=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/min-inertia=`_number_{:title="a floating-point number"}:  -- values: a floating-point number
  * `/particles=`_integer_{:title="an integer"}:  -- values: an integer
  * `/starting-inertia=`_number_{:title="a floating-point number"}:  -- values: a floating-point number

{::comment} synopsis-end: fit-pso-engine {:/}
{::comment} description-start: fit-pso-engine {:/}
This command selects the Particle Swarm Optimizer fit engine.
{::comment} description-end: fit-pso-engine {:/}

## Fit parameters manipulation

Here are a series of commands to manipulate the value and state of
parameters.

### Parameter name specification {#fit-parameter-spec}

Several commands work with parameter names. In single-buffer fits, the
situation is simple, since the `name` just designates the
corresponding parameter. For multi-buffer fits, one can also use
`name[#0]` to only designate the parameter name for the first buffer
(the numbering starts at 0). The number of the buffer is given in the
box on the first line under the fit data, and as the column number in
the parameters spreadsheet.

{::comment} synopsis-start: fit-fix {:/}

### `fix` - Fix parameter {#fit-cmd-fix}

`fix` _parameter_{:title="..."} **(fit command)**

  * _parameter_{:title="..."}: the parameters to fix/unfix -- values: ...

{::comment} synopsis-end: fit-fix {:/}
{::comment} description-start: fit-fix {:/}
Fix the parameters, given by their names:

~~~ 
QSoas.fit> fix a
QSoas.fit> fix b[#3]
~~~

This fixes parameter `a` everywher and `b` only for buffer `#3`
(i.e. the fourth one).
{::comment} description-end: fit-fix {:/}
{::comment} synopsis-start: fit-unfix {:/}

### `unfix` - Unfix parameter {#fit-cmd-unfix}

`unfix` _parameter_{:title="..."} **(fit command)**

  * _parameter_{:title="..."}: the parameters to fix/unfix -- values: ...

{::comment} synopsis-end: fit-unfix {:/}
{::comment} description-start: fit-unfix {:/}
Same as [fit-cmd: fix] but sets the parameter free.
{::comment} description-end: fit-unfix {:/}

{::comment} synopsis-start: fit-set {:/}

### `set` - Set parameter {#fit-cmd-set}

`set` _parameter_{:title="..."} _value_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/expression=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/fix=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/unfix=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} **(fit command)**

  * _parameter_{:title="..."}: the parameters of the fit -- values: ...
  * _value_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: the value -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/expression=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the value is evaluated as an expression -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/fix=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if true, also fixes the parameters -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/unfix=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if true, also unfixes the parameters -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: fit-set {:/}
{::comment} description-start: fit-set {:/}
Sets the value of the given parameter. With `/expression=true`, the
value is interpreted as an expression that is evaluated immediately in
the context of each fit dataset, as in [cmd: eval] or
[cmd: apply-formula]. The `/fix=true` and `/unfix=true` can be used to
fix or free the parameter at the same time as setting its value.
{::comment} description-end: fit-set {:/}
{::comment} synopsis-start: fit-local {:/}

### `local` - Local parameter {#fit-cmd-local}

`local` _parameter_{:title="..."} **(fit command)**

  * _parameter_{:title="..."}: the parameters whose global/local status to change -- values: ...

{::comment} synopsis-end: fit-local {:/}
{::comment} description-start: fit-local {:/}
Makes the given parameter local to the buffers.
{::comment} description-end: fit-local {:/}
{::comment} synopsis-start: fit-global {:/}

### `global` - Global parameter {#fit-cmd-global}

`global` _parameter_{:title="..."} **(fit command)**

  * _parameter_{:title="..."}: the parameters whose global/local status to change -- values: ...

{::comment} synopsis-end: fit-global {:/}
{::comment} description-start: fit-global {:/}
Makes the given parameter global.
{::comment} description-end: fit-global {:/}
{::comment} synopsis-start: fit-save {:/}

### `save` - Save {#fit-cmd-save}

`save` _file_{:title="name of a file"} `/rotate=`_integer_{:title="an integer"} **(fit command)**

  * _file_{:title="name of a file"}: name of the file for saving the parameters -- values: name of a file
  * `/rotate=`_integer_{:title="an integer"}: if not zero, performs a file rotation before saving -- values: an integer

{::comment} synopsis-end: fit-save {:/}
{::comment} description-start: fit-save {:/}
Saves the current parameters to the given file, as one would with
`Ctrl+S`.
{::comment} description-end: fit-save {:/}
{::comment} synopsis-start: fit-load {:/}

### `load` - Load {#fit-cmd-load}

`load` _file_{:title="name of a file"} `/mode=`_choice_{:title="one of: `buffer-name`, `closest-Z`, `normal`"} **(fit command)**

  * _file_{:title="name of a file"}: name of the file to load the parameters from -- values: name of a file
  * `/mode=`_choice_{:title="one of: `buffer-name`, `closest-Z`, `normal`"}:  -- values: one of: `buffer-name`, `closest-Z`, `normal`

{::comment} synopsis-end: fit-load {:/}
{::comment} description-start: fit-load {:/}
Loads the parameters from the given file.
{::comment} description-end: fit-load {:/}
{::comment} synopsis-start: fit-show-parameters {:/}

### `show-parameters` - Show parameters {#fit-cmd-show-parameters}

`show-parameters` **(fit command)**


{::comment} synopsis-end: fit-show-parameters {:/}
{::comment} description-start: fit-show-parameters {:/}
Displays a dialog box with a graphical display of the fit parameters
with their respective errors. 
{::comment} description-end: fit-show-parameters {:/}
{::comment} synopsis-start: fit-parameters-spreadsheet {:/}

### `parameters-spreadsheet` - Parameters spreadsheet {#fit-cmd-parameters-spreadsheet}

`parameters-spreadsheet` **(fit command)**


{::comment} synopsis-end: fit-parameters-spreadsheet {:/}
{::comment} description-start: fit-parameters-spreadsheet {:/}
Spawns the "parameters spreadsheet" dialog box to easily survey/edit
parameters for a large number of datasets.
{::comment} description-end: fit-parameters-spreadsheet {:/}
{::comment} synopsis-start: fit-export {:/}

### `export` - Export parameters {#fit-cmd-export}

`export` `/errors=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/file=`_file_{:title="name of a file"} **(fit command)**

  * `/errors=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the errors are exported too -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/file=`_file_{:title="name of a file"} (default option): name of the file for saving the parameters -- values: name of a file

{::comment} synopsis-end: fit-export {:/}
{::comment} description-start: fit-export {:/}
Exports the parameters to either to the file given to the `/file=`
option or to the [output file](#output-file) if it is not specified.
{::comment} description-end: fit-export {:/}
{::comment} synopsis-start: fit-reset {:/}

### `reset` - Reset {#fit-cmd-reset}

`reset` `/source=`_choice_{:title="one of: `backup`, `initial`"} **(fit command)**

  * `/source=`_choice_{:title="one of: `backup`, `initial`"}:  -- values: one of: `backup`, `initial`

{::comment} synopsis-end: fit-reset {:/}
{::comment} description-start: fit-reset {:/}
Resets all the parameters, either to the "backup" values (i.e. the
values at the start of the last fit) or to the initial guess.
{::comment} description-end: fit-reset {:/}




## Fit trajectories

When running a fit, QSoas keeps track of all the attemps of fits since
the opening of the fit dialog. A pair "starting parameters" -> "ending
parameters" is called a "fit trajectory". Here are a collection of
functions to work on fit trajectories.


{::comment} synopsis-start: fit-flag-trajectories {:/}

### `flag-trajectories` - Flag trajectories {#fit-cmd-flag-trajectories}

`flag-trajectories` `/flags=`_words_{:title="several words, separated by ','"} **(fit command)**

  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new trajectories -- values: several words, separated by ','

{::comment} synopsis-end: fit-flag-trajectories {:/}
{::comment} description-start: fit-flag-trajectories {:/}
All the subsequent fit trajectories are flagged with the flags given
as the `/flags=` option, until the next call to
[fit-cmd: flag-trajectories]. Calling [fit-cmd: flag-trajectories]
without the `/flags` option clears the flags to add to the new
trajectories.
{::comment} description-end: fit-flag-trajectories {:/}
{::comment} synopsis-start: fit-trim-trajectories {:/}

### `trim-trajectories` - Trim trajectories {#fit-cmd-trim-trajectories}

`trim-trajectories` _threshold_{:title="a floating-point number"} `/at-most=`_integer_{:title="an integer"} **(fit command)**

  * _threshold_{:title="a floating-point number"}: threshold for trimming -- values: a floating-point number
  * `/at-most=`_integer_{:title="an integer"}: keep at most that many trajectories -- values: an integer

{::comment} synopsis-end: fit-trim-trajectories {:/}
{::comment} description-start: fit-trim-trajectories {:/}
Removes from the list of trajectories all the trajectories whose final
residuals are more than _threshold_ greater than the best final residuals.
{::comment} description-end: fit-trim-trajectories {:/}
{::comment} synopsis-start: fit-save-trajectories {:/}

### `save-trajectories` - Save trajectories {#fit-cmd-save-trajectories}

`save-trajectories` _file_{:title="name of a file"} `/flag=`_choice_{:title="one of: ``"} `/mode=`_choice_{:title="one of: `fail`, `overwrite`, `update`"} **(fit command)**

  * _file_{:title="name of a file"}: name of the file for saving the trajectories -- values: name of a file
  * `/flag=`_choice_{:title="one of: ``"}:  -- values: one of: ``
  * `/mode=`_choice_{:title="one of: `fail`, `overwrite`, `update`"}:  -- values: one of: `fail`, `overwrite`, `update`

{::comment} synopsis-end: fit-save-trajectories {:/}
{::comment} description-start: fit-save-trajectories {:/}
Saves the trajectories into a file.
{::comment} description-end: fit-save-trajectories {:/}
{::comment} synopsis-start: fit-load-trajectories {:/}

### `load-trajectories` - Load trajectories {#fit-cmd-load-trajectories}

`load-trajectories` _file_{:title="name of a file"} `/mode=`_choice_{:title="one of: `drop`, `ignore`, `update`"} **(fit command)**

  * _file_{:title="name of a file"}: name of the file for saving the trajectories -- values: name of a file
  * `/mode=`_choice_{:title="one of: `drop`, `ignore`, `update`"}:  -- values: one of: `drop`, `ignore`, `update`

{::comment} synopsis-end: fit-load-trajectories {:/}
{::comment} description-start: fit-load-trajectories {:/}
Loads the trajectories from a previously saved fit trajectory file
(see [fit-cmd: save-trajectories]).
{::comment} description-end: fit-load-trajectories {:/}
{::comment} synopsis-start: fit-browse-trajectories {:/}

### `browse-trajectories` - Browse trajectories {#fit-cmd-browse-trajectories}

`browse-trajectories` **(fit command)**


{::comment} synopsis-end: fit-browse-trajectories {:/}
{::comment} description-start: fit-browse-trajectories {:/}
Shows a dialog box with a spreadsheet to browse all the trajectories
with initial and final parameters.
{::comment} description-end: fit-browse-trajectories {:/}
{::comment} synopsis-start: fit-list-trajectories {:/}

### `list-trajectories` - List trajectories {#fit-cmd-list-trajectories}

`list-trajectories` `/flag=`_choice_{:title="one of: ``"} **(fit command)**

  * `/flag=`_choice_{:title="one of: ``"}:  -- values: one of: ``

{::comment} synopsis-end: fit-list-trajectories {:/}
{::comment} description-start: fit-list-trajectories {:/}
Shows a list of all the trajectories in the terminal.
{::comment} description-end: fit-list-trajectories {:/}
{::comment} synopsis-start: fit-drop-trajectories {:/}

### `drop-trajectories` - Drop trajectories {#fit-cmd-drop-trajectories}

`drop-trajectories` _trajectories_{:title="fit Trajectories"} **(fit command)**

  * _trajectories_{:title="fit Trajectories"}: trajectories to remove -- values: fit Trajectories

{::comment} synopsis-end: fit-drop-trajectories {:/}
{::comment} description-start: fit-drop-trajectories {:/}
Deletes the trajectories whose flags are given as argument.
{::comment} description-end: fit-drop-trajectories {:/}
{::comment} synopsis-start: fit-run-for-trajectories {:/}

### `run-for-trajectories` - Run commands {#fit-cmd-run-for-trajectories}

`run-for-trajectories` _file_{:title="name of a file"} _trajectories_{:title="fit Trajectories"} `/add-to-history=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/cd-to-script=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/error=`_choice_{:title="one of: `abort`, `delete`, `except`, `ignore`"} `/parameters=`_choice_{:title="one of: `final`, `initial`"} `/silent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} **(fit command)**

  * _file_{:title="name of a file"}: the script to run -- values: name of a file
  * _trajectories_{:title="fit Trajectories"}: trajectories to run -- values: fit Trajectories
  * `/add-to-history=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the commands run are added to the history (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/cd-to-script=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, automatically change the directory to that oof the script -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/error=`_choice_{:title="one of: `abort`, `delete`, `except`, `ignore`"}: Behaviour to adopt on error -- values: one of: `abort`, `delete`, `except`, `ignore`
  * `/parameters=`_choice_{:title="one of: `final`, `initial`"}: which parameters to use -- values: one of: `final`, `initial`
  * `/silent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to switch off display updates during the script (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: fit-run-for-trajectories {:/}
{::comment} description-start: fit-run-for-trajectories {:/}
Loops through the specified trajectories, restore their final (or
initial parameters, depending on the `/parameters` option), and runs
the given script. See [cmd: run] for more information about the options.
{::comment} description-end: fit-run-for-trajectories {:/}


## Miscellaneous commands

{::comment} synopsis-start: fit-quit {:/}

### `quit` - Quit {#fit-cmd-quit}

`quit` **(fit command)**


{::comment} synopsis-end: fit-quit {:/}
{::comment} description-start: fit-quit {:/}
Quits the fit window.
{::comment} description-end: fit-quit {:/}
{::comment} synopsis-start: fit-mem {:/}

### `mem` - Memory {#fit-cmd-mem}

`mem` **(fit command)**


{::comment} synopsis-end: fit-mem {:/}
{::comment} description-start: fit-mem {:/}
Like the other [cmd: mem] command, gives some information about the
memory and other resources usage of QSoas.
{::comment} description-end: fit-mem {:/}
{::comment} synopsis-start: fit-select {:/}

### `select` - Select {#fit-cmd-select}

`select` _dataset_{:title="an integer"} **(fit command)**

  * _dataset_{:title="an integer"}: the number of the dataset in the fit (not in the stack) -- values: an integer

{::comment} synopsis-end: fit-select {:/}
{::comment} description-start: fit-select {:/}
Views the numbered dataset in the fit window. The number corresponds
to the number inside the fit dialog box, not the number in QSoas's stack.
{::comment} description-end: fit-select {:/}
{::comment} synopsis-start: fit-eval {:/}

### `eval` - Evaluate {#fit-cmd-eval}

`eval` _expression_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(fit command)**

  * _expression_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: the expression to evaluate -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-eval {:/}
{::comment} description-start: fit-eval {:/}
Evaluates a [ruby expression](#ruby). The meta-data of the current
buffer are available through the `$meta` variable, and the parameters
of the current buffers are available through their usual name
(including those with special characters and those starting with an
uppercase letter).
{::comment} description-end: fit-eval {:/}
{::comment} synopsis-start: fit-ruby-run {:/}

### `ruby-run` - Ruby load {#fit-cmd-ruby-run}

`ruby-run` _file_{:title="name of a file"} **(fit command)**

  * _file_{:title="name of a file"}: Ruby file to load -- values: name of a file

{::comment} synopsis-end: fit-ruby-run {:/}
{::comment} description-start: fit-ruby-run {:/}
Like the other [cmd: ruby-run], loads and run a [Ruby](#ruby) code file.
{::comment} description-end: fit-ruby-run {:/}
{::comment} synopsis-start: fit-save-history {:/}

### `save-history` - Save history {#fit-cmd-save-history}

`save-history` _file_{:title="name of a file"} **(fit command)**

  * _file_{:title="name of a file"}: Output file -- values: name of a file

{::comment} synopsis-end: fit-save-history {:/}
{::comment} description-start: fit-save-history {:/}
Like the other [cmd: save-history], saves all the commands typed into
the fit window to the given file.
{::comment} description-end: fit-save-history {:/}
{::comment} synopsis-start: fit-run {:/}

### `run` - Run commands {#fit-cmd-run}

`run` _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."} `/add-to-history=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/cd-to-script=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/error=`_choice_{:title="one of: `abort`, `delete`, `except`, `ignore`"} `/silent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} **(fit command)**

Short name: `@`

  * _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."}: First is the command files, following are arguments -- values: one or more files. Can include wildcards such as *, `[0-4]`, etc...
  * `/add-to-history=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the commands run are added to the history (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/cd-to-script=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, automatically change the directory to that oof the script -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/error=`_choice_{:title="one of: `abort`, `delete`, `except`, `ignore`"}: Behaviour to adopt on error -- values: one of: `abort`, `delete`, `except`, `ignore`
  * `/silent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to switch off display updates during the script (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: fit-run {:/}
{::comment} description-start: fit-run {:/}
Like the other [cmd: run] command, runs the given script. The options
and arguments are interpreted the same way as the other [cmd: run]
command.
{::comment} description-end: fit-run {:/}
{::comment} synopsis-start: fit-run-for-each {:/}

### `run-for-each` - Runs a script for several arguments {#fit-cmd-run-for-each}

`run-for-each` _script_{:title="name of a file"} _arguments..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."} `/add-to-history=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/arg4=`_file_{:title="name of a file"} `/arg5=`_file_{:title="name of a file"} `/arg6=`_file_{:title="name of a file"} `/error=`_choice_{:title="one of: `abort`, `delete`, `except`, `ignore`"} `/range-type=`_choice_{:title="one of: `lin`, `log`"} `/silent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} **(fit command)**

  * _script_{:title="name of a file"}: The script file -- values: name of a file
  * _arguments..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."}: All the arguments for the script file to loop on -- values: one or more files. Can include wildcards such as *, `[0-4]`, etc...
  * `/add-to-history=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the commands run are added to the history (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/arg2=`_file_{:title="name of a file"}: Second argument to the script -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: Third argument to the script -- values: name of a file
  * `/arg4=`_file_{:title="name of a file"}: Fourth argument to the script -- values: name of a file
  * `/arg5=`_file_{:title="name of a file"}: Fifth argument to the script -- values: name of a file
  * `/arg6=`_file_{:title="name of a file"}: Sixth argument to the script -- values: name of a file
  * `/error=`_choice_{:title="one of: `abort`, `delete`, `except`, `ignore`"}: Behaviour to adopt on error -- values: one of: `abort`, `delete`, `except`, `ignore`
  * `/range-type=`_choice_{:title="one of: `lin`, `log`"}: If on, transform arguments into ranged numbers -- values: one of: `lin`, `log`
  * `/silent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to switch off display updates during the script (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: fit-run-for-each {:/}
{::comment} description-start: fit-run-for-each {:/}
Like the other [cmd: run-for-each], runs a script for several values
of its first parameter.
{::comment} description-end: fit-run-for-each {:/}
{::comment} synopsis-start: fit-verify {:/}

### `verify` - Verify {#fit-cmd-verify}

`verify` _expression_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} **(fit command)**

  * _expression_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: the expression to evaluate -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "

{::comment} synopsis-end: fit-verify {:/}
{::comment} description-start: fit-verify {:/}
Does the same as the general [cmd: verify] command.
{::comment} description-end: fit-verify {:/}

{::comment} synopsis-start: fit-fit {:/}

### `fit` - Fit {#fit-cmd-fit}

`fit` `/iterations=`_integer_{:title="an integer"} **(fit command)**

  * `/iterations=`_integer_{:title="an integer"}: the maximum number of iterations of the fitting process -- values: an integer

{::comment} synopsis-end: fit-fit {:/}
{::comment} description-start: fit-fit {:/}
Runs the fit, optionally changing the number of maximum fit iterations
through the `/iterations` option.
{::comment} description-end: fit-fit {:/}
{::comment} synopsis-start: fit-commands {:/}

### `commands` - Commands {#fit-cmd-commands}

`commands` **(fit command)**


{::comment} synopsis-end: fit-commands {:/}
{::comment} description-start: fit-commands {:/}
Like the other [cmd: commands] command, list the commands available
from within the fit prompt.
{::comment} description-end: fit-commands {:/}
{::comment} synopsis-start: fit-system {:/}

### `system` - System {#fit-cmd-system}

`system` _command..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."} `/shell=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/timeout=`_integer_{:title="an integer"} **(fit command)**

  * _command..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."}: Arguments of the command  -- values: one or more files. Can include wildcards such as *, `[0-4]`, etc...
  * `/shell=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: use shell (on by default on Linux/Mac, off in windows) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/timeout=`_integer_{:title="an integer"}: timeout (in milliseconds) -- values: an integer

{::comment} synopsis-end: fit-system {:/}
{::comment} description-start: fit-system {:/}
Like the other [cmd: system] command, runs an external program.
{::comment} description-end: fit-system {:/}
{::comment} synopsis-start: fit-push {:/}

### `push` - Push to stack {#fit-cmd-push}

`push` `/flags=`_words_{:title="several words, separated by ','"} `/recompute=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/residuals=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"} `/subfunctions=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} **(fit command)**

  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/recompute=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to recompute the fit (on by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/residuals=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if true, push the residuals rather than the computed values -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`
  * `/subfunctions=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the subfunctions are also exported or not -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: fit-push {:/}
{::comment} description-start: fit-push {:/}
Pushes the computed function to the stack, like the fit `sim-`
command would do.
{::comment} description-end: fit-push {:/}




## Parameter space exploration

QSoas now provides facilities for parameter space exploration. The
idea is that QSoas will attempt several (many!) fits with different
starting parameters. There are different explorers that choose new
starting parameters in a different way, but all explorers can be used
this way:

~~~
QSoas.fit> monte-carlo-explorer A_inf:-10..10
Selected parameter space explorer: 'monte-carlo'
Setting up monte-carlo explorator with: 20 iterations and 50 fit iterations
  * A_inf[#0]: -10 to 10 lin
QSoas.fit> iterate-explorer
~~~ 

The first command sets up the explorer, here the
[fit-cmd: monte-carlo-explorer], and the second iterates the explorer,
chosing new parameters and running the fits, until the number of
iterations specified by the explorer is finished.

{::comment} synopsis-start: fit-monte-carlo-explorer {:/}

### `monte-carlo-explorer` - Monte Carlo {#fit-cmd-monte-carlo-explorer}

`monte-carlo-explorer` _parameters..._{:title="several words, separated by ''"} `/fit-iterations=`_integer_{:title="an integer"} `/iterations=`_integer_{:title="an integer"} `/reset-frequency=`_integer_{:title="an integer"} **(fit command)**

  * _parameters..._{:title="several words, separated by ''"}: Parameter specification -- values: several words, separated by ''
  * `/fit-iterations=`_integer_{:title="an integer"}: Maximum number of fit iterations -- values: an integer
  * `/iterations=`_integer_{:title="an integer"}: Number of monte-carlo iterations -- values: an integer
  * `/reset-frequency=`_integer_{:title="an integer"}: If > 0 reset to the best parameters every that many iterations -- values: an integer

{::comment} synopsis-end: fit-monte-carlo-explorer {:/}
{::comment} description-start: fit-monte-carlo-explorer {:/}
Sets up a "Monte Carlo" exploration, i.e. an exploration in which the
initial parameters are chosen uniformly within given segments.

~~~
QSoas.fit> monte-carlo-explorer A_inf:-10..10 tau_1:1e-2..1e2,log
~~~

This command sets up the exploration, with the parameter `A_inf`
uniformly distributed between -10 and 10, and `tau_1` with a log
uniform distribution between 1e-2 and 1e2. The other parameters are
left untouched from the previous fit iteration.
{::comment} description-end: fit-monte-carlo-explorer {:/}
{::comment} synopsis-start: fit-linear-explorer {:/}

### `linear-explorer` - Linear ramp {#fit-cmd-linear-explorer}

`linear-explorer` _parameters..._{:title="several words, separated by ''"} `/fit-iterations=`_integer_{:title="an integer"} `/iterations=`_integer_{:title="an integer"} **(fit command)**

  * _parameters..._{:title="several words, separated by ''"}: Parameter specification -- values: several words, separated by ''
  * `/fit-iterations=`_integer_{:title="an integer"}: Maximum number of fit iterations -- values: an integer
  * `/iterations=`_integer_{:title="an integer"}: Number of monte-carlo iterations -- values: an integer

{::comment} synopsis-end: fit-linear-explorer {:/}
{::comment} description-start: fit-linear-explorer {:/}
Linearly (or logarithmically) varies the parameter between the given range:

~~~
QSoas.fit> linear-explorer A_inf:-10..10
~~~

This command runs a number of fits with the initial value of `A_inf`
ranging from -10 to +10. You can specify several parameters this way,
they will be varied simultaneously (i.e. they will be linearly
correlated). Adding `,log` switches to an exponential progression.
{::comment} description-end: fit-linear-explorer {:/}

{::comment} synopsis-start: fit-iterate-explorer {:/}

### `iterate-explorer` - Iterate explorer {#fit-cmd-iterate-explorer}

`iterate-explorer` `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/improved-script=`_file_{:title="name of a file"} `/just-pick=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/pre-script=`_file_{:title="name of a file"} `/script=`_file_{:title="name of a file"} **(fit command)**

  * `/arg1=`_file_{:title="name of a file"}: First argument to the scripts -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: Second argument to the scripts -- values: name of a file
  * `/improved-script=`_file_{:title="name of a file"} (default option): script file run whenever the best residuals have improved -- values: name of a file
  * `/just-pick=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If true, then just picks the next initial parameters, don't fit, don't iterate -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/pre-script=`_file_{:title="name of a file"} (default option): script file run after choosing the parameters and before choosing the file -- values: name of a file
  * `/script=`_file_{:title="name of a file"} (default option): script file run after the iteration -- values: name of a file

{::comment} synopsis-end: fit-iterate-explorer {:/}
{::comment} description-start: fit-iterate-explorer {:/}
Runs all the iterations of the previously setup explorer. If
`/just-pick=true` is specified, then just picks the parameters once,
do not run the iterations nor any fit.

The `/pre-script`, `/script` and `/improved-script` options specify
the names of script files that will be run either after picking the
parameters but before running the fit, after the fit, or every time
the best residuals are improved. They can be given additional
arguments through the `/arg1` and `/arg2` options.
{::comment} description-end: fit-iterate-explorer {:/}





# Computation/simulations functions

The commands in this section generate data "from scratch", though most
require a buffer as a starting point to provide X values. You
can create a buffer for those commands using
[cmd: generate-buffer]. 

## Evaluation functions

QSoas provides various functions to evaluate the result of
mathematical operations.

{::comment} synopsis-start: eval {:/}

### `eval` - Ruby eval {#cmd-eval}

`eval` _code_{:title="a piece of [Ruby code](#ruby)"} `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"} `/modify-meta=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/use-dataset=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _code_{:title="a piece of [Ruby code](#ruby)"}: Any ruby code -- values: a piece of [Ruby code](#ruby)
  * `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} (default option): Buffers to run eval on -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"}: Only act on buffers matching the code -- values: a piece of [Ruby code](#ruby)
  * `/modify-meta=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: Reads backs the modifications made to the $meta hash (implies /use-dataset=true) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/use-dataset=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on (the default) and if there is a current dataset, the $meta and $stats hashes are available -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: eval {:/}
{::comment} description-start: eval {:/}
Evaluates the given code as a Ruby expression:

~~~~
QSoas> eval 2*3
 => 6
~~~~

It runs in the same environment as the
[cmd: apply-formula] and the custom fits (excepted,
of course, that there are no `x` and `y` variables). It can be useful
to check that a function has been correctly defined in a file loaded
by [cmd: ruby-run].

Moreover, if `/use-dataset` is true (the default), it can also access
the meta-data and statistics of the (as [cmd: apply-formula] with
`/use-meta=true` and `/use-stats=true`) of the buffer:

~~~~
QSoas> generate-buffer 0 10 x**3
QSoas> eval '$stats["y_int"]'
 => 2500.002505007509
~~~~

You can also use this command as a calculator.
{::comment} description-end: eval {:/}
{::comment} synopsis-start: verify {:/}

### `verify` - Verify {#cmd-verify}

`verify` _code_{:title="a piece of [Ruby code](#ruby)"} `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"} `/use-dataset=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _code_{:title="a piece of [Ruby code](#ruby)"}: Any ruby code -- values: a piece of [Ruby code](#ruby)
  * `/buffers=`_buffers_{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} (default option): Buffers to run verify on -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/for-which=`_code_{:title="a piece of [Ruby code](#ruby)"}: Only act on buffers matching the code -- values: a piece of [Ruby code](#ruby)
  * `/use-dataset=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on (the default) and if there is a current dataset, the $meta and $stats hashes are available -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: verify {:/}
{::comment} description-start: verify {:/}
Evaluates the given [Ruby code](#ruby). If its value is false, the
command fails.

This function only makes sense in scripts, to abort a script before
running long computations if one detects that something went wrong. If
the data you load really should only have positive X values, then you
can ensure that this way:

~~~
# X values are positive
verify $stats.x_min>0
~~~
{::comment} description-end: verify {:/}


{::comment} synopsis-start: find-root {:/}

### `find-root` - Finds a root {#cmd-find-root}

`find-root` _formula_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} _seed_{:title="a floating-point number"} `/max=`_number_{:title="a floating-point number"}

  * _formula_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: An expression of 1 variable (not an equation !) -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * _seed_{:title="a floating-point number"}: Initial X value from which to search -- values: a floating-point number
  * `/max=`_number_{:title="a floating-point number"} (default option): If present, uses dichotomy between seed and max -- values: a floating-point number

{::comment} synopsis-end: find-root {:/}
{::comment} description-start: find-root {:/}

Find the root of the given `x`-dependent expression using an iterative
algorithm, using _seed_ as the initial value. If the `/max` option is
specified, then the search proceeds using dichotomy between the two
values (_seed_ and _max_).

~~~~
QSoas> find-root 'x**2 - 3' 1
Found root at: 1.73205
~~~~

Do not use a equal sign. The returned value is that for which the
expression equates 0.
{::comment} description-end: find-root {:/}
{::comment} synopsis-start: integrate-formula {:/}

### `integrate-formula` - Integrate expression {#cmd-integrate-formula}

`integrate-formula` _formula_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} _a_{:title="a floating-point number"} _b_{:title="a floating-point number"} `/integrator=`_choice_{:title="one of: `gauss15`, `gauss21`, `gauss31`, `gauss41`, `gauss51`, `gauss61`, `qng`"} `/prec-absolute=`_number_{:title="a floating-point number"} `/prec-relative=`_number_{:title="a floating-point number"} `/subdivisions=`_integer_{:title="an integer"}

  * _formula_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: An expression of 1 variable (not an equation !) -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * _a_{:title="a floating-point number"}: Left bound of the segment -- values: a floating-point number
  * _b_{:title="a floating-point number"}: Right bound of the segment -- values: a floating-point number
  * `/integrator=`_choice_{:title="one of: `gauss15`, `gauss21`, `gauss31`, `gauss41`, `gauss51`, `gauss61`, `qng`"}: The algorithm used for integration -- values: one of: `gauss15`, `gauss21`, `gauss31`, `gauss41`, `gauss51`, `gauss61`, `qng`
  * `/prec-absolute=`_number_{:title="a floating-point number"}: Absolute precision required for integration -- values: a floating-point number
  * `/prec-relative=`_number_{:title="a floating-point number"}: Relative precision required for integration -- values: a floating-point number
  * `/subdivisions=`_integer_{:title="an integer"}: Maximum number of subdivisions in the integration algorithm -- values: an integer

{::comment} synopsis-end: integrate-formula {:/}
{::comment} description-start: integrate-formula {:/}
Computes the integral of the given expression of `x` between bounds
_a_ and _b_:

~~~~
QSoas> integrate-formula x**2 10 22
Integral value: 3216	estimated error: 3.57048e-11	 in 31 evaluations over 1 intervals 
~~~~

The available integrators are `gauss`_i_ (with _i_ ranging from 15 to
61), which correspond to adaptive Gauss-Kronrod integrators (starting
with _i_ evaluations), and `qng`, which is a non-adaptive
Gauss-Kronrod integrator. See the [documentation of the GNU Scientific
Library](http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html)
for more information.

{::comment} description-end: integrate-formula {:/}
{::comment} synopsis-start: mintegrate-formula {:/}

### `mintegrate-formula` - Integrate expression {#cmd-mintegrate-formula}

`mintegrate-formula` _formula_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} _a_{:title="a floating-point number"} _b_{:title="a floating-point number"} `/integrator=`_choice_{:title="one of: `akima`, `csplines`, `gk15`, `gk21`, `gk31`, `gk41`, `gk51`, `gk61`, `naive`"} `/max-evaluations=`_integer_{:title="an integer"} `/prec-absolute=`_number_{:title="a floating-point number"} `/prec-relative=`_number_{:title="a floating-point number"}

  * _formula_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: An expression of x and z -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * _a_{:title="a floating-point number"}: Lower Z value -- values: a floating-point number
  * _b_{:title="a floating-point number"}: Upper Z value -- values: a floating-point number
  * `/integrator=`_choice_{:title="one of: `akima`, `csplines`, `gk15`, `gk21`, `gk31`, `gk41`, `gk51`, `gk61`, `naive`"}: The algorithm used for integration -- values: one of: `akima`, `csplines`, `gk15`, `gk21`, `gk31`, `gk41`, `gk51`, `gk61`, `naive`
  * `/max-evaluations=`_integer_{:title="an integer"}: Maximum number of function evaluations -- values: an integer
  * `/prec-absolute=`_number_{:title="a floating-point number"}: Absolute precision required for integration -- values: a floating-point number
  * `/prec-relative=`_number_{:title="a floating-point number"}: Relative precision required for integration -- values: a floating-point number

{::comment} synopsis-end: mintegrate-formula {:/}
{::comment} description-start: mintegrate-formula {:/}
This command takes a function of $$x$$ and $$z$$, two numbers, $$a$$
and $$b$$, and computes, for each value of $$x$$ of the current
buffer, the integral:

$$ g(x) = \int_{z = a}^{b} f(x,z) \mathrm{d}z $$

This command uses the same algorithms for integration as the fits
created by [cmd: define-distribution-fit].
{::comment} description-end: mintegrate-formula {:/}

{::comment} synopsis-start: generate-buffer {:/}

### `generate-buffer` - Generate buffer {#cmd-generate-buffer}

`generate-buffer` _start_{:title="a floating-point number"} _end_{:title="a floating-point number"} `/flags=`_words_{:title="several words, separated by ','"} `/formula=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/number=`_integer_{:title="an integer"} `/samples=`_integer_{:title="an integer"} `/set-meta=`_meta-data_{:title="one or more meta=value assignements"} `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}

  * _start_{:title="a floating-point number"}: The first X value -- values: a floating-point number
  * _end_{:title="a floating-point number"}: The last X value -- values: a floating-point number
  * `/flags=`_words_{:title="several words, separated by ','"}: Flags to set on the new buffers -- values: several words, separated by ','
  * `/formula=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} (default option): Formula to generate the Y values -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/number=`_integer_{:title="an integer"}: generates that many datasets -- values: an integer
  * `/samples=`_integer_{:title="an integer"}: number of data points -- values: an integer
  * `/set-meta=`_meta-data_{:title="one or more meta=value assignements"}: Meta-data to add to the newly created buffers -- values: one or more meta=value assignements
  * `/style=`_style_{:title="one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`"}: Style for the displayed curves -- values: one of: `brown-green`, `red-blue`, `red-green`, `red-to-blue`, `red-yellow-green`

{::comment} synopsis-end: generate-buffer {:/}
{::comment} description-start: generate-buffer {:/}
Generates a buffer with _samples_ samples (by default 1000) uniformly
spaced between _start_ and _end_.

If formula is provided, it sets Y values according to this formula
(else Y is take equal to X).


~~~~
QSoas> generate-buffer -10 10 sin(x)
~~~~
{::comment} description-end: generate-buffer {:/}

## Simulation functions



{::comment} synopsis-start: kinetic-system {:/}

### `kinetic-system` - Kinetic system evolver {#cmd-kinetic-system}

`kinetic-system` _reaction-file_{:title="name of a file"} _parameters_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/adaptive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/annotate=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/dump=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/min-step-size=`_number_{:title="a floating-point number"} `/prec-absolute=`_number_{:title="a floating-point number"} `/prec-relative=`_number_{:title="a floating-point number"} `/step-size=`_number_{:title="a floating-point number"} `/stepper=`_stepper_{:title="[ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`"} `/sub-steps=`_integer_{:title="an integer"}

  * _reaction-file_{:title="name of a file"}: File describing the kinetic system -- values: name of a file
  * _parameters_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""}: Parameters of the model -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/adaptive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to use an adaptive stepper (on by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/annotate=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, a last column will contain the number of function evaluation for each step (default false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/dump=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, prints a description of the system rather than solving (default: false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/min-step-size=`_number_{:title="a floating-point number"}: minimum step size for the stepper -- values: a floating-point number
  * `/prec-absolute=`_number_{:title="a floating-point number"}: absolute precision required -- values: a floating-point number
  * `/prec-relative=`_number_{:title="a floating-point number"}: relative precision required -- values: a floating-point number
  * `/step-size=`_number_{:title="a floating-point number"}: initial step size for the stepper -- values: a floating-point number
  * `/stepper=`_stepper_{:title="[ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`"}: algorithm used for integration (default: rkf45) -- values: [ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`
  * `/sub-steps=`_integer_{:title="an integer"}: If this is not 0, then the smallest step size is that many times smaller than the minimum delta t -- values: an integer

{::comment} synopsis-end: kinetic-system {:/}
{::comment} description-start: kinetic-system {:/}
Simulates the evolution over time of the [kinetic
system](#kinetic-systems) given in the _reaction-file_ (see the
section [kinetic system](#kinetic-systems) for the syntax of the
reaction files).

This commands will use the current buffer as a source for X values. 

The result is a multi-column buffer containing the concentration of
all the species in the different columns.

_parameters_ is a list of assignments evaluated at the beginning of the
time evolution to set the parameters of the system. (all parameters
not set this way default to 0). This list is evaluated as
[Ruby](#ruby) code, so you should separate the assignments with `;`.

For instance, if the reaction file (`system.sys`) contains:

~~~
A <=>[ki][ka] I
~~~

You can run the following commands to simulate the time evolution of
the system with initial concentration of A equal to 1 (the parameter
`c0_A`), of I equal to 0 (the parameter `c0_I`, here not specified so
assumed to be 0) and with `ki` and `ka` equal to 1:

~~~
QSoas> generate-buffer 0 10
QSoas> kinetic-system system.sys 'c0_A = 1;ka = 1; ki = 1'
~~~

{::comment} description-end: kinetic-system {:/}


{::comment} synopsis-start: ode {:/}

### `ode` - ODE solver {#cmd-ode}

`ode` _file_{:title="name of a file"} `/adaptive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/annotate=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/dump=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/min-step-size=`_number_{:title="a floating-point number"} `/parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} `/prec-absolute=`_number_{:title="a floating-point number"} `/prec-relative=`_number_{:title="a floating-point number"} `/step-size=`_number_{:title="a floating-point number"} `/stepper=`_stepper_{:title="[ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`"} `/sub-steps=`_integer_{:title="an integer"}

  * _file_{:title="name of a file"}: File containing the system -- values: name of a file
  * `/adaptive=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to use an adaptive stepper (on by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/annotate=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, a last column will contain the number of function evaluation for each step -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/dump=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, do not integrate, just dumps the parse contents of the ODE file -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/min-step-size=`_number_{:title="a floating-point number"}: minimum step size for the stepper -- values: a floating-point number
  * `/parameters=`_text_{:title="arbitrary text. If you need spaces, do not forget to quote them with ' or ""} (default option): Values of the parameters -- values: arbitrary text. If you need spaces, do not forget to quote them with ' or "
  * `/prec-absolute=`_number_{:title="a floating-point number"}: absolute precision required -- values: a floating-point number
  * `/prec-relative=`_number_{:title="a floating-point number"}: relative precision required -- values: a floating-point number
  * `/step-size=`_number_{:title="a floating-point number"}: initial step size for the stepper -- values: a floating-point number
  * `/stepper=`_stepper_{:title="[ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`"}: algorithm used for integration (default: rkf45) -- values: [ODE stepper algorithm](#ode-stepper), one of: `bsimp`, `msadams`, `msbdf`, `rk1imp`, `rk2`, `rk2imp`, `rk4`, `rk4imp`, `rk8pd`, `rkck`, `rkf45`
  * `/sub-steps=`_integer_{:title="an integer"}: If this is not 0, then the smallest step size is that many times smaller than the minimum delta t -- values: an integer

{::comment} synopsis-end: ode {:/}
{::comment} description-start: ode {:/}
`ode` solves ordinary differential equations. The equation definition
file is structured in three parts, separated by at least one fully
blank line, the last one being optional. 

The first section defines the "initial conditions"; there are as many
integrated variables as there are lines in this section. This section
is only evaluated once at the beginning of the integration.

The second section defines the derivatives; they are evaluated several
times for each time step.

The third is optional and is described further below.

Here is the contents of the file (say `sine.ode`) one would use to
obtain $$\sin t$$ and $$\cos t$$ as solutions.

~~~
sin = 0
cos = 1

d_sin = cos
d_cos = -sin
~~~

After running the commands

~~~
QSoas> generate-buffer 0 10
QSoas> ode sine.ode
~~~

One has a buffer with one X column (representing the $$t$$ values),
and two Y columns, $$\sin t$$ and $$\cos t$$ (in the order in which
they are given in the "initial conditions" section).

The optional third section can be used to control the exact output of
the program. The above example can be completed thus:

~~~
sin = 0
cos = 1

d_sin = cos
d_cos = -sin

[sin, cos, sin**2 + cos**2]
~~~

Using this gives 3 Y columns: $$\sin t$$, $$\cos t$$ and 
$$\sin^2 t + \cos^2 t$$, that should hopefully be very close to 1.

Details of the integrations procedures can be tweaked using the
parameters:

 * `/stepper`: the ODE stepper algorithm. You can find more about them
   in the [GSL
   documentation](http://www.gnu.org/software/gsl/manual/html_node/Stepping-Functions.html).
   `rkf45` is the standard Runge-Kutta-Feldberg integrator, and is the
   default choice. If QSoas complains that it has difficulties to
   integrate and that you should try implicit solvers (because your
   system is too
   [stiff](https://en.wikipedia.org/wiki/Stiff_equation), then try
   `rk4imp`, `bsimp`, `msadams` or `msbdf`.
 * `/prec-relative` and `/prec-absolute` control the precision. A step
   will be deemed precise enough if the error estimate is smaller than
   **either** the relative precision or the absolute precision
 * `/adaptive` controls whether an adaptive step size is used (the
   values of $$t$$ in the resulting buffer are always those asked, but
   there may be more intermediate steps). You should seldom need to
   turn it off.

If `/annotate` is on, a last column is added that contains the number
of the evaluations of derivatives for each step (useful for
understanding why an integration takes so long, for instance).

The system of equations may contain undefined variables; one could
have for instance used:

~~~
d_sin = omega * cos
d_cos = -omega * sin
~~~

Their values are set to 0 by default. You can change their values
using the `/parameters` option:

~~~
QSoas> ode sine.ode /parameters="omega = 3"
~~~

{::comment} description-end: ode {:/}


# Scripting facilities {#scripting}

QSoas provides facilities for scripting, ie running commands
unattended, for instance for preparing series of data files for
fitting or further use. The following commands are useful only in this
context.


## Scripting commands

{::comment} synopsis-start: run {:/}

### `run` - Run commands {#cmd-run}

`run` _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."} `/add-to-history=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/cd-to-script=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/error=`_choice_{:title="one of: `abort`, `delete`, `except`, `ignore`"} `/silent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

Short name: `@`

  * _file..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."}: First is the command files, following are arguments -- values: one or more files. Can include wildcards such as *, `[0-4]`, etc...
  * `/add-to-history=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the commands run are added to the history (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/cd-to-script=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: If on, automatically change the directory to that oof the script -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/error=`_choice_{:title="one of: `abort`, `delete`, `except`, `ignore`"}: Behaviour to adopt on error -- values: one of: `abort`, `delete`, `except`, `ignore`
  * `/silent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to switch off display updates during the script (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: run {:/}
{::comment} description-start: run {:/}
Run commands saved in a file. If a compulsory argument is missing,
QSoas will prompt the user.

Arguments following the name of the script are passed to the script as
"special variables" `${1}`, and `${2}` etc.

Imagine you are often doing the same processing a given type of data
files, say, simply filtering them. You just have to write a script
`process.cmd` containing:

~~~~
load ${1}
auto-filter-fft 
~~~~

And run it this way:

~~~~
QSoas> run process.cmd data_file.dat
~~~~

or

~~~~
QSoas> @ process.cmd data_file.dat
~~~~

If you use `run` regularly, you may be interested in the other
scripting commands, such as [cmd: run-for-each],
[cmd: run-for-datasets] and [cmd: startup-files]

If you want to manipulate the arguments or provide defaut values for
some of them, you can use the following syntax:

 * `${2%%suffix}` will be replaced by parameter 2 with the suffix "`suffix`"
   removed, or simply parameter 2 if it does not end with "`suffix`".
 * `${2##prefix}` will be replaced by parameter 2 with the prefix "`prefix`"
   removed, or simply parameter 2 if it does not start with "`prefix`".
 * `${2:-value}`: this will be replaced by parameter 2 if it has been
   provided to the script, or by "`value`" if it has not been provided.
 * `${2:+value}`: this will be replaced by "`value`" if parameter 2 has been
   provided to the script, or by nothing if that is not the case (the
   value of parameter 2 is not used).
 * `${2?yes:no}`: this will be replaced by "`yes`" if parameter 2 has been
   provided to the script, or by "`no`" if that is not the case.

####Error handling {#script-error-handling}
It is possible to change how the script handles errors using the
`/error` option, which can take the following values:

 * `abort` (the default behaviour): when a command in the script
   fails, the script stops executing, and the control comes back to
   either the command-line or the calling script. In the latter case,
   this behaviour is not considered as an error (i.e. the calling
   script does not abort);
 * `ignore`: if a command in the script fails, the script keeps on
   running;
 * `except`: as in `abort`, but this is considered as an error, so
   this may also stop the calling script;
 * `delete`: as in `abort`, but all the datasets generated during the
   execution of this script are removed from the stack.


{::comment} description-end: run {:/}




{::comment} synopsis-start: startup-files {:/}

### `startup-files` - Startup files {#cmd-startup-files}

`startup-files` `/add=`_file_{:title="name of a file"} `/rm=`_integer_{:title="an integer"} `/run=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * `/add=`_file_{:title="name of a file"} (default option): adds the given startup file -- values: name of a file
  * `/rm=`_integer_{:title="an integer"}: removes the numbered file -- values: an integer
  * `/run=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: if on, runs all the startup files right now (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: startup-files {:/}
{::comment} description-start: startup-files {:/}
This command instructs `QSoas` to execute command files
at startup. Without options, it displays the list of command
files that `QSoas` will read at the next startup.

Files given to the `/add` options are added at the end of the list.

To remove a file from the list, obtain its number by running
startup-files without any option, then use
startup-files again with the option /rm=.

You can re-run all startup files by running:

~~~
QSoas> startup-files /run=true
~~~

{::comment} description-end: startup-files {:/}
{::comment} synopsis-start: run-for-each {:/}

### `run-for-each` - Runs a script for several arguments {#cmd-run-for-each}

`run-for-each` _script_{:title="name of a file"} _arguments..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."} `/add-to-history=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/arg4=`_file_{:title="name of a file"} `/arg5=`_file_{:title="name of a file"} `/arg6=`_file_{:title="name of a file"} `/error=`_choice_{:title="one of: `abort`, `delete`, `except`, `ignore`"} `/range-type=`_choice_{:title="one of: `lin`, `log`"} `/silent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _script_{:title="name of a file"}: The script file -- values: name of a file
  * _arguments..._{:title="one or more files. Can include wildcards such as *, `[0-4]`, etc..."}: All the arguments for the script file to loop on -- values: one or more files. Can include wildcards such as *, `[0-4]`, etc...
  * `/add-to-history=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the commands run are added to the history (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/arg2=`_file_{:title="name of a file"}: Second argument to the script -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: Third argument to the script -- values: name of a file
  * `/arg4=`_file_{:title="name of a file"}: Fourth argument to the script -- values: name of a file
  * `/arg5=`_file_{:title="name of a file"}: Fifth argument to the script -- values: name of a file
  * `/arg6=`_file_{:title="name of a file"}: Sixth argument to the script -- values: name of a file
  * `/error=`_choice_{:title="one of: `abort`, `delete`, `except`, `ignore`"}: Behaviour to adopt on error -- values: one of: `abort`, `delete`, `except`, `ignore`
  * `/range-type=`_choice_{:title="one of: `lin`, `log`"}: If on, transform arguments into ranged numbers -- values: one of: `lin`, `log`
  * `/silent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to switch off display updates during the script (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: run-for-each {:/}
{::comment} description-start: run-for-each {:/}
Runs the given script file successively for each argument given. For
instance, running:

~~~
QSoas> run-for-each process-my-file.cmds file1 file2 file3
~~~

Is equivalent to running successively

~~~
QSoas> @ process-my-file.cmds file1 
QSoas> @ process-my-file.cmds file2
QSoas> @ process-my-file.cmds file3
~~~

The arguments may not be file names, although automatic completion
will only complete file names. If the script you want to run requires
more than one argument, you can specify them (for all the runs) using
the options `/arg2`, `/arg3` and so on:

~~~
QSoas> run-for-each process-my-file.cmds /arg2=other file1 file2 
~~~

Is equivalent to running:

~~~
QSoas> @ process-my-file.cmds file1 other
QSoas> @ process-my-file.cmds file2 other
~~~

If you specify either `/range-type=lin` or `/range-type=log`, the
parameters are interpreted differently, and are expected to be of the
type `1..10:20`, which means 20 numbers between 1 and 10 (inclusive),
that are spaced either linearly or logarithmically, depending on the
value of the option.

The `/error=` option controls how the scripts handle errors. See
[cmd: run] for more information.
{::comment} description-end: run-for-each {:/}
{::comment} synopsis-start: run-for-datasets {:/}

### `run-for-datasets` - Runs a script for several datasets {#cmd-run-for-datasets}

`run-for-datasets` _script_{:title="name of a file"} _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"} `/add-to-history=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"} `/arg1=`_file_{:title="name of a file"} `/arg2=`_file_{:title="name of a file"} `/arg3=`_file_{:title="name of a file"} `/arg4=`_file_{:title="name of a file"} `/arg5=`_file_{:title="name of a file"} `/arg6=`_file_{:title="name of a file"} `/error=`_choice_{:title="one of: `abort`, `delete`, `except`, `ignore`"} `/silent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}

  * _script_{:title="name of a file"}: The script file -- values: name of a file
  * _datasets..._{:title="comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)"}: All the arguments for the script file to loop on -- values: comma-separated lists of buffers in the stack, see [buffers lists](#buffer-lists)
  * `/add-to-history=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether the commands run are added to the history (defaults to false) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`
  * `/arg1=`_file_{:title="name of a file"}: First argument to the script -- values: name of a file
  * `/arg2=`_file_{:title="name of a file"}: Second argument to the script -- values: name of a file
  * `/arg3=`_file_{:title="name of a file"}: Third argument to the script -- values: name of a file
  * `/arg4=`_file_{:title="name of a file"}: Fourth argument to the script -- values: name of a file
  * `/arg5=`_file_{:title="name of a file"}: Fifth argument to the script -- values: name of a file
  * `/arg6=`_file_{:title="name of a file"}: Sixth argument to the script -- values: name of a file
  * `/error=`_choice_{:title="one of: `abort`, `delete`, `except`, `ignore`"}: Behaviour to adopt on error -- values: one of: `abort`, `delete`, `except`, `ignore`
  * `/silent=`_yes-no_{:title="a boolean: `yes`, `on`, `true` or `no`, `off`, `false`"}: whether or not to switch off display updates during the script (off by default) -- values: a boolean: `yes`, `on`, `true` or `no`, `off`, `false`

{::comment} synopsis-end: run-for-datasets {:/}
{::comment} description-start: run-for-datasets {:/}
Runs the given script file for each of the datasets given. Before each
invocation of the script, the dataset is pushed back to the top of the
stack, as if by [cmd: fetch].

The `/error=` option controls how the scripts handle errors. See
[cmd: run] for more information.
{::comment} description-end: run-for-datasets {:/}
{::comment} synopsis-start: noop {:/}

### `noop` - No op {#cmd-noop}

`noop` `/*=`_words_{:title="several words, separated by ''"}

  * `/*=`_words_{:title="several words, separated by ''"} (default option): Ignored options -- values: several words, separated by ''

{::comment} synopsis-end: noop {:/}
{::comment} description-start: noop {:/}
Does nothing.

This command can be combined with the advanced argument
uses described in [cmd: run] to conditionally execute some commands.
{::comment} description-end: noop {:/}


## Non-interactive commands {#non-interactive}

In addition to purely scripting commands, many commands do not require
user interaction, provided all their arguments are given. They are
listed here:

{::comment} non-interactive-start {:/}

 * [`1`](#cmd-1)
 * [`2`](#cmd-2)
 * [`add`](#cmd-add)
 * [`apply-formula`](#cmd-apply-formula)
 * [`assert`](#cmd-assert)
 * [`auto-correlation`](#cmd-auto-correlation)
 * [`auto-filter-bs`](#cmd-auto-filter-bs)
 * [`auto-filter-fft`](#cmd-auto-filter-fft)
 * [`auto-flag`](#cmd-auto-flag)
 * [`auto-reglin`](#cmd-auto-reglin)
 * [`average`](#cmd-average)
 * [`bin`](#cmd-bin)
 * [`break`](#cmd-break)
 * [`browse`](#cmd-browse)
 * [`cat`](#cmd-cat)
 * [`cd`](#cmd-cd)
 * [`chop`](#cmd-chop)
 * [`clear`](#cmd-clear)
 * [`clear-stack`](#cmd-clear-stack)
 * [`combine-fits`](#cmd-combine-fits)
 * [`commands`](#cmd-commands)
 * [`comment`](#cmd-comment)
 * [`contract`](#cmd-contract)
 * [`credits`](#cmd-credits)
 * [`custom-fit`](#cmd-custom-fit)
 * [`dataset-options`](#cmd-dataset-options)
 * [`debug`](#cmd-debug)
 * [`define-alias`](#cmd-define-alias)
 * [`define-derived-fit`](#cmd-define-derived-fit)
 * [`define-distribution-fit`](#cmd-define-distribution-fit)
 * [`define-kinetic-system-fit`](#cmd-define-kinetic-system-fit)
 * [`diff`](#cmd-diff)
 * [`diff2`](#cmd-diff2)
 * [`display-aliases`](#cmd-display-aliases)
 * [`div`](#cmd-div)
 * [`downsample`](#cmd-downsample)
 * [`drop`](#cmd-drop)
 * [`dx`](#cmd-dx)
 * [`dy`](#cmd-dy)
 * [`echem-peaks`](#cmd-echem-peaks)
 * [`edit`](#cmd-edit)
 * [`eval`](#cmd-eval)
 * [`expand`](#cmd-expand)
 * [`fetch`](#cmd-fetch)
 * [`find-peaks`](#cmd-find-peaks)
 * [`find-root`](#cmd-find-root)
 * [`find-steps`](#cmd-find-steps)
 * [`flag`](#cmd-flag)
 * [`generate-buffer`](#cmd-generate-buffer)
 * [`graphics-settings`](#cmd-graphics-settings)
 * [`help`](#cmd-help)
 * [`hide-buffer`](#cmd-hide-buffer)
 * [`integrate`](#cmd-integrate)
 * [`integrate-formula`](#cmd-integrate-formula)
 * [`interpolate`](#cmd-interpolate)
 * [`kinetic-system`](#cmd-kinetic-system)
 * [`limits`](#cmd-limits)
 * [`load`](#cmd-load)
 * [`load-as-chi-txt`](#cmd-load-as-chi-txt)
 * [`load-as-csv`](#cmd-load-as-csv)
 * [`load-as-eclab-ascii`](#cmd-load-as-eclab-ascii)
 * [`load-as-parameters`](#cmd-load-as-parameters)
 * [`load-as-text`](#cmd-load-as-text)
 * [`load-fits`](#cmd-load-fits)
 * [`load-stack`](#cmd-load-stack)
 * [`mem`](#cmd-mem)
 * [`merge`](#cmd-merge)
 * [`mintegrate-formula`](#cmd-mintegrate-formula)
 * [`multiply`](#cmd-multiply)
 * [`noop`](#cmd-noop)
 * [`norm`](#cmd-norm)
 * [`ode`](#cmd-ode)
 * [`output`](#cmd-output)
 * [`overlay`](#cmd-overlay)
 * [`overlay-buffer`](#cmd-overlay-buffer)
 * [`points`](#cmd-points)
 * [`pop`](#cmd-pop)
 * [`print`](#cmd-print)
 * [`pwd`](#cmd-pwd)
 * [`quit`](#cmd-quit)
 * [`record-meta`](#cmd-record-meta)
 * [`redo`](#cmd-redo)
 * [`remove-spikes`](#cmd-remove-spikes)
 * [`rename`](#cmd-rename)
 * [`reparametrize-fit`](#cmd-reparametrize-fit)
 * [`reverse`](#cmd-reverse)
 * [`ruby-run`](#cmd-ruby-run)
 * [`run`](#cmd-run)
 * [`run-for-datasets`](#cmd-run-for-datasets)
 * [`run-for-each`](#cmd-run-for-each)
 * [`save`](#cmd-save)
 * [`save-buffers`](#cmd-save-buffers)
 * [`save-history`](#cmd-save-history)
 * [`save-output`](#cmd-save-output)
 * [`save-stack`](#cmd-save-stack)
 * [`segments-chop`](#cmd-segments-chop)
 * [`set-meta`](#cmd-set-meta)
 * [`set-perp`](#cmd-set-perp)
 * [`shiftx`](#cmd-shiftx)
 * [`show`](#cmd-show)
 * [`show-stack`](#cmd-show-stack)
 * [`sim-adsorbed`](#cmd-sim-adsorbed)
 * [`sim-eci-wave`](#cmd-sim-eci-wave)
 * [`sim-ecr-wave`](#cmd-sim-ecr-wave)
 * [`sim-eeci-wave`](#cmd-sim-eeci-wave)
 * [`sim-eecr-relay-wave`](#cmd-sim-eecr-relay-wave)
 * [`sim-eecr-wave`](#cmd-sim-eecr-wave)
 * [`sim-exponential-decay`](#cmd-sim-exponential-decay)
 * [`sim-gaussian`](#cmd-sim-gaussian)
 * [`sim-kinetic-system`](#cmd-sim-kinetic-system)
 * [`sim-linear-kinetic-system`](#cmd-sim-linear-kinetic-system)
 * [`sim-lorentzian`](#cmd-sim-lorentzian)
 * [`sim-multiexp-multistep`](#cmd-sim-multiexp-multistep)
 * [`sim-nernst`](#cmd-sim-nernst)
 * [`sim-ode`](#cmd-sim-ode)
 * [`sim-polynomial`](#cmd-sim-polynomial)
 * [`sim-pseudo-voigt`](#cmd-sim-pseudo-voigt)
 * [`sim-slow-scan-hp`](#cmd-sim-slow-scan-hp)
 * [`sim-slow-scan-lp`](#cmd-sim-slow-scan-lp)
 * [`solve`](#cmd-solve)
 * [`sort`](#cmd-sort)
 * [`split-monotonic`](#cmd-split-monotonic)
 * [`split-on-values`](#cmd-split-on-values)
 * [`splita`](#cmd-splita)
 * [`splitb`](#cmd-splitb)
 * [`startup-files`](#cmd-startup-files)
 * [`stats`](#cmd-stats)
 * [`strip-if`](#cmd-strip-if)
 * [`subtract`](#cmd-subtract)
 * [`system`](#cmd-system)
 * [`temperature`](#cmd-temperature)
 * [`timer`](#cmd-timer)
 * [`transpose`](#cmd-transpose)
 * [`tweak-columns`](#cmd-tweak-columns)
 * [`undo`](#cmd-undo)
 * [`unflag`](#cmd-unflag)
 * [`unwrap`](#cmd-unwrap)
 * [`verify`](#cmd-verify)
 * [`version`](#cmd-version)
 * [`zero`](#cmd-zero)
{::comment} non-interacive-end {:/}


# Mathematical formulas using Ruby {#ruby}

QSoas internally uses [Ruby][ruby] (or more precisely its embedded
version, [mruby][mruby]) for the interpretation of all
formulas. This
means in particular that all formulas must be valid ruby code.

Basically, the [Ruby][ruby] syntax ressembles that of other symbolic
evaluation programs (it is quite close to the one from
[gnuplot][gnuplot]), with the following restrictions: 

 * Parameter names **cannot start with an uppercase letter**, as those have a
   special meaning to the Ruby interpreter: anything that starts with
   an uppercase letter is assumed to be a constant.
 * Don't abbreviate floating point numbers: `2.` and `.4` are invalid, use
   `2.0` and `0.4` instead.
 * **Case matters**: `Pi` is $$\pi$$, while `pi` is nothing defined.
 * Exponentiation is done with the `**` operator. The `^` operator is
   used for binary XOR.
 * Logical OR is done with the `||` operator and logical AND with the
   `&&` operator. The single-letter versions, `|` and `&` are
   **binary** operators and will not work as you intend.

Most ruby expressions can make use of dataset information, such as
meta-data or statistics (see the documentation of the specific command
for more information about how to make this available). The most easy
way to do so is to use for instance `$stats.y_max` to refer to the
`y_max` statistic.


## Special functions {#special-functions}

In addition to standard mathematical functions from the [Math][math]
module (that contains, among others, the error function
[`erf`](http://www.ruby-doc.org/core-1.9.3/Math.html#method-c-erf)), the following special functions are available:

{::comment} special-functions-start {:/}

 * `abs(x)`: $$\|x\|$$
 * `airy_ai(x)`: Airy Ai function $$AiryAi(x)$$. Precision to about $$10^{-7}$$. Other variants available: `airy_ai_fast` is faster, (precision $$5\times10^{-4}$$) and `airy_ai_double` slower, (precision $$2\times10^{-16}$$).  (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#airy-functions-and-derivatives))
 * `airy_ai_deriv(x)`: First derivative of Airy Ai function $$\mathrm{d}AiryAi(x)/\mathrm{d}x$$. Precision to about $$10^{-7}$$. Other variants available: `airy_ai_deriv_fast` is faster, (precision $$5\times10^{-4}$$) and `airy_ai_deriv_double` slower, (precision $$2\times10^{-16}$$).  (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#airy-functions-and-derivatives))
 * `airy_bi(x)`: Airy Bi function $$AiryBi(x)$$. Precision to about $$10^{-7}$$. Other variants available: `airy_bi_fast` is faster, (precision $$5\times10^{-4}$$) and `airy_bi_double` slower, (precision $$2\times10^{-16}$$).  (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#airy-functions-and-derivatives))
 * `airy_bi_deriv(x)`: First derivative of Airy Bi function $$\mathrm{d}AiryBi(x)/\mathrm{d}x$$. Precision to about $$10^{-7}$$. Other variants available: `airy_bi_deriv_fast` is faster, (precision $$5\times10^{-4}$$) and `airy_bi_deriv_double` slower, (precision $$2\times10^{-16}$$).  (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#airy-functions-and-derivatives))
 * `atanc(x)`: $$\frac{\tan^{-1} x}{x}$$
 * `atanhc(x)`: $$\frac{\tanh^{-1} x}{x}$$
 * `bessel_j0(x)`: Regular cylindrical Bessel function of 0th order, $$J_0(x)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#bessel-functions))
 * `bessel_j1(x)`: Regular cylindrical Bessel function of first order, $$J_1(x)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#bessel-functions))
 * `bessel_jn(x,n)`: Regular cylindrical Bessel function of n-th order, $$J_n(x)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#bessel-functions))
 * `bessel_y0(x)`: Irregular cylindrical Bessel function of 0th order, $$Y_0(x)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#irregular-cylindrical-bessel-functions))
 * `bessel_y1(x)`: Irregular cylindrical Bessel function of first order, $$Y_1(x)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#irregular-cylindrical-bessel-functions))
 * `bessel_yn(x,n)`: Irregular cylindrical Bessel function of n-th order, $$Y_n(x)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#irregular-cylindrical-bessel-functions))
 * `clausen(x)`: Clausen integral, $$Cl_2(x) = -\int_0^x \mathrm{d}t \log(2\sin(t/2))$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#clausen-functions))
 * `dawson(x)`: Dawson integral, $$\exp(-x^2)\int_{0}^{x}\exp(t^2)\mathrm{d} t$$
 * `debye_1(x)`: Debye function of order 1, $$D_1 = (1/x) \int_0^x \mathrm{d}t (t/(e^t - 1))$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#debye-functions))
 * `debye_2(x)`: Debye function of order 2, $$D_2 = (2/x^2) \int_0^x \mathrm{d}t (t^2/(e^t - 1))$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#debye-functions))
 * `debye_3(x)`: Debye function of order 3, $$D_3 = (3/x^3) \int_0^x \mathrm{d}t (t^3/(e^t - 1))$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#debye-functions))
 * `debye_4(x)`: Debye function of order 4, $$D_4 = (4/x^4) \int_0^x \mathrm{d}t (t^4/(e^t - 1))$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#debye-functions))
 * `debye_5(x)`: Debye function of order 5, $$D_5 = (5/x^5) \int_0^x \mathrm{d}t (t^5/(e^t - 1))$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#debye-functions))
 * `debye_6(x)`: Debye function of order 6, $$D_6 = (6/x^6) \int_0^x \mathrm{d}t (t^6/(e^t - 1))$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#debye-functions))
 * `dilog(x)`: The dilogarithm, $$Li_2(x) = - \Re \left(\int_0^x \mathrm{d}s \log(1-s) / s\right)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#dilogarithm))
 * `expint_e1(x)`: Exponential integral $$E_1(x) = \int_{x}^{\infty} \frac{\exp -t}{t} \mathrm{d} t$$
 * `expint_e2(x)`: Exponential integral $$E_2(x) = \int_{x}^{\infty} \frac{\exp -t}{t^2} \mathrm{d} t$$
 * `expint_en(x,n)`: Exponential integral $$E_n(x) = \int_{x}^{\infty} \frac{\exp -t}{t^n} \mathrm{d} t$$
 * `fermi_dirac_0(x)`: Complete Fermi-Dirac integral (index 0), $$F_0(x) = \ln(1 + e^x)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#complete-fermi-dirac-integrals))
 * `fermi_dirac_1(x)`: Complete Fermi-Dirac integral (index 1), $$F_1(x) = \int_0^\infty \mathrm{d}t (t /(\exp(t-x)+1))$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#complete-fermi-dirac-integrals))
 * `fermi_dirac_2(x)`: Complete Fermi-Dirac integral (index 2), $$F_2(x) = (1/2) \int_0^\infty \mathrm{d}t (t^2 /(\exp(t-x)+1))$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#complete-fermi-dirac-integrals))
 * `fermi_dirac_3half(x)`: Complete Fermi-Dirac integral (index 3/2) (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#complete-fermi-dirac-integrals))
 * `fermi_dirac_half(x)`: Complete Fermi-Dirac integral (index 1/2) (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#complete-fermi-dirac-integrals))
 * `fermi_dirac_m1(x)`: Complete Fermi-Dirac integral (index -1), $$F_{-1}(x) = e^x / (1 + e^x)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#complete-fermi-dirac-integrals))
 * `fermi_dirac_mhalf(x)`: Complete Fermi-Dirac integral (index -1/2) (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#complete-fermi-dirac-integrals))
 * `fermi_dirac_n(x,n)`: Complete Fermi-Dirac integral of index $$n$$, $$F_n(x) = \frac{1}{\Gamma(n+1)} \int_0^\infty \mathrm{d} t \frac{t^n}{\exp(t-x) + 1}$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#complete-fermi-dirac-integrals))
 * `gamma(x)`: The Gauss gamma function $$\Gamma(x) = \int_0^{\infty} dt t^{x-1} \exp(-t)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#gamma-and-beta-functions))
 * `gamma_inc(a,x)`: Incomplete gamma function $$\Gamma(a,x) = \int_x^\infty dt t^{a-1} \exp(-t)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#incomplete-gamma-functions))
 * `gamma_inc_p(a,x)`: Complementary normalized incomplete gamma function $$\Gamma_P(a,x) = 1 - \Gamma_Q(a,x) = 1 - \frac{1}{\Gamma(a)}\int_x^\infty dt t^{a-1} \exp(-t)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#incomplete-gamma-functions))
 * `gamma_inc_q(a,x)`: Normalized incomplete gamma function $$\Gamma_Q(a,x) = \frac{1}{\Gamma(a)}\int_x^\infty dt t^{a-1} \exp(-t)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#incomplete-gamma-functions))
 * `gaussian(x,sigma)`: Normalized gaussian: $$p(x,\sigma) = \frac{1}{\sqrt{2 \pi \sigma^2}} \exp (-x^2 / 2\sigma^2)$$
 * `gsl_erf(x)`: Error function $$\mathrm{erf}(x) = \frac{2}{\sqrt{\pi}}  \int_0^x \mathrm{d}t \exp(-t^2)$$  -- GSL version (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#error-functions))
 * `gsl_erfc(x)`: Complementary error function $$\mathrm{erfc}(x) = 1 - \mathrm{erf}(x)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#error-functions))
 * `hyperg_0F1(c,x)`: Hypergeometric function $${}_0F_1$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#hypergeometric-functions))
 * `hyperg_1F1(a,b,x)`: Hypergeometric function $${}_1F_1(a,b,x)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#hypergeometric-functions))
 * `hyperg_U(a,b,x)`: Hypergeometric function $$U(a,b,x)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#hypergeometric-functions))
 * `k_mhc(lambda, eta)`: Marcus-Hush-Chidsey integral $$k(\lambda, \eta) = \int_{-\infty}^{\infty} \exp\left(\frac{ - (x - \lambda + \eta)^2}{4\lambda}\right) \times \frac{1}{1 + \exp x}\,\mathrm{d}x$$
 * `k_mhc_z(lambda, eta)`: Approximation to the Marcus-Hush-Chidsey integral described in Zeng et al, JEAC 2014, $$k(\lambda, \eta) \approx \int_{-\infty}^{\infty} \exp\left(\frac{ - (x - \lambda + \eta)^2}{4\lambda}\right) \times \frac{1}{1 + \exp x}\,\mathrm{d}x$$ (more information [there](http://dx.doi.org/10.1016/j.jelechem.2014.09.038))
 * `lambert_W(x)`: Principal branch of the Lambert function $$W_0(x)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#lambert-w-functions))
 * `lambert_Wm1(x)`: Secondary branch of the Lambert function $$W_{-1}(x)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#lambert-w-functions))
 * `landau(x)`: Probability density of the Landau distribution, $$p(x) = 1/\pi \int_0^x \mathrm{d}t \exp(-t\log(t) - xt)\sin(\pi t)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/randist.html#the-landau-distribution))
 * `log1p(x)`: $$\ln (1 + x)$$, but accurate for $$x$$ close to 0
 * `lorentzian(x,gamma)`: Normalized gaussian: $$p(x,\gamma) = \frac{1}{ \gamma \pi (1 + (x/\gamma)^2) }$$
 * `pseudo_voigt(x, w, mu)`: Pseudo-Voigt function, defined by: $$\frac{1-\mu}{\sqrt{2 \pi w^2}} \exp (-x^2 / 2w^2) + \frac{\mu}{ w \pi (1 + (x/w)^2) }$$
 * `psi(x)`: Digamma function: $$\psi(x) = \Gamma'(x)/\Gamma(x)$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#digamma-function))
 * `psi_1(x)`: Trigamma function: $$\psi^{(1)} = \frac{\mathrm d \Gamma'(x)/\Gamma(x)}{\mathrm d x}$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#trigamma-function))
 * `psi_n(x, n)`: Polygamma function: $$\psi^{(n)} = \frac{\mathrm d^n \Gamma'(x)/\Gamma(x)}{\mathrm d x
}$$ (more information [there](https://www.gnu.org/software/gsl/doc/html/specfunc.html#polygamma-function))
 * `trumpet_bv(m, alpha, prec)`: Position of an oxidative adsorbed 1-electron peak. $$m$$ is the coefficient defined by Laviron, the value is returned in units of $$RT/F$$

{::comment} special-functions-end {:/}

## Physical constants

Some physical/mathematical constants are available; their name starts
with an **uppercase** letter.

{::comment} constants-start {:/}

 * `Alpha`: The fine structure constant, $$\alpha$$ -- 0.00729735
 * `C`: The speed of light in vacuum, $$c$$ -- 2.99792e+08
 * `Eps_0`: The permeability of vacuum, $$\epsilon_0$$ -- 1.25664e-06
 * `F`: Faraday's constant, $$F$$ -- 96485.3
 * `H`: The Planck constant, $$h$$ -- 6.62607e-34
 * `Hbar`: $$\hbar = h/2\pi$$ -- 1.05457e-34
 * `Kb`: Boltzmann's constant -- 1.38065e-23
 * `M_e`: The mass of the electron, $$m_e$$ -- 9.10938e-31
 * `M_mu`: The mass of the mu, $$m_\mu$$ -- 1.88353e-28
 * `M_n`: The mass of the neutron, $$m_n$$ -- 1.67493e-27
 * `M_p`: The mass of the proton, $$m_p$$ -- 1.67262e-27
 * `Mu_0`: The permittivity of vacuum, $$\mu_0$$ -- 8.85419e-12
 * `Mu_B`: The Bohr Magneton, $$\mu_B$$ -- 9.27401e-24
 * `Na`: The Avogadro number, $$N_A$$ -- 6.02214e+23
 * `Pi`, `PI`: $$\pi$$ -- 3.14159
 * `Q_e`: The absolute value of the charge of the electron, $$e$$ -- 1.60218e-19
 * `R`: Molar gas constant, $$R$$ -- 8.31447
 * `Ry`: The Rydberg constant, $$Ry$$ -- 2.17987e-18
 * `Sigma`: The Stefan-Boltzmann radiation constant -- 5.6704e-08

{::comment} constants-end {:/}

## Other additions to Ruby

The embedded version of [Ruby][ruby], [mruby][mruby], does not have a
regular expression engine. We have added one, but it is not based on
standard [Ruby][ruby] regular expressions, but on the ones from
[Qt][qt-regexps]. For most regular expressions, this should not
matter, however.

# Running QSoas

QSoas can also be useful when run from the command-line.

## Command-line options {#command-line-options}

When starting QSoas from a terminal, you can use a number of
command-line option to change its behaviour. Here are the most useful:

 * `-``-run `_command_ will run the command _command_ after QSoas starts
   up.
 * `-``-exit-after-running` will run the commands specified by `--run`,
   and then exit the program. This can be used to run scripts to
   automatically process data without user interaction.
 * `-``-no-startup-files` disables the loading of
   [startup scripts](#cmd-startup-files).
 * `-``-stdout` makes the text written to the QSoas terminal also appear
   in the standard output (i.e. the terminal from which you started
   QSoas).
 * `-``-load-stack `_file_ loads the given _file_ as a stack file just
   after QSoas starts up.

## Non-interactive running of QSoas {#qsoas-headless}

It is possible to run QSoas completely non-interactively. This can be
useful for regenerating the results of fits, or massively subtracting
baselines...

The simplest way to do so is to use the `scripts/qs-run` script
included in the source code archive. Copy that script where you have
the QSoas command file you want to run, open an operating system
command-line terminal and run:

~~~
# ./qs-run my-command-script.txt
~~~

## Latest version of the documentation


The most recent HTML version of this document can always be found
[there][manual-html], together with the corresponding
[PDF version][manual-pdf].


This file was written by Vincent Fourmond, and is copyright (c)
2012-2020 by CNRS/AMU.

[ruby]:http://www.ruby-lang.org/ "Ruby, the programming language"
[mruby]:https://mruby.org/ "MRuby, the embedded version of Ruby"
[math]:http://www.ruby-doc.org/core-1.9.3/Math.html "Documentation of the Math module"
[gnuplot]:http://www.gnuplot.info/ "Gnuplot, the plotting program"
[code]:downloads/qsoas-1.0.tar.gz "The source code for QSoas"
[manual-html]:http://www.qsoas.org/manual.html "The online manual for QSoas"
[manual-pdf]:http://www.qsoas.org/manual.pdf "The PDF version of the manual for QSoas"
[qt-regexps]:http://qt-project.org/doc/qt-4.8/qregexp.html#introduction "Documentation for Qt regular expressions"
[gsl-steppers]:https://www.gnu.org/software/gsl/doc/html/ode-initval.html#c.gsl_odeiv2_step_type

