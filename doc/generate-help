#! /usr/bin/ruby
# coding: utf-8

# Copyright 2020 by CNRS/AMU
#
# This script is licensed under the same terms as QSoas itself.
#
# This script parses a YAML file containing a list of markdown files
# together with appropriate informations, and generates the
# corresponding HTML files, and the corresponding information in the
# .qhp file, using several templates:
# * a template.html file for HTML
# * a template.qhp file for the QHP code.
#
# What it does:
# * it converts the internal commodity links to commands/fits to the
#   correct version
# * it will eventually handle the generation of images from LaTeX equations
#   (not forgetting the appropriate alt text)
# * it passes the result to kramdown for generation of HTML
# * it generates the sections for QHP generation, warning about missing anchors
# * it generates the keywords for commands
# * ... and runs the regeneration of the collections and such.

require 'optparse'
require 'fileutils'
require 'yaml'

$make_web = false
$target_dir = "out"

opts = OptionParser.new do |opts|
  opts.on("-w", "--web", "make website"
         ) do |x|
    $make_web = true
    $target_dir = "www"
  end
end

opts.parse!(ARGV)

FileUtils.mkdir_p($target_dir)


# The location of the command reference:
$reference = $make_web ? "../reference/" : "qsoas.html"




# A hash equation -> image file name
$equations = {}
eqf = "equations.yaml"
Dir.chdir($target_dir) do
  if File.readable?(eqf) 
    File.open(eqf, "r") { |f| $equations = YAML::load(f) }
  end
end


# A hash command name -> list of examples containing the command.
#
# This is for the [examples: command] syntax.
$examples = {
  'commands' => {},
  'fit-commands' => {},
}
exf = "examples.yaml"
Dir.chdir($target_dir) do
  if File.readable?(exf) 
    File.open(exf, "r") { |f| $examples = YAML::load(f) }
  end
end

# A hash for which just the key is important
$images = {}


# All the available commands, including the aliases.
# A hash name -> anchor name
$commands = {}
$fit_commands = {}

def parse_reference(file)
  File.open(file) do |f|
    cur_cmd = nil
    cur_anchor = nil
    names = []
    for l in f
      if l =~ /::comment.*synopsis-start:\s+([\w-]+)/
        cur_cmd = $1
      elsif l =~ /`[\w-]+` - .* \{#([^}]+)\}/
        cur_anchor = $1
        if cur_anchor =~ /^fit-/
          cur_cmd.gsub!(/^fit-/,'')
        end
        names << cur_cmd
      elsif l =~ /Other name:\s*`(\S+)`/
        names << $1
      elsif l =~ /::comment.*synopsis-end:\s+([\w-]+)/
        if ! cur_anchor
          puts "Error: no anchor for command: #{cur_cmd}/#{$1}/"
        else
          tgt = if cur_anchor =~ /^fit-/
                  $fit_commands
                else
                  $commands
                end
          for n in names
            tgt[n] = cur_anchor
          end
        end
        cur_cmd = nil
        cur_anchor = nil
        names = []
      end
    end
  end
end

def link_for_command(cmd, target)
  if $commands.key? cmd
    return "#{target}##{$commands[cmd]}"
  end
  puts "Error: command not found: '#{cmd}'"
  return "**error**"
end

def link_for_fit_command(cmd, target)
  if $fit_commands.key? cmd
    return "#{target}##{$fit_commands[cmd]}"
  end
  puts "Error: fit command not found: '#{cmd}'"
  return "**error**"
end




# Returns the 
def convert_equation(eq)
  eq.tr!("\n"," ")
  eq.strip!
  info = nil
  if $equations.key?(eq)
    info = $equations[eq]
    if ! File::readable? "#{$target_dir}/#{info['file']}"
      puts "Missing file: #{info['file']}"
      info = nil
    end
  end
  if !info
    info = {}
    info['text'] = eq
    hsh = eq.hash.abs.to_s(16)
    info['file'] = "images/eq-#{hsh}.png"
    puts "Generating image for equation: '#{eq}'"

    # Do compilation
    txt = File.read("equation-template.tex")
    if eq !~ /\{align/
      repl = '$\displaystyle ' + eq + '$'
    else
      repl = eq.dup
      repl.gsub!(/align\*?/,"align*")
    end
    txt.gsub!('#EQUATION',repl)
    Dir.chdir($target_dir) do
      File.open("tmp.tex","w") {|f| f.print txt }
      FileUtils.mkdir_p("images")

      if File::readable? "tmp.dvi"
        File::unlink "tmp.dvi"
      end
      if system("latex -interaction batchmode tmp.tex ")
        $equations[eq] = info
        f = IO::popen("dvipng --depth --height tmp.dvi -o #{info['file']}")
        for l in f
          if l =~ /depth=(\d+)/
            info['depth'] = $1.to_i
          end
          if l =~ /height=(\d+)/
            info['height'] = $1.to_i
          end
        end
      else
      end
    end
  end
  # Unfortunately not used by Qt... but that's already a start !
  return "![#{eq}](#{info['file']}){:style='vertical-align: #{-(info['depth']||0)}px'}"
end

# Returns the example text for the given example hash tag
def examples_for(cmd_tag, short = nil)
  if $make_web
    return "\n"                 # no examples for the web output
  end
  if cmd_tag =~ /^#(fit-)?cmd-(.*)/
    src = nil
    if $1
      src = $examples['fit-commands']
    else
      src = $examples['commands']
    end
    cmd = $2
    hsh = src[cmd] || {}
    if short
      hsh.merge!(src[short] || {})
    end
    if hsh.size == 0
      return ""
    end
    txt = "\n#### Examples\n\n"
    nb = 0
    for k in hsh.keys.sort
      ex = hsh[k]
      if !(ex['id'] == cmd_tag)
        # Only add the examples not found here !
        txt << " * [#{ex['title']}](#{k})\n\n~~~\n#{ex['cmd']}\n~~~\n"
        nb += 1
      end
    end
    if nb > 0
      return "#{txt}\n"
    else
      return "\n"
    end
  end
  return "**?? -- #{cmd_tag}**\n"
end

# Takes a hash with the file name, and fills it with:
# * the sections: an array of {'level', 'title', 'id'}
# * the commands defined in it
# * the fit commands defined in it
# * the fits defined in it
# * the HTML code (once parsed with kramdown)
# * (later:) the latex code
def parse_file(info)
  puts "Parsing: #{info['source']}"

  f = File.open(info['source'], "r")
  ofn = info['tmp'] || (info['source']+".tmp")
  target = ""
  if info['source'] != "qsoas.kd"
    target = $reference
  end

  info['sections'] = []
  info['commands'] = []
  info['fit-commands'] = []
  info['fits'] = []

  # A hash command-name -> list of sections id in which the command is
  # used in an example.
  info['used-commands'] = {}
  info['used-fit-commands'] = {}
    
  sec_h = []
  cur_code = false
  nb = 0
  cur_sec = nil

  # The current tag of the current command -- if applicable
  cur_cmd = nil
  cur_short = nil
  
  txt = ""
  for l in f
    nb += 1

    if l =~ /^~~~/
      cur_code = ! cur_code
    end
    if ! cur_code

      if l =~ /^{::comment}\s*description-end/
        if cur_cmd
          txt << examples_for(cur_cmd, cur_short)
          cur_cmd = nil
        end
      end

      if l =~ /^Other\s+name:\s*`(.*)`/
        cur_short = $1
      end

      if l =~ /^(#+)\s*([^{]+)(\{(#.*)\})?/
        if cur_cmd
          txt << examples_for(cur_cmd, cur_short)
          cur_cmd = nil
        end
        sec = {'title' => $2.chomp}
        if $3
          sec['id'] = $4
        else
          id = "#id-#{nb}"
          sec['id'] = id
          l = "#{l.chomp} {#{id}}\n"
        end
        sec['level'] = $1.size
        cur_sec = sec
        # We have a command
        if sec['id'] =~ /^#(fit-)?cmd-([\w-]+)/
          cur_cmd = sec['id']
        else
          cur_cmd = nil
        end
        # (always)
        cur_short = nil

        
        cur = sec_h[-1] || nil
        while cur && cur['level'] >= sec['level']
          sec_h.pop
          cur = sec_h[-1]
        end
        if cur
          cur["sections"] ||= []
          cur["sections"] << sec
        else
          info['sections'] << sec
        end
        sec_h << sec
        if sec.key? 'id'
          id = sec['id']
          if id =~ /#cmd-(.*)/
            info['commands'] << $1
          end
          if id =~ /#fit-cmd-(.*)/
            info['fit-commands'] << $1
          end
          if id =~ /#cmd-fit-(.*)/
            info['fits'] << $1
          end
        end
      end
      l.gsub!(/\[cmd:\s*([\w-]+)\s*\]/) do
        "[`#{$1}`](#{link_for_command($1, target)})"
      end
      l.gsub!(/\[fit:\s*([\w-]+)\s*\]/) do
        "[`#{$1}`](#{link_for_command('fit-'+$1, target)})"
      end
      l.gsub!(/\[fit-cmd:\s*([\w-]+)\s*\]/) do
        "[`#{$1}`](#{link_for_fit_command($1, target)})"
      end

      l.gsub!(/\[img:\s*([^\]]+)\]/) do |x|
        img = $1
        $images[img] = true
        tgt = $make_web ? img.gsub(/^images\//, '/wp-content/uploads/qsoas/images/') : img
        "![#{img}](#{tgt}){:class='image'} "
      end
      if l =~ /^\[.*:http/
        l << "{: class='external'}\n"
      end
    else
      # l.gsub!('"','\"')
      l.gsub(/^\s*QSoas(\.fit)?>\s*([\w-]+)/) do
        # a command:
        cmd = $2
        tgt = $1 ? "used-fit-commands" : "used-commands"
        
        info[tgt][cmd] ||= []
        info[tgt][cmd] << {
          'file' => info['file'],
          'id' => cur_sec['id'],
          'title' => cur_sec['title'],
          'cmd' => l.chomp
        }
        # Line parsing doesn't work...
        lnk = if $1
                link_for_fit_command(cmd, target)
              else
                link_for_command(cmd, target)
              end
        # "QSoas#{$1}> <a href='#{lnk}'>#{cmd}</a>"
      end
    end
    txt << l
  end

  if ! $make_web
    # Equation parsing is much much easier done with the full file.
    txt.gsub!(/\$\$(.*?)\$\$/m) do |x|
      convert_equation($1)
    end
  end

  # Make sure all external links are marked as such 
  txt.gsub!(/\(http.*(\([^)]+\))?.*\)/m) do |x|
    x + "{: class='external'}"
  end

  Dir.chdir($target_dir) do
    File.open(ofn, "w") do |o|
      o.print txt
    end

    # YAML::dump(info['sections'], STDOUT)
    html = `kramdown #{ofn}`
    html.gsub!("\n</pre", "</pre")
    html.gsub!("\n</code", "</code")
    info['html'] = html
    if info['commands'].size > 0
      $target = info['file']
    end
  end

end
  

# The file to load
file = ARGV[0] || "doc.yaml"

# Looks for commands
parse_reference("qsoas.kd")

# p $fit_commands
# exit


files = {}
File.open(file, "r") { |f| files = YAML::load(f) }

for fn,info in files
  if info['copy']
    files.delete(fn)
    FileUtils::cp([fn], $target_dir)
  else
    info['source'] = fn
    info['file'] = fn.sub(".kd", ".html")
    parse_file(info)
  end
end

# Now, parse all the examples.
#
# The examples are 
$examples = {
  'commands' => {},
  'fit-commands' => {},
}
ex_cmd = $examples['commands']
ex_fcmd = $examples['fit-commands']
for fn,info in files
  for cmd,lst in info['used-commands']
    ex_cmd[cmd] ||= {}
    for l in lst
      tgt = "#{l['file']}#{l['id']}"
      ex_cmd[cmd][tgt] = l
    end
  end
  for cmd,lst in info['used-fit-commands']
    ex_fcmd[cmd] ||= {}
    for l in lst
      tgt = "#{l['file']}#{l['id']}"
      ex_fcmd[cmd][tgt] = l
    end
  end
end



if ! $make_web
  # Now, we parse the tips.
  puts "\nProcessing tips:"
  tips = []
  tips_kw = {}
  tips_ids = {}
  File.open("tips.kd") do |f|
    cur = nil
    kw = nil
    id = nil
    for l in f
      if l =~ /^\{::comment.*tip: ([^{]+)/
        kw = $1.strip
        if cur
          cur.close
          cur = nil
        end
      end
      if l =~ /^##\s*(.*\S)\s*\{#([^}]+)/
        id = $2
        tips << {
          'id' => id,
          'title' => $1,
          'kw' => kw
        }
        if tips_ids.key? id
          raise "Duplicate tip: #{id}"
        end
        tips_ids[id] = tips.last
        for k in kw.split(';')
          tips_kw[k] ||= 0
          tips_kw[k] += 1
        end
        fn = "#{$target_dir}/tips-#{id}.kd"
        cur = File::open(fn,'w')
      end
      if cur
        cur.print l
      end
    end
    if cur
      cur.close
    end
  end

  puts " -> found #{tips.size} tips"
  puts "Tips keywords:"
  for k in tips_kw.keys.sort
    puts " * #{k}: #{tips_kw[k]}"
  end

  puts ""


  File::open("#{$target_dir}/tips.txt",'w') do |f|
    for tip in tips
      id = tip['id']
      info = {}
      info['source'] = "#{$target_dir}/tips-#{id}.kd"
      info['tmp'] = "tips-#{id}.tmp.kd"
      info['file'] = "tips-#{id}.html"
      parse_file(info)
      info['sections'] = nil
      info['title'] = tip['title']
      files[id] = info
      f.puts "#{id}: #{tip['kw']}"
    end
  end
end


# OK, we've read the sources.

html_template = IO::read("template.html")

Dir.chdir($target_dir) do
  for file in files.values
    tgt = html_template.sub("#TITLE", file['title'])
    tgt.sub!("#CONTENT", file['html'])
    File.open(file['file'],'w') { |f| f.print $make_web ? file['html'] : tgt }
  end
end

files_s = ""

for f in $images.keys
  FileUtils::mkdir_p("#{$target_dir}/images")
  if File::readable? f
    FileUtils::cp(f, "#{$target_dir}/images")
    files_s << "<file>#{f}</file>\n"
  else
    puts "Image not found: #{f}"
  end
end

if ! $make_web
  help_template = IO::read("qhp-template.xml")

  # Now, we generate the TOC:
  def sec_string(sec,file)
    id = sec['id']
    if id
      id = "#{id}"
    else
      id = ""
      puts "Warning: no ID for section #{sec['title']}"
    end
    title = sec["title"].gsub("'","")
    if sec.key? 'sections'
      
      subs = sec['sections'].map {|s| sec_string(s,file) }
      return "<section title='#{title}' ref='#{file['file']}#{id}'>\n" +
             subs.join("\n") + "\n</section>"
    else
      return "<section title='#{title}' ref='#{file['file']}#{id}'/>"
    end
  end

  toc = ""
  keywords = ""
  for file in files.values
    if file['sections']
      secs = file['sections'].map {|s| sec_string(s,file) }
      toc << "<section title='#{file['title']}' ref='#{file['file']}'>\n" + 
             secs.join("\n") + "</section>\n"
    end

    files_s << "<file>#{file['file']}</file>\n"

    for cmd in file['commands']
      keywords << "<keyword name='#{cmd} (command)' ref='#{file['file']}#cmd-#{cmd}'/>\n"
    end
    for cmd in file['fit-commands']
      keywords << "<keyword name='#{cmd} (fit command)' ref='#{file['file']}#fit-cmd-#{cmd}'/>\n"
    end
    for cmd in file['fits']
      keywords << "<keyword name='#{cmd} (fit)' ref='#{file['file']}#cmd-fit-#{cmd}'/>\n"
    end
  end




  help_template.sub!("#TOC", toc)
  help_template.sub!("#KEYWORDS", keywords)
  help_template.sub!("#FILES", files_s)
  coll = File::read("qsoas-help.qhcp")

  Dir.chdir($target_dir) do

    File.open("qsoas-help.qhp",'w') { |f| f.print help_template }
    File.open(eqf, "w") { |f| YAML::dump($equations,f) }
    File.open(exf, "w") { |f| YAML::dump($examples,f) }
    File.open("qsoas-help.qhcp",'w') { |f| f.print coll }

    generator = "/usr/lib/qt5/bin/qcollectiongenerator"
    system("#{generator} qsoas-help.qhcp")
    FileUtils.cp(["qsoas-help.qhc","qsoas-help.qch"],"..")
  end
end
